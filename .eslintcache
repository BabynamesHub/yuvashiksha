[{"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/index.js":"1","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/App.js":"2","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/store/store.js":"3","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/AdminMain.js":"4","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/Student.js":"5","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/StudentMain.js":"6","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/LoginRoute.js":"7","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/TeacherMain.js":"8","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/Canvas/Canvas.js":"9","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/Admin.js":"10","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/Login.js":"11","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/store/reducers/login.js":"12","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Teacher.js":"13","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/store/reducers/adminReducer.js":"14","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/AdminLogin/AdminLogin.js":"15","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/shared/dailogBox.js":"16","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/TabView/TabView.js":"17","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/shared/http.js":"18","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/ListItem/ListItem.js":"19","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/navBar/NavBar.js":"20","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/components/StudentProfile/StudentProfile.js":"21","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/components/examguidelines/ExamGuidlines.js":"22","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/components/startexam/StartExam.js":"23","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/shared/parseCookie.js":"24","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/config.js":"25","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/verifyOtp/verifyOtp.js":"26","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/signin/signin.js":"27","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/setPassword/SetPassword.js":"28","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/TeacherProfile/TeacherProfile.js":"29","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/sigup/signup.js":"30","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/questionpaperpreview/QuestionpaperPreview.js":"31","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/sigup/googleSignup/GoogleSignup.js":"32","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/newExam/NewExam.js":"33","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/VerifyAccounts/VerifyAccounts.js":"34","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Message/Messagelist.js":"35","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Message/Messagecontent.js":"36","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Report/Report.js":"37","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Institutionstructure/Institutionstructure.js":"38","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Home/Home.js":"39","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/UserManagment/UserMangamenet.js":"40","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Question.js":"41","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/TeacherProfile/VerifyStudent.js":"42","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Institutionstructure/ClassBatch.js":"43","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Message/Message.js":"44","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Institutionstructure/Department.js":"45","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Institutionstructure/Subjects.js":"46","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/UserManagment/Students.js":"47","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/UserManagment/Teachers.js":"48","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/sigup/student/student.js":"49","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/sigup/teacher/teacher.js":"50","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Essay/Essay.js":"51","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Header/Header.js":"52","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Text/Text.js":"53","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Short/Short.js":"54","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Mcq/Mcq.js":"55","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/Search/Search.js":"56","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/previousExam/PreviousExam.js":"57"},{"size":266,"mtime":1610632664329,"results":"58","hashOfConfig":"59"},{"size":2280,"mtime":1617618654241,"results":"60","hashOfConfig":"59"},{"size":273,"mtime":1612448229756,"results":"61","hashOfConfig":"59"},{"size":902,"mtime":1617245595990,"results":"62","hashOfConfig":"59"},{"size":7074,"mtime":1618374804309,"results":"63","hashOfConfig":"59"},{"size":1089,"mtime":1617541076964,"results":"64","hashOfConfig":"59"},{"size":886,"mtime":1614401677977,"results":"65","hashOfConfig":"59"},{"size":1179,"mtime":1617358515317,"results":"66","hashOfConfig":"59"},{"size":7508,"mtime":1617245596824,"results":"67","hashOfConfig":"59"},{"size":5206,"mtime":1614400582980,"results":"68","hashOfConfig":"59"},{"size":4241,"mtime":1614401668469,"results":"69","hashOfConfig":"59"},{"size":322,"mtime":1611639830870,"results":"70","hashOfConfig":"59"},{"size":13671,"mtime":1618380526024,"results":"71","hashOfConfig":"59"},{"size":232,"mtime":1612448229756,"results":"72","hashOfConfig":"59"},{"size":2079,"mtime":1617245595955,"results":"73","hashOfConfig":"59"},{"size":2057,"mtime":1617245597071,"results":"74","hashOfConfig":"59"},{"size":1504,"mtime":1612447802311,"results":"75","hashOfConfig":"59"},{"size":949,"mtime":1614237223427,"results":"76","hashOfConfig":"59"},{"size":624,"mtime":1617550907016,"results":"77","hashOfConfig":"59"},{"size":577,"mtime":1612015027856,"results":"78","hashOfConfig":"59"},{"size":8704,"mtime":1617547755274,"results":"79","hashOfConfig":"59"},{"size":4246,"mtime":1618373638090,"results":"80","hashOfConfig":"59"},{"size":17594,"mtime":1618386216618,"results":"81","hashOfConfig":"59"},{"size":456,"mtime":1611716955802,"results":"82","hashOfConfig":"59"},{"size":51,"mtime":1611625884505,"results":"83","hashOfConfig":"59"},{"size":3888,"mtime":1614077492285,"results":"84","hashOfConfig":"59"},{"size":6767,"mtime":1617414576525,"results":"85","hashOfConfig":"59"},{"size":3111,"mtime":1613904510978,"results":"86","hashOfConfig":"59"},{"size":8844,"mtime":1618380946347,"results":"87","hashOfConfig":"59"},{"size":2549,"mtime":1614093842315,"results":"88","hashOfConfig":"59"},{"size":4986,"mtime":1617440860444,"results":"89","hashOfConfig":"59"},{"size":3204,"mtime":1613920796999,"results":"90","hashOfConfig":"59"},{"size":39743,"mtime":1617418654530,"results":"91","hashOfConfig":"59"},{"size":3497,"mtime":1617537845340,"results":"92","hashOfConfig":"59"},{"size":1354,"mtime":1614352598519,"results":"93","hashOfConfig":"59"},{"size":2058,"mtime":1614351846488,"results":"94","hashOfConfig":"59"},{"size":2443,"mtime":1614175936437,"results":"95","hashOfConfig":"59"},{"size":886,"mtime":1617245596097,"results":"96","hashOfConfig":"59"},{"size":2493,"mtime":1614221024241,"results":"97","hashOfConfig":"59"},{"size":539,"mtime":1614388551846,"results":"98","hashOfConfig":"59"},{"size":2152,"mtime":1617687688905,"results":"99","hashOfConfig":"59"},{"size":4359,"mtime":1617528679531,"results":"100","hashOfConfig":"59"},{"size":8586,"mtime":1617245596057,"results":"101","hashOfConfig":"59"},{"size":1081,"mtime":1614351124974,"results":"102","hashOfConfig":"59"},{"size":7685,"mtime":1617245596087,"results":"103","hashOfConfig":"59"},{"size":3056,"mtime":1613789705876,"results":"104","hashOfConfig":"59"},{"size":4908,"mtime":1614399605932,"results":"105","hashOfConfig":"59"},{"size":5116,"mtime":1614399530586,"results":"106","hashOfConfig":"59"},{"size":5864,"mtime":1614348130920,"results":"107","hashOfConfig":"59"},{"size":4013,"mtime":1614264201482,"results":"108","hashOfConfig":"59"},{"size":1671,"mtime":1617634905128,"results":"109","hashOfConfig":"59"},{"size":978,"mtime":1617622201430,"results":"110","hashOfConfig":"59"},{"size":158,"mtime":1617245596461,"results":"111","hashOfConfig":"59"},{"size":1753,"mtime":1617687678235,"results":"112","hashOfConfig":"59"},{"size":1458,"mtime":1617687612529,"results":"113","hashOfConfig":"59"},{"size":580,"mtime":1617245596845,"results":"114","hashOfConfig":"59"},{"size":2047,"mtime":1618381703757,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"hygb9z",{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"118"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"118"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"118"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"118"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"118"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"118"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"118"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"118"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"118"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"118"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"118"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"118"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"118"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"118"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"118"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"118"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"118"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"118"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"118"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"118"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"118"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"118"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"118"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"118"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"118"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"118"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"118"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"118"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"118"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"118"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"118"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/index.js",[],["271","272"],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/App.js",["273","274"],"import { Provider } from \"react-redux\";\nimport { BrowserRouter, Redirect, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport LoginRoute from \"./components/login/LoginRoute\";\nimport Student from \"./components/student/Student\";\nimport TeacherMain from \"./components/teacher/TeacherMain\";\nimport AdminMain from \"./components/admin/AdminMain\";\n\nimport { store } from \"./store/store\";\nimport React from \"react\";\n\nimport $ from \"jquery\";\nimport Canvas from \"./components/ui-elements/Canvas/Canvas\";\nimport StudentMain from \"./components/student/StudentMain\";\n\nclass App extends React.Component {\n  //disable right click\n  preventRightClick = () => {\n    document.addEventListener(\"contextmenu\", (event) => event.preventDefault());\n  };\n\n  //Prevent COPY ,PASTE\n  preventCopyPaste = () => {\n    $(document).ready(() => {\n      // Disables ctrl+v, ctrl+x, ctrl+c.\n      $(document).on(\"cut copy paste\", function (e) {\n        alert(\"Cut, Copy, Paste are NOT allowed.\");\n        e.preventDefault();\n      });\n    });\n  };\n\n  componentDidMount() {\n    //Disabling right click menu\n    this.preventRightClick();\n\n    //Prevent cut copy paste features\n    this.preventCopyPaste();\n\n    //Replacing system default alert with custom alert\n    window.alert = (text) => {\n      $(\"body\").append(\n        `<div class=\"alert alert-info alert-dismissible\" role=\"alert\" id=\"systemAlert\">\n          <button\n            type=\"button\"\n            class=\"close\"\n            data-dismiss=\"alert\"\n            aria-label=\"Close\"\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>${text}\n        </div>`\n      );\n    };\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <Provider store={store}>\n          <div>\n            {/* Routes of the app */}\n            <Route path=\"/\" component={LoginRoute} />\n            <Route path=\"/student\" component={StudentMain} />\n            <Route path=\"/teacher\" component={TeacherMain} />\n            <Route path=\"/admin\" component={AdminMain} />\n\n            {/* //Test route for development purposes */}\n            <Route path=\"/test\">\n              <>\n                <Canvas />\n              </>\n            </Route>\n          </div>\n        </Provider>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/store/store.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/AdminMain.js",["275"],"import React, { Component } from \"react\";\nimport Admin from \"./Admin\";\nimport AdminLogin from \"./AdminLogin/AdminLogin\";\nimport http from \"../../shared/http\";\n\nexport default class AdminMain extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { component: null };\n  }\n\n  checkAuthentication = () => {\n    http(\n      \"POST\",\n      \"/login/checkAdmin\",\n      null,\n      (res) => {\n        if (res.status == 200) {\n          this.setState({ component: <Admin /> });\n        } else {\n          alert(res.data);\n          this.setState({ component: null });\n        }\n      },\n      (err) => {\n        alert(\"Authentication Failed! Please login again\");\n        this.setState({ component: null });\n      }\n    );\n  };\n  componentDidMount() {\n    this.checkAuthentication();\n  }\n\n  render() {\n    return <>{this.state.component ? this.state.component : <AdminLogin />}</>;\n  }\n}\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/Student.js",["276","277","278","279"],"import React, { Component } from \"react\";\r\nimport NavBar from \"../ui-elements/navBar/NavBar\";\r\nimport TabView from \"../ui-elements/TabView/TabView\";\r\nimport ExamGuidlines from \"./components/examguidelines/ExamGuidlines\";\r\nimport ListItem from \"../ui-elements/ListItem/ListItem\";\r\nimport StartExam from \"./components/startexam/StartExam\";\r\nimport { Link, BrowserRouter, Route, withRouter } from \"react-router-dom\";\r\nimport StudentProfile from \"./components/StudentProfile/StudentProfile\";\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\nimport \"./Student.css\";\r\nimport http from \"../../shared/http\";\r\nimport configuireDialogBox from \"../../shared/dailogBox\";\r\n\r\nclass Student extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      examData: [],\r\n      examList: [],\r\n      previousExamList: [],\r\n      selectedExam: null,\r\n      webcam: { webcam: \"webcam object here\" },\r\n    };\r\n  }\r\n\r\n  //Get exam data from the server\r\n  getExamData = () => {\r\n    http(\"GET\", \"/student/exams\", {}, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ examData: res.data }, () => {\r\n          this.setExamData();\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  //Setup the list items for the exams\r\n  setExamData = () => {\r\n    let examList = [];\r\n    let previousExamList = [];\r\n\r\n    let currentTime = new Date();\r\n\r\n    this.state.examData.map((item) => {\r\n      let examDate = new Date(`${item.date},${item.to}`);\r\n      let startTime = new Date(`${item.date},${item.from}`);\r\n\r\n      if (currentTime.getTime() > examDate.getTime()) {\r\n        previousExamList.push(\r\n          <ListItem height=\"100px\" key={item._id}>\r\n            {{\r\n              left: (\r\n                <div id=\"leftListItem\">\r\n                  <p>Exam Name: {item.examName}</p>\r\n                  <p>Subject: {item.subject}</p>\r\n                  <p>Date: {item.date}</p>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div id=\"rightListItem\">\r\n                  <p>\r\n                    Time: {item.from} - {item.to}\r\n                  </p>\r\n                  <p>{item.marks} Marks</p>\r\n                </div>\r\n              ),\r\n            }}\r\n          </ListItem>\r\n        );\r\n      } else {\r\n        examList.push(\r\n          <ListItem\r\n            height=\"100px\"\r\n            key={item._id}\r\n            green={currentTime.getTime() > startTime.getTime() ? true : null}\r\n            onClick={() => this.openScheduledExam(item)}\r\n          >\r\n            {{\r\n              left: (\r\n                <div id=\"leftListItem\">\r\n                  <p>Exam Name: {item.examName}</p>\r\n                  <p>Subject: {item.subject}</p>\r\n                  <p>Date: {item.date}</p>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div id=\"rightListItem\">\r\n                  <p>\r\n                    Time: {item.from} - {item.to}\r\n                  </p>\r\n                  <p>{item.marks} Marks</p>\r\n                </div>\r\n              ),\r\n            }}\r\n          </ListItem>\r\n        );\r\n      }\r\n    });\r\n\r\n    //Changing the state\r\n    this.setState({ examList, previousExamList });\r\n  };\r\n\r\n  //Open the profile of the student account\r\n  openProfile = () => {\r\n    this.props.history.push(\"/student/profile\");\r\n  };\r\n\r\n  //Open the welcome dialog box\r\n  openWelcomDialog = () => {\r\n    window.$(\"#welcome\").modal(\"show\");\r\n  };\r\n\r\n  //Open the scheduled exam\r\n  openScheduledExam = (item) => {\r\n    this.setState({ selectedExam: item }, () => {\r\n      let startTime = new Date(`${item.date},${item.from}`);\r\n      let currentTime = new Date();\r\n\r\n      if (currentTime.getTime() > startTime.getTime()) {\r\n        //Exam start time reached\r\n        this.openExamGuidlines();\r\n      } else {\r\n        window.$(\"#warning\").modal(\"show\");\r\n      }\r\n    });\r\n  };\r\n\r\n  //Open the exam guidlines page\r\n  openExamGuidlines = () => {\r\n    this.props.history.push(\"/student/guidelines\");\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.openWelcomDialog();\r\n    this.getExamData();\r\n\r\n    console.log(this.props);\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <Route path=\"/student/profile\" exact>\r\n          <StudentProfile\r\n            user={this.props.user.user}\r\n            Class={this.props.user.Class}\r\n            batch={this.props.user.batch}\r\n            department={this.props.user.department}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/student/guidelines\" exact>\r\n          <ExamGuidlines\r\n            exam={this.state.selectedExam}\r\n            webcam={this.state.webcam}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/student/exam\">\r\n          <StartExam\r\n            exam={this.state.selectedExam}\r\n            webcam={this.state.webcam}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/student\" exact>\r\n          <div>\r\n            {/* Configure the welcome modal */}\r\n            {configuireDialogBox(\r\n              \"welcome\",\r\n              \"Welcome \" + this.props.user.user.name,\r\n              <>\r\n                You can start writing the exams which are displayed in{\" \"}\r\n                <span style={{ backgroundColor: \"lightgreen\" }}>\r\n                  LIGHT GREEN\r\n                </span>{\" \"}\r\n                color.\r\n                <br />\r\n                You an use the PREVIOUS EXAMS tab to view your previous exam\r\n                informations.\r\n              </>,\r\n              <input\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                value=\"GOT IT\"\r\n                data-toggle=\"modal\"\r\n                data-target=\"#welcome\"\r\n              />\r\n            )}\r\n            {/* Configure the dialog box to show warning about the exam start timne */}\r\n            {configuireDialogBox(\r\n              \"warning\",\r\n              \"Information\",\r\n              <>\r\n                Your exam is not yet started! Please check the examination time\r\n                and try again after some time\r\n              </>,\r\n              <input\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                value=\"OK\"\r\n                data-toggle=\"modal\"\r\n                data-target=\"#warning\"\r\n              />\r\n            )}\r\n            <NavBar>\r\n              {{\r\n                left: (\r\n                  <h5 id=\"profileText\" onClick={this.openProfile}>\r\n                    <FaUserCircle className=\"mr-3 ml-3\" size={40} />\r\n                    {this.props.user.user.name}\r\n                  </h5>\r\n                ),\r\n              }}\r\n            </NavBar>\r\n            <TabView>\r\n              {{\r\n                leftTab: <span>SCHEDULED EXAMS</span>,\r\n                rightTab: <span>PREVIOUS EXAMS</span>,\r\n                leftTabBody: <div id=\"leftTabBody\">{this.state.examList}</div>,\r\n                rightTabBody: (\r\n                  <div id=\"rightTabBody\">{this.state.previousExamList}</div>\r\n                ),\r\n              }}\r\n            </TabView>\r\n          </div>\r\n        </Route>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Student);\r\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/StudentMain.js",["280"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport http from \"../../shared/http\";\r\nimport Student from \"./Student\";\r\n\r\nclass StudentMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { component: null };\r\n  }\r\n\r\n  checkAuthentication = () => {\r\n    http(\r\n      \"POST\",\r\n      \"/login/checkStudent\",\r\n      null,\r\n      (res) => {\r\n        if (res.status == 200) {\r\n          this.setState({\r\n            component: <Student user={res.data} />,\r\n          });\r\n        } else {\r\n          alert(res.data);\r\n          this.setState({ component: null });\r\n          this.props.history.push(\"/\");\r\n        }\r\n      },\r\n      (err) => {\r\n        alert(\"Authentication Failed! Please login again\");\r\n        this.setState({ component: null });\r\n        this.props.history.push(\"/\");\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.checkAuthentication();\r\n  }\r\n\r\n  render() {\r\n    return <>{this.state.component ? this.state.component : null}</>;\r\n  }\r\n}\r\n\r\nexport default withRouter(StudentMain);\r\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/LoginRoute.js",["281"],"/**\n * This is the router in the client side to navigate user in the browser without page refresh\n * THIS IS THE ROUTER ONLY FOR THE LOGIN MODULE\n */\nimport { Component } from \"react\";\nimport {\n  BrowserRouter,\n  Route,\n  withRouter,\n  Switch,\n  Redirect,\n} from \"react-router-dom\";\n\nimport Login from \"./Login\";\n\nclass LoginRoute extends Component {\n  render() {\n    return (\n      /**\n       * DISPLAYING CORRESPONDING COMPONENTS IN DIFFERENT ROUTES\n       */\n      <Switch>\n        <Route path=\"/\" exact>\n          <Redirect to=\"/signin\" />\n        </Route>\n        <Route path=\"/signin\" exact>\n          <Login signin />\n        </Route>\n        <Route path=\"/signup\" exact>\n          <Login signup />\n        </Route>\n        <Route path=\"/signup/google\" exact>\n          <Login googleSignup />\n        </Route>\n      </Switch>\n    );\n  }\n}\n\nexport default withRouter(LoginRoute);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/TeacherMain.js",["282"],"import React, { Component } from \"react\";\nimport Teacher from \"./Teacher\";\nimport http from \"../../shared/http\";\nimport { withRouter } from \"react-router-dom\";\n\nclass TeacherMain extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { component: null };\n  }\n\n  checkAuthentication = () => {\n    http(\n      \"POST\",\n      \"/login/checkTeacher\",\n      null,\n      (res) => {\n        if (res.status == 200) {\n          this.setState({\n            component: (\n              <Teacher\n                user={res.data}\n                hod={res.data.hod}\n                mentor={res.data.mentor}\n              />\n            ),\n          });\n        } else {\n          alert(res.data);\n          this.setState({ component: null });\n          this.props.history.push(\"/\");\n        }\n      },\n      (err) => {\n        alert(\"Authentication Failed! Please login again\");\n        this.setState({ component: null });\n        this.props.history.push(\"/\");\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.checkAuthentication();\n  }\n\n  render() {\n    return <>{this.state.component ? this.state.component : null}</>;\n  }\n}\n\nexport default withRouter(TeacherMain);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/Canvas/Canvas.js",["283","284","285","286","287","288"],"import React, { Component } from \"react\";\nimport NavBar from \"../navBar/NavBar\";\nimport \"./Canvas.css\";\n\nexport default class Canvas extends Component {\n  constructor(props) {\n    super(props);\n\n    this.canvas = false;\n    this.ctx = false;\n    this.flag = false;\n\n    this.prevX = 0;\n    this.currX = 0;\n    this.prevY = 0;\n    this.currY = 0;\n    this.dot_flag = false;\n\n    this.x = \"black\";\n    this.y = 2;\n  }\n\n  init = () => {\n    this.canvas = document.getElementById(\"can\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctx.canvas.width = window.innerWidth;\n    this.ctx.canvas.height = window.innerHeight;\n    this.w = this.canvas.width;\n    this.h = this.canvas.height;\n\n    this.canvas.addEventListener(\n      \"mousemove\",\n      (e) => {\n        this.findxy(\"move\", e);\n      },\n      false\n    );\n\n    this.canvas.addEventListener(\n      \"mousedown\",\n      (e) => {\n        this.findxy(\"down\", e);\n      },\n      false\n    );\n\n    this.canvas.addEventListener(\n      \"mouseup\",\n      (e) => {\n        this.findxy(\"up\", e);\n      },\n      false\n    );\n\n    this.canvas.addEventListener(\n      \"mouseout\",\n      (e) => {\n        this.findxy(\"out\", e);\n      },\n      false\n    );\n  };\n\n  color = (obj) => {\n    switch (obj.id) {\n      case \"green\":\n        this.x = \"green\";\n        break;\n      case \"blue\":\n        this.x = \"blue\";\n        break;\n      case \"red\":\n        this.x = \"red\";\n        break;\n      case \"yellow\":\n        this.x = \"yellow\";\n        break;\n      case \"orange\":\n        this.x = \"orange\";\n        break;\n      case \"black\":\n        this.x = \"black\";\n        break;\n      case \"white\":\n        this.x = \"white\";\n        break;\n    }\n    if (this.x == \"white\") this.y = 14;\n    else this.y = 2;\n  };\n\n  draw = () => {\n    this.ctx.beginPath();\n    this.ctx.moveTo(this.prevX, this.prevY);\n    this.ctx.lineTo(this.currX, this.currY);\n    this.ctx.strokeStyle = this.x;\n    this.ctx.lineWidth = this.y;\n    this.ctx.stroke();\n    this.ctx.closePath();\n  };\n\n  erase = () => {\n    var m = window.confirm(\"Are you sure to clear?\");\n    if (m) {\n      this.ctx.clearRect(0, 0, this.w, this.h);\n    }\n  };\n\n  //Check if acanvas is empty\n  isCanvasBlank = (canvas) => {\n    const context = canvas.getContext(\"2d\");\n\n    const pixelBuffer = new Uint32Array(\n      context.getImageData(0, 0, canvas.width, canvas.height).data.buffer\n    );\n\n    return !pixelBuffer.some((color) => color !== 0);\n  };\n\n  save = () => {\n    var dataURL = this.canvas.toDataURL();\n    if (this.props.save) {\n      if (this.isCanvasBlank(this.canvas)) {\n        this.props.save(\"\");\n      } else this.props.save(dataURL);\n    }\n  };\n\n  findxy = (res, e) => {\n    if (res == \"down\") {\n      this.prevX = this.currX;\n      this.prevY = this.currY;\n      this.currX = e.clientX - this.canvas.getBoundingClientRect().left;\n      this.currY = e.clientY - this.canvas.getBoundingClientRect().top;\n\n      this.flag = true;\n      this.dot_flag = true;\n      if (this.dot_flag) {\n        this.ctx.beginPath();\n        this.ctx.fillStyle = this.x;\n        this.ctx.fillRect(this.currX, this.currY, 2, 2);\n        this.ctx.closePath();\n        this.dot_flag = false;\n      }\n    }\n    if (res == \"up\" || res == \"out\") {\n      this.flag = false;\n    }\n    if (res == \"move\") {\n      if (this.flag) {\n        this.prevX = this.currX;\n        this.prevY = this.currY;\n        this.currX = e.clientX - this.canvas.getBoundingClientRect().left;\n        this.currY = e.clientY - this.canvas.getBoundingClientRect().top;\n        this.draw();\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.init();\n\n    //Load previous image if exist\n    if (this.props.image) {\n      let ctx = this.canvas.getContext(\"2d\");\n\n      var image = new Image();\n      image.onload = function () {\n        ctx.drawImage(image, 0, 0);\n      };\n      image.src = this.props.image;\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <div style={{ zIndex: 1000000 }}>\n          <NavBar>\n            {{\n              left: <h4>CANVAS</h4>,\n              center: (\n                <div style={{ display: \"flex\" }}>\n                  <div className=\"mr-3\">\n                    <div>Choose Color</div>\n                    <div style={{ display: \"flex\" }}>\n                      <div\n                        id=\"green\"\n                        className=\"colorBox\"\n                        onClick={(e) => {\n                          this.color(e.target);\n                        }}\n                        style={{ backgroundColor: \"green\" }}\n                      ></div>\n                      <div\n                        style={{ backgroundColor: \"blue\" }}\n                        id=\"blue\"\n                        className=\"colorBox\"\n                        onClick={(e) => {\n                          this.color(e.target);\n                        }}\n                      ></div>\n                      <div\n                        style={{ backgroundColor: \"red\" }}\n                        id=\"red\"\n                        className=\"colorBox\"\n                        onClick={(e) => {\n                          this.color(e.target);\n                        }}\n                      ></div>\n                      <div\n                        id=\"yellow\"\n                        style={{ backgroundColor: \"yellow\" }}\n                        onClick={(e) => {\n                          this.color(e.target);\n                        }}\n                        className=\"colorBox\"\n                      ></div>\n                      <div\n                        id=\"orange\"\n                        style={{ backgroundColor: \"orange\" }}\n                        onClick={(e) => {\n                          this.color(e.target);\n                        }}\n                        className=\"colorBox\"\n                      ></div>\n                      <div\n                        id=\"black\"\n                        style={{ backgroundColor: \"black\" }}\n                        onClick={(e) => {\n                          this.color(e.target);\n                        }}\n                        className=\"colorBox\"\n                      ></div>\n                    </div>\n                  </div>\n\n                  <div>\n                    <div>Eraser</div>\n                    <div\n                      id=\"white\"\n                      style={{ backgroundColor: \"white\" }}\n                      className=\"colorBox\"\n                      onClick={(e) => {\n                        this.color(e.target);\n                      }}\n                    ></div>\n                  </div>\n                  {/* <img\n                  id=\"canvasimg\"\n                /> */}\n                </div>\n              ),\n              right: (\n                <>\n                  <button\n                    className=\"btn btn-danger mr-3\"\n                    onClick={this.props.close}\n                  >\n                    CLOSE\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    id=\"clr\"\n                    className=\"btn btn-secondary mr-3\"\n                    onClick={this.erase}\n                  >\n                    CLEAR\n                  </button>\n                  <button className=\"btn btn-success\" onClick={this.save}>\n                    SAVE\n                  </button>\n                </>\n              ),\n            }}\n          </NavBar>\n          <div id=\"canvasDiv\">\n            <canvas id=\"can\"></canvas>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/Admin.js",["289","290","291","292","293","294","295","296"],"import { Component } from \"react\";\nimport $ from \"jquery\";\nimport \"./Admin.css\";\n\nimport NavBar from \"../ui-elements/navBar/NavBar\";\nimport { Switch, Route, withRouter, Redirect } from \"react-router-dom\";\n\nimport Home from \"./pages/Home/Home\";\nimport Institutionstructure from \"./pages/Institutionstructure/Institutionstructure\";\nimport Messagelist from \"./pages/Message/Messagelist\";\nimport Report from \"./pages/Report/Report\";\nimport UserMangamenet from \"./pages/UserManagment/UserMangamenet\";\nimport VerifyAccount from \"./pages/VerifyAccounts/VerifyAccounts\";\nimport Messagecontent from \"./pages/Message/Messagecontent\";\n\nimport http from \"../../shared/http\";\n\nimport { Button } from \"react-bootstrap\";\nimport { FaPlus } from \"react-icons/fa\";\n\nclass Admin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      activeItem: $(\"#adminSidebar .active\").attr(\"name\"),\n    };\n  }\n\n  changePage = (event) => {\n    //Get active item\n    let activeItem = $(\"#adminSidebar .active\");\n    //Clicked tab\n    let clickedItem = $(event.target);\n\n    //Remove \"active\" class from the active item\n    activeItem.removeClass(\"active\");\n\n    //Add active class to the clicked item\n    clickedItem.addClass(\"active\");\n\n    //Changing the browser Route\n    this.props.history.push(\"/admin/\" + clickedItem.attr(\"name\"));\n\n    //Setting the states correctly\n    this.setState({ activeItem: clickedItem.attr(\"name\") });\n  };\n\n  logout = () => {\n    http(\"GET\", \"/login/logout\", {}, (res) => {\n      alert(res.data);\n      if (res.status == 200) {\n        window.location.href = \"http://localhost:3000/\";\n      }\n    });\n  };\n\n  componentDidMount() {\n    $(\n      \".list-group-item[name=\" +\n        this.props.history.location.pathname.split(\"/\")[2] +\n        \"]\"\n    ).addClass(\"active\");\n\n    this.setState({ activeItem: $(\"#adminSidebar .active\").attr(\"name\") });\n  }\n\n  render() {\n    //Target modal to open when InstitutionStructure + button clicked\n    let targetModal = \"#adddept\";\n\n    //Check if the path is in the /class inside /Institutionstructure\n    let path = this.props.history.location.pathname.split(\"/\")[3];\n\n    if (path == \"class\") {\n      targetModal = \"#addclass\";\n    }\n\n    //The content of the right side of the navBar\n    let navBarRight = {\n      home: (\n        <Button variant=\"danger\" className=\"mr-4\" onClick={this.logout}>\n          Logout\n        </Button>\n      ),\n      institutionStructure: (\n        <Button className=\"mr-4\" data-toggle=\"modal\" data-target={targetModal}>\n          <FaPlus />\n        </Button>\n      ),\n      message: null,\n      report: null,\n      verifyAccount: null,\n      userManagement: null,\n    };\n\n    return (\n      <div className=\"root\">\n        <NavBar>\n          {{\n            left: <h3>ADMIN</h3>,\n            right: navBarRight[this.state.activeItem],\n          }}\n        </NavBar>\n        <div id=\"adminBody\">\n          <div id=\"adminSidebar\">\n            <div class=\"list-group\">\n              <a class=\"list-group-item\" onClick={this.changePage} name=\"home\">\n                Home\n              </a>\n              <a\n                class=\"list-group-item\"\n                onClick={this.changePage}\n                name=\"institutionStructure\"\n              >\n                Institution Structure\n              </a>\n              <a\n                class=\"list-group-item\"\n                onClick={this.changePage}\n                name=\"message\"\n              >\n                Messages\n              </a>\n              <a\n                class=\"list-group-item\"\n                onClick={this.changePage}\n                name=\"report\"\n              >\n                Report\n              </a>\n              <a\n                class=\"list-group-item\"\n                onClick={this.changePage}\n                name=\"verifyAccount\"\n              >\n                Verify Account\n              </a>\n              <a\n                class=\"list-group-item\"\n                onClick={this.changePage}\n                name=\"userManagement\"\n              >\n                User Management\n              </a>\n            </div>\n          </div>\n          <div id=\"adminContent\">\n            <Switch>\n              <Route\n                path=\"/admin/message/messagecontent\"\n                exact\n                component={Messagecontent}\n              />\n              <Route path=\"/admin/home\" exact>\n                <Home />\n              </Route>\n\n              <Route path=\"/admin/institutionstructure\">\n                <Institutionstructure />\n              </Route>\n\n              <Route path=\"/admin/message\" exact>\n                <Messagelist />\n              </Route>\n\n              <Route path=\"/admin/report\" exact>\n                <Report />\n              </Route>\n\n              <Route path=\"/admin/usermanagement\" exact>\n                <UserMangamenet />\n              </Route>\n\n              <Route path=\"/admin/verifyaccount\" exact>\n                <VerifyAccount />\n              </Route>\n              <Route path=\"/admin\">\n                <Redirect to=\"/admin/home\" />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Admin);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/Login.js",["297","298","299","300"],"/**\n * MAIN SIGNIN/SIGNUP COMPONENT\n */\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./login.css\";\n\nimport Signin from \"./signin/signin\";\nimport Signup from \"./sigup/signup\";\nimport VerifyOtp from \"./verifyOtp/verifyOtp\";\nimport SetPassword from \"./setPassword/SetPassword\";\nimport { BrowserRouter, Route, withRouter } from \"react-router-dom\";\nimport GoogleSignup from \"./sigup/googleSignup/GoogleSignup\";\n\n//DISPATH ACTIONS TO CHANGE REDUX STORE DATA (USED FOR SIGNUP PROCEDURE)\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateData: (payload) => dispatch({ type: \"updateSignupData\", payload }),\n    clearData: () => dispatch({ type: \"clearSignupData\" }),\n  };\n};\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signin: true, //IF SIGNIN TAB ACTIVE\n      signup: false, //IF SIGNUP TAB ACTIVE\n\n      googleSignup: false, //IF GOOGLE SIGNUP WINDOW VISIBLE\n      showVerifyOtp: false, //IF OTP VERIFICATION SCREEN IS VISIBLE (DURING SIGNUP)\n      showSetPassword: false, //IF PASSWORD ENTRY SCREEN IS VISIBLE (DURING SIGNUP)\n    };\n  }\n\n  changeTabToSignup = () => {\n    this.setState({\n      signin: false,\n      signup: true,\n\n      googleSignup: false,\n      showVerifyOtp: false,\n      showSetPassword: false,\n    });\n\n    this.props.history.push(\"/signup\");\n  };\n\n  changeTabToSignin = () => {\n    this.setState({\n      signin: true,\n      signup: false,\n\n      googleSignup: false,\n      showVerifyOtp: false,\n      showSetPassword: false,\n    });\n    this.props.history.push(\"/signin\");\n  };\n\n  showVerifyOtp = () => {\n    this.setState({ showVerifyOtp: true, signin: false, signup: false });\n  };\n\n  otpVerified = () => {\n    this.setState({\n      showVerifyOtp: false,\n      signin: false,\n      signup: false,\n      googleSignup: false,\n      showSetPassword: true,\n    });\n  };\n\n  /**\n   * INITIALLY SETTING THE VIEW OF THE COMPONENT BASED ON THE RECIEVED PROPS\n   * PROPS CAN BE EITHER: signin, signup or googleSignup\n   */\n  setView = () => {\n    if (this.props.signin) {\n      this.changeTabToSignin();\n    } else if (this.props.signup) {\n      this.changeTabToSignup();\n    } else if (this.props.googleSignup) {\n      this.setState({\n        signin: false,\n        signup: false,\n        showSetPassword: false,\n        showVerifyOtp: false,\n        googleSignup: true,\n      });\n    }\n  };\n\n  componentDidMount() {\n    //Setting initial view of the component base on the props\n    this.setView();\n  }\n\n  render() {\n    //CSS Style to apply for the active tab SIGNIN or SIGNUP\n    let style = {\n      \"background-color\": \"rgb(37, 35, 34)\",\n      color: \"white\",\n    };\n\n    return (\n      <div id=\"loginBody\">\n        <div\n          className=\"d-flex align-items-center justify-content-center\"\n          style={{ height: \"100vh\" }}\n        >\n          <div className=\"card\" id=\"login-card\" style={{ width: \"25rem\" }}>\n            <div className=\"card-body\">\n              <nav class=\"nav nav-pills nav-fill\">\n                <a\n                  className=\"nav-item nav-link active\"\n                  href=\"#\"\n                  id=\"signin-tab\"\n                  onClick={this.changeTabToSignin}\n                  style={this.state.signin ? style : null}\n                >\n                  SIGN IN\n                </a>\n                <a\n                  className=\"nav-item nav-link\"\n                  href=\"#\"\n                  id=\"signup-tab\"\n                  onClick={this.changeTabToSignup}\n                  style={this.state.signin ? null : style}\n                >\n                  SIGN UP\n                </a>\n              </nav>\n              {this.state.signin ? <Signin /> : null}\n              {this.state.signup ? (\n                <Signup otpSent={this.showVerifyOtp} />\n              ) : null}\n              {this.state.showVerifyOtp ? (\n                <VerifyOtp otpVerified={this.otpVerified} />\n              ) : null}\n              {this.state.showSetPassword ? <SetPassword /> : null}\n              {this.state.googleSignup ? <GoogleSignup /> : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(Login));\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/store/reducers/login.js",["301"],"export const loginReducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"updateSignupData\":\n      return {\n        ...state,\n        signupData: { ...action.payload },\n        validSignupData: true,\n      };\n      break;\n    case \"clearSignupData\":\n      return {};\n    default:\n      return state;\n  }\n};\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Teacher.js",["302","303","304","305","306","307","308","309","310"],"import { Component } from \"react\";\nimport \"./Teacher.css\";\n\nimport NavBar from \"../ui-elements/navBar/NavBar\";\nimport TabView from \"../ui-elements/TabView/TabView\";\nimport ListItem from \"../ui-elements/ListItem/ListItem\";\nimport NewExam from \"./newExam/NewExam\";\nimport PreviousExam from \"./previousExam/PreviousExam\";\nimport TeacherProfile from \"./TeacherProfile/TeacherProfile\";\nimport { FaUserCircle } from \"react-icons/fa\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport http from \"../../shared/http\";\nimport React from \"react\";\nimport QuestionPaperPreview from \"./questionpaperpreview/QuestionpaperPreview\";\n\nclass Teacher extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      examData: [],\n      examList: [],\n      previousExamList: [],\n      classes: [],\n      classOptions: null,\n      batchOptions: null,\n      teacherSelect: null,\n      showEmpty: true,\n      editExam: null,\n      teacherData: {},\n      restrictedExam: false,\n      teacherSelectDisabled: true,\n      selectedExam: null,\n    };\n\n    this.userRole = \"teacher\";\n  }\n\n  //Creating ref objects\n  batchRef = React.createRef();\n  classRef = React.createRef();\n  teacherRef = React.createRef();\n\n  //Set list view of the exams\n  setExamData = () => {\n    let currentTime = new Date();\n    let previousExamList = [];\n    let examList = [];\n\n    for (let item of this.state.examData) {\n      let examDate = new Date(`${item.date},${item.to}`);\n\n      let newItem = (\n        <ListItem\n          height=\"100px\"\n          key={item._id}\n          onClick={() => {\n            this.examListClickListener(item._id);\n          }}\n        >\n          {{\n            left: (\n              <div id=\"leftListItem\">\n                <p>Exam Name: {item.examName}</p>\n                <p>Subject: {item.subject}</p>\n                <p>Date: {item.date}</p>\n              </div>\n            ),\n            right: (\n              <div id=\"rightListItem\">\n                <p>\n                  Time: {item.from} - {item.to}\n                </p>\n                <p>{item.totalMarks} Marks</p>\n              </div>\n            ),\n          }}\n        </ListItem>\n      );\n\n      if (currentTime.getTime() > examDate.getTime()) {\n        previousExamList.push(newItem);\n      } else {\n        examList.push(newItem);\n      }\n    }\n    this.setState({\n      previousExamList,\n      examList,\n    });\n  };\n\n  newExam = () => {\n    this.props.history.push(\"/teacher/newexam\");\n  };\n\n  //Opens the teacher profile view\n  openProfile = () => {\n    this.props.history.push(\"/teacher/profile\");\n  };\n\n  //Get exam data from server\n  getExamData = () => {\n    http(\n      \"POST\",\n      \"/teacher/getexams\",\n      {\n        Class: this.classRef.current.value,\n        batch: this.batchRef.current.value,\n      },\n      (res) => {\n        this.setState({ examData: res.data }, this.setExamData);\n      }\n    );\n  };\n\n  //Get class informations\n  getClasses = () => {\n    http(\"GET\", \"/teacher/getclasses\", {}, (res) => {\n      if (res.status == 200) {\n        this.setState({ classes: res.data }, () => {\n          // this.getTeacherData();\n          this.setupClassOptions();\n        });\n      } else {\n        //Error found\n        alert(res.data);\n      }\n    });\n  };\n\n  //Setup the options for the <select> for classes\n  setupClassOptions = () => {\n    //Options JSX\n    let options = [];\n\n    options = Object.keys(this.state.classes).map((key, array) => {\n      return (\n        <option key={Date.now() + key} value={key}>\n          {key}\n        </option>\n      );\n    });\n\n    //Setting class list options to display\n    this.setState({ classOptions: options });\n  };\n\n  //Setup the options for the <select> for batches based on the selected Class\n  setupBatchOptions = () => {\n    //Currently selected class\n    let Class = this.classRef.current.value;\n\n    if (!Class) return;\n\n    //Getting batches of the selected class\n    let batches = this.state.classes[Class].batches;\n\n    let options = batches.map((batch, index, array) => {\n      return (\n        <option key={Date.now() + batch} value={batch}>\n          {batch}\n        </option>\n      );\n    });\n\n    //Setting options as state to diaplay it in screen\n    this.setState({ batchOptions: options });\n  };\n\n  //onChange handler for class <select>\n  classChanged = (event) => {\n    this.batchRef.current.value = \"\";\n    this.setState({ teacherSelectDisabled: true }, () =>\n      this.setUpTeacherSelect()\n    );\n\n    this.setupBatchOptions();\n\n    this.checkClassSelected();\n  };\n\n  //onChange Listener for Batch <select>\n  batchChanged = (event) => {\n    if (\n      !this.props.mentor ||\n      (this.classRef.current.value == this.props.mentor.name &&\n        this.batchRef.current.value == this.props.mentor.batch)\n    ) {\n      this.setState({ teacherSelectDisabled: false }, () =>\n        this.setUpTeacherSelect()\n      );\n    } else {\n      this.setState({ teacherSelectDisabled: true }, () =>\n        this.setUpTeacherSelect()\n      );\n    }\n\n    this.checkClassSelected();\n  };\n\n  //Check if both class and batch is selected or not\n  checkClassSelected = () => {\n    if (\n      this.classRef.current &&\n      this.classRef.current.value &&\n      this.batchRef.current.value &&\n      this.teacherRef.current &&\n      this.teacherRef.current.value\n    ) {\n      this.setState({ showEmpty: false });\n      this.getTeacherExams();\n    } else if (\n      this.classRef.current &&\n      this.classRef.current.value &&\n      this.batchRef.current.value\n    ) {\n      this.setState({ showEmpty: false });\n      this.getExamData();\n    } else {\n      this.setState({ showEmpty: true });\n    }\n  };\n\n  //When an exam list item is clicked\n  examListClickListener = (examId) => {\n    let examItem;\n\n    //Get exam data of the selected list item\n    for (let exam of this.state.examData) {\n      if (exam._id === examId) {\n        examItem = exam;\n      }\n    }\n\n    //Checking previous or scheduled exam\n    let examDate = new Date(`${examItem.date},${examItem.to}`);\n    let currentTime = new Date();\n\n    if (currentTime.getTime() > examDate.getTime()) {\n      this.openPreviousExam(examItem);\n    } else {\n      this.openEditExam(examItem);\n    }\n  };\n\n  //Open edit exam page\n  openEditExam = (examData) => {\n    let newState = { editExam: examData };\n\n    //If Exam editing is not permitted\n    if (this.teacherRef.current && this.teacherRef.current.value) {\n      //HOD or MENTOR data exam is currently selected\n      newState.restrictedExam = true;\n    } else {\n      newState.restrictedExam = false;\n    }\n\n    this.setState(newState, () => {\n      this.props.history.push(\"/teacher/previewexam\");\n    });\n  };\n\n  //Get the data of other teachers in case of MENTOR or HOD user\n  getTeacherData = () => {\n    if (this.userRole == \"hod\") {\n      http(\"GET\", \"/teacher/hod\", {}, (res) => {\n        if (res.status == 200)\n          this.setState({ teacherData: res.data }, () => {\n            this.setUpTeacherSelect();\n          });\n        else alert(\"Teachers data not found\");\n      });\n    } else if (this.userRole == \"mentor\") {\n      http(\"GET\", \"/teacher/mentor\", {}, (res) => {\n        if (res.status == 200)\n          this.setState({ teacherData: res.data }, () => {\n            this.setUpTeacherSelect();\n          });\n        else alert(\"Teachers data not found\");\n      });\n    }\n  };\n\n  //Return the JSX for <option> for teacher select in Case of HOD or MENTOR user\n  getTeacherOptions = () => {\n    return Object.keys(this.state.teacherData).map((key, array) => {\n      if (this.props.user.user._id != key)\n        return (\n          <option key={Date.now() + key} value={key}>\n            {this.state.teacherData[key].name}\n          </option>\n        );\n      else return null;\n    });\n  };\n\n  //Teacher select change listener\n  getTeacherExams = () => {\n    let teacher = this.teacherRef.current.value;\n    let Class = this.classRef.current.value;\n    let batch = this.batchRef.current.value;\n\n    if (teacher && Class && batch) {\n      http(\n        \"POST\",\n        \"/teacher/getexams/hod\",\n        { Class, batch, teacher },\n        (res) => {\n          if (res.status == 200) {\n            this.setState({ examData: res.data }, () => {\n              this.setExamData();\n            });\n          }\n        }\n      );\n    }\n  };\n\n  //Check HOD or MENTOR\n  checkUserRole = () => {\n    if (this.props.hod) this.userRole = \"hod\";\n    else if (this.props.mentor) this.userRole = \"mentor\";\n  };\n\n  //Setup HOD or MENTOR TEacher select\n  setUpTeacherSelect = () => {\n    //Checking HOD or MENTOR priveillege of thee user\n    let hodOrMentor = null;\n\n    if (this.props.hod) {\n      hodOrMentor = (\n        <div className=\"col-sm-2\" id=\"teacher-select\">\n          <select\n            className=\"form-select mt-3\"\n            name=\"teacher\"\n            id=\"teacher\"\n            onChange={this.checkClassSelected}\n            ref={this.teacherRef}\n          >\n            <option value=\"\">--TEACHER--</option>\n            {this.getTeacherOptions()}\n          </select>\n        </div>\n      );\n    } else if (this.props.mentor) {\n      hodOrMentor = (\n        <div className=\"col-sm-2\" id=\"teacher-select\">\n          <select\n            className=\"form-select mt-3\"\n            name=\"teacher\"\n            id=\"teacher\"\n            ref={this.teacherRef}\n            onChange={this.checkClassSelected}\n            disabled={this.state.teacherSelectDisabled}\n          >\n            <option value=\"\">--TEACHER--</option>\n            {this.getTeacherOptions()}\n          </select>\n        </div>\n      );\n    }\n\n    this.setState({ teacherSelect: hodOrMentor });\n  };\n\n  //When an previos exam is clicked\n  openPreviousExam = (exam) => {\n    this.setState({ selectedExam: exam }, () => {\n      this.props.history.push(\"/teacher/previousexam\");\n    });\n  };\n\n  componentDidMount() {\n    this.getTeacherData();\n    this.checkClassSelected();\n    this.getClasses();\n\n    console.log(this.props);\n  }\n\n  render() {\n    this.checkUserRole();\n    return (\n      <div>\n        <Route path=\"/teacher\" exact>\n          <NavBar>\n            {{\n              left: (\n                <h5 id=\"profileText\" onClick={this.openProfile}>\n                  <FaUserCircle className=\"mr-3 ml-3\" size={40} />\n                  {this.props.user.user.name}\n                </h5>\n              ),\n              right: (\n                <div className=\"container\" id=\"NavBarRight\">\n                  <div className=\"row\">\n                    <div\n                      className=\"col-sm-4 align-self-center\"\n                      id=\"NavBarInfoText\"\n                    >\n                      <p>Select Class and Batch : </p>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <select\n                        className=\"form-select mt-3\"\n                        name=\"class\"\n                        ref={this.classRef}\n                        id=\"class\"\n                        onChange={this.classChanged}\n                      >\n                        <option value=\"\">--CLASS--</option>\n                        {this.state.classOptions}\n                      </select>\n                    </div>\n                    <div className=\"col-sm-3\">\n                      <select\n                        className=\"form-select mt-3\"\n                        name=\"batch\"\n                        ref={this.batchRef}\n                        id=\"batch\"\n                        onChange={this.batchChanged}\n                      >\n                        <option value=\"\">--BATCH--</option>\n                        {this.state.batchOptions}\n                      </select>\n                    </div>\n\n                    {this.state.teacherSelect}\n                  </div>\n                </div>\n              ),\n            }}\n          </NavBar>\n          {/* Check if the BATCH and Class are selected or not */}\n          {this.state.showEmpty ||\n          this.batchRef.current == null ||\n          this.batchRef.current.value == null ? (\n            <div\n              id=\"emptyScreen\"\n              className=\"d-flex align-items-center justify-content-center\"\n            >\n              <h4>PLEASE SELECT A CLASS AND BATCH</h4>\n            </div>\n          ) : (\n            <>\n              <TabView>\n                {{\n                  leftTab: <span>SCHEDULED EXAMS</span>,\n                  rightTab: <span>PREVIOUS EXAMS</span>,\n                  leftTabBody: (\n                    <div id=\"leftTabBody\">{this.state.examList}</div>\n                  ),\n                  rightTabBody: (\n                    <div id=\"rightTabBody\">{this.state.previousExamList}</div>\n                  ),\n                }}\n              </TabView>\n            </>\n          )}\n          <div id=\"new-exam\" onClick={this.newExam}>\n            <div id=\"floatButtonText\">+</div>\n          </div>\n        </Route>\n        <Route path=\"/teacher/newexam\">\n          <NewExam />\n        </Route>\n        <Route path=\"/teacher/previousexam\">\n          <PreviousExam exam={this.state.selectedExam} />\n        </Route>\n        <Route path=\"/teacher/previewexam\">\n          {this.state.editExam ? (\n            <QuestionPaperPreview\n              exam={this.state.editExam}\n              Class={this.classRef.current ? this.classRef.current.value : null}\n              batch={this.classRef.current ? this.batchRef.current.value : null}\n              restricted={this.state.restrictedExam}\n            />\n          ) : null}\n        </Route>\n        <Route path=\"/teacher/profile\">\n          <TeacherProfile user={this.props.user} />\n        </Route>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Teacher);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/store/reducers/adminReducer.js",["311"],"export const adminReducer = (state = {}, action) => {\n  switch (action.type) {\n    case \"storeMessage\":\n      return {\n        ...state,\n        message: action.payload,\n      };\n      break;\n    default:\n      return state;\n  }\n};\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/AdminLogin/AdminLogin.js",["312","313","314"],"import React, { Component } from \"react\";\nimport \"./AdminLogin.css\";\nimport http from \"../../../shared/http\";\n\nclass AdminLogin extends Component {\n  //Creating ref for the input fields\n  username = React.createRef();\n  password = React.createRef();\n\n  //Login button Click listener\n  login = (e) => {\n    e.preventDefault();\n\n    //Getting form values\n    let username = this.username.current.value;\n    let password = this.password.current.value;\n\n    if (password != \"\" && username != \"\") {\n      http(\n        \"POST\",\n        \"/login/admin\",\n        { username, password, adminLogin: true },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Login Success\");\n            //Refresh the page\n            window.location.href = \"http://localhost:3000/admin/home\";\n          } else {\n            alert(res.data);\n          }\n        }\n      );\n    } else {\n      alert(\"Please fill all data\");\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <div\n          className=\"container col-md-3 mt-5 p-3\"\n          style={{\n            backgroundColor: \"white\",\n            border: \"2px solid grey\",\n            borderRadius: \"10px\",\n          }}\n        >\n          <form>\n            <div class=\"form-group\">\n              <h4>ADMIN LOGIN</h4>\n              <label for=\"username\">Username</label>\n              <input\n                ref={this.username}\n                type=\"email\"\n                class=\"form-control\"\n                id=\"username\"\n                placeholder=\"Enter username\"\n              />\n            </div>\n            <div class=\"form-group\">\n              <label for=\"password\">Password</label>\n              <input\n                ref={this.password}\n                type=\"password\"\n                class=\"form-control\"\n                id=\"password\"\n                placeholder=\"Password\"\n              />\n            </div>\n            <button type=\"submit\" class=\" btn-success\" onClick={this.login}>\n              LOGIN\n            </button>\n          </form>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default AdminLogin;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/shared/dailogBox.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/TabView/TabView.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/shared/http.js",["315"],"import axios from \"axios\";\nimport { serverDomain } from \"../config\";\nimport parseCookie from \"./parseCookie\";\n\nlet http = (\n  method = \"GET\",\n  url = \"/\",\n  body = null,\n  callback = null,\n  errorCallback = null\n) => {\n  //Variable for storing response from server\n  let responseFromServer;\n\n  if (method == \"POST\") {\n    body = { ...body, cookies: parseCookie() };\n  }\n\n  axios({\n    method: method,\n    url: serverDomain + url,\n    data: body,\n    withCredentials: true,\n  })\n    .then((response) => {\n      console.log(`${method} request send to ${serverDomain + url}`);\n      console.log(\"Response from server: \", response);\n      responseFromServer = response;\n\n      if (callback) callback(response);\n    })\n    .catch((err) => {\n      alert(\"Error occured during http request. \\n Check console for log data\");\n      console.log(err);\n      if (errorCallback) errorCallback(err);\n    });\n\n  return responseFromServer;\n};\n\nexport default http;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/ListItem/ListItem.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/navBar/NavBar.js",["316","317","318"],"import { Component } from \"react\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport \"./NavBar.css\";\n\nclass NavBar extends Component {\n  render() {\n    return (\n      <div id=\"navBar\">\n        <div\n          className=\"d-flex flex-row justify-content-between align-items-center\"\n          id=\"navBarContainer\"\n        >\n          <div id=\"left\">{this.props.children.left}</div>\n          <div id=\"center\">{this.props.children.center}</div>\n          <div id=\"right\">{this.props.children.right}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/components/StudentProfile/StudentProfile.js",["319","320","321","322"],"import React, { Component } from \"react\";\nimport NavBar from \"../../../ui-elements/navBar/NavBar\";\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\nimport http from \"../../../../shared/http\";\nimport \"./StudentProfile.css\";\nimport configuireDialogBox from \"../../../../shared/dailogBox\";\n\nexport class StudentProfile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { otpDisabled: true };\n  }\n\n  //Creating necessary reference object\n  newEmailRef = React.createRef();\n  otpRef = React.createRef();\n  passwordRef = React.createRef();\n  confirmRef = React.createRef();\n\n  //Logout user\n  logout = () => {\n    http(\"GET\", \"/login/logout\", {}, (res) => {\n      alert(res.data);\n      if (res.status == 200) {\n        window.location.href = \"http://localhost:3000/\";\n      }\n    });\n  };\n\n  //email validation\n  validateEmail = (email) => {\n    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  //Save changes to user account\n  saveUserAccount = () => {\n    let password = this.passwordRef.current.value;\n    let confirm = this.confirmRef.current.value;\n\n    if (password) {\n      if (password == confirm) {\n        http(\"POST\", \"/student/profile/save\", { password }, (res) => {\n          alert(res.data);\n        });\n      } else {\n        alert(\"Passwords does not match\");\n      }\n    } else {\n      alert(\"Enter new Password!\");\n    }\n  };\n\n  //When click GET OTP button in change email modal\n  getOtpClickListener = () => {\n    let newEmail = this.newEmailRef.current.value;\n\n    if (newEmail && this.validateEmail(newEmail)) {\n      http(\n        \"POST\",\n        \"/register/changeemail/sendotp\",\n        { email: newEmail },\n        (res) => {\n          alert(res.data);\n          if (res.status == 200) {\n            this.otpSentSuccess();\n          }\n        }\n      );\n    } else {\n      alert(\"New Email is not valid\");\n    }\n  };\n\n  //Called when OTP is send successfully\n  otpSentSuccess = () => {\n    this.setState({ otpDisabled: false });\n  };\n\n  //Reset the modal to change email\n  resetModal = () => {\n    this.newEmailRef.current.value = \"\";\n\n    this.setState({ otpDisabled: true });\n  };\n\n  //Verify the OTP\n  verifyOtp = () => {\n    let otp = this.otpRef.current.value;\n    let email = this.newEmailRef.current.value;\n\n    if (otp) {\n      http(\"POST\", \"/register/changeemail/verify\", { otp, email }, (res) => {\n        alert(res.data);\n\n        if (res.status == 200) {\n          window.$(\"#change-email\").modal(\"toggle\");\n        }\n      });\n    } else {\n      alert(\"Please enter OTP\");\n    }\n  };\n\n  componentDidMount() {}\n\n  render() {\n    return (\n      <div>\n        {/* Configure the change email modal */}\n        {configuireDialogBox(\n          \"change-email\",\n          \"Change Email\",\n          <>\n            <div>\n              Email:\n              <br />\n              <input\n                type=\"text\"\n                name=\"new-email\"\n                placeholder=\"New Email\"\n                id=\"new-email\"\n                ref={this.newEmailRef}\n                disabled={!this.state.otpDisabled}\n              ></input>\n              <br />\n              <div className=\"text-right\">\n                <input\n                  type=\"button\"\n                  className=\"btn btn-primary mt-3\"\n                  value=\"GET OTP\"\n                  onClick={this.getOtpClickListener}\n                />\n              </div>\n              OTP:\n              <input\n                type=\"text\"\n                placeholder=\"Enter OTP\"\n                name=\"otp\"\n                id=\"otp\"\n                disabled={this.state.otpDisabled}\n                ref={this.otpRef}\n              />\n            </div>\n          </>,\n          <>\n            <input\n              type=\"button\"\n              className=\"btn btn-primary\"\n              value=\"VERIFY\"\n              disabled={this.state.otpDisabled}\n              onClick={this.verifyOtp}\n            />\n          </>\n        )}\n        <NavBar>\n          {{\n            left: (\n              <h5>\n                <Button\n                  variant=\"primary\"\n                  className=\"btn btn-primary mr-3\"\n                  size=\"sm\"\n                  onClick={() => {\n                    window.history.back();\n                  }}\n                >\n                  {\"<\"}\n                </Button>\n                {this.props.user.name}\n              </h5>\n            ),\n            right: (\n              <h5>\n                <Button\n                  variant=\"danger\"\n                  className=\"btn bg-danger\"\n                  size=\"md\"\n                  onClick={this.logout}\n                >\n                  LOGOUT\n                </Button>\n              </h5>\n            ),\n          }}\n        </NavBar>\n        <div\n          id=\"studentProfileBody\"\n          className=\"d-flex align-items-center justify-content-center\"\n        >\n          {/* <img src=\"...\" alt=\"...\" class=\"rounded-circle mt-5\"></img> */}\n\n          <Form className=\"col-sm-6\">\n            <center className=\"mb-3\">\n              <h5>ACCOUNT DETAILS</h5>\n            </center>\n            <Form.Group as={Row}>\n              <Form.Label column sm=\"4\">\n                Email\n              </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"text\"\n                  disabled\n                  value={this.props.user.email}\n                />\n              </Col>\n            </Form.Group>\n            <div className=\"text-right\">\n              <input\n                type=\"button\"\n                value=\"CHANGE EMAIL\"\n                className=\"btn btn-primary mb-2\"\n                data-toggle=\"modal\"\n                data-target=\"#change-email\"\n                onClick={this.resetModal}\n              />\n            </div>\n            <Form.Group as={Row}>\n              <Form.Label column sm=\"4\">\n                Admission Number\n              </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"text\"\n                  value={this.props.user.registerNumber}\n                  disabled\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm=\"4\">\n                Class\n              </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control type=\"text\" value={this.props.Class} disabled />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm=\"4\">\n                Batch\n              </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control type=\"text\" value={this.props.batch} disabled />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm=\"4\">\n                Department\n              </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"text\"\n                  value={this.props.department}\n                  disabled\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm=\"4\">\n                Parent's Email\n              </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"text\"\n                  value={this.props.user.parentEmail}\n                  disabled\n                />\n              </Col>\n            </Form.Group>\n            <center className=\"mb-3\">\n              <h5>CHANGE PASSWORD</h5>\n            </center>\n            <Form.Group as={Row}>\n              <Form.Label column sm=\"4\">\n                New Password\n              </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  ref={this.passwordRef}\n                />\n              </Col>\n            </Form.Group>\n            <Form.Group as={Row}>\n              <Form.Label column sm=\"4\">\n                Confirm Password\n              </Form.Label>\n              <Col sm=\"8\">\n                <Form.Control\n                  type=\"password\"\n                  ref={this.confirmRef}\n                  placeholder=\"Confirm\"\n                />\n              </Col>\n            </Form.Group>\n            <p className=\"ml-2 text-right\">\n              <Button\n                className=\"ml-7\"\n                variant=\"primary\"\n                onClick={this.saveUserAccount}\n              >\n                SAVE PASSWORD\n              </Button>\n            </p>\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StudentProfile;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/components/examguidelines/ExamGuidlines.js",["323"],"import React, { Component } from \"react\";\nimport NavBar from \"../../../ui-elements/navBar/NavBar\";\nimport { Button } from \"react-bootstrap\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./examguidliness.css\";\nimport http from \"../../../../shared/http\";\n\nclass ExamGuidlines extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n  }\n\n  //Check if all props are correclty available\n  checkProps = () => {\n    if (!this.props.exam) {\n      alert(\"Reloading the page will return you to the homepage\");\n      this.props.history.push(\"/student\");\n    }\n  };\n\n  //Prevent user page refresh\n  preventPageRefresh = () => {\n    window.onbeforeunload = function () {\n      alert(\"Reloading the page will return you to the homepage\");\n\n      return \"Reloading the page will stop the current examination. Are you sure ?\";\n    };\n  };\n\n  //When clicking the start exam button\n  startExam = () => {\n    if (\n      window.confirm(\n        \"Are you sure to start the examination? \\n(Make sure you have a webcam connected to your device)\"\n      )\n    ) {\n      //Check if the student already finished the exam\n      this.checkCompleted();\n    }\n  };\n\n  //Check if exam completed\n  checkCompleted = () => {\n    http(\n      \"POST\",\n      \"/student/checkcompleted\",\n      { exam: this.props.exam._id },\n      (res) => {\n        if (res.status == 200) {\n          this.props.history.push(\"/student/exam/checkcamera\");\n        } else {\n          alert(\"You already completed this exam!\");\n        }\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.preventPageRefresh();\n    console.log(this.props);\n  }\n\n  render() {\n    //Check if all props available\n    this.checkProps();\n\n    return (\n      <>\n        <NavBar>\n          {{\n            left: (\n              <h5>\n                <div id=\"navBarTitleContainer\">\n                  <Button\n                    variant=\"primary\"\n                    className=\"btn btn-primary mr-3\"\n                    size=\"sm\"\n                    onClick={() => {\n                      window.history.back();\n                    }}\n                  >\n                    {\"<\"}\n                  </Button>\n                  EXAM GUIDELINES\n                </div>\n              </h5>\n            ),\n          }}\n        </NavBar>\n        <div id=\"examguidelines\">\n          <div className=\"col-sm-8 offset-sm-2\" id=\"guidlinesContainer\">\n            <h3 className=\"text-center ml-4\">EXAM GUIDELINES</h3>\n            <br />\n            <div>\n              <h6>\n                EXAM NAME: {this.props.exam ? this.props.exam.examName : null}\n                <br />\n                SUBJECT: {this.props.exam ? this.props.exam.subject : null}\n              </h6>\n            </div>\n            <ul className=\"mt-3\">\n              <li className=\"mt-3\">\n                Participants must have an active internet connction throughout\n                the exam\n              </li>\n              <li className=\"mt-3\">\n                You must allow the permission to access camera and microphone\n              </li>\n              <li className=\"mt-3\">\n                Participants are under the survillance. Any kind of malpractice\n                detected by the system will lead to disqualification of your\n                exam\n              </li>\n              <li className=\"mt-3\">\n                Participants must stay in the examination window till the exam\n                is finished.\n              </li>\n              <li className=\"mt-3\">\n                Participants must be seated in a good lighting condition\n              </li>\n              <li className=\"mt-3\">\n                Participants must NOT use any kind of communication devices\n                during examination.\n              </li>\n              <li className=\"mt-3\">\n                <b>Do NOT refresh the page during the examination</b>\n              </li>\n            </ul>\n          </div>\n          <div className=\"text-right mr-3\">\n            <Button\n              className=\"text-right\"\n              variant=\"success\"\n              onClick={this.startExam}\n            >\n              START EXAM\n            </Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default withRouter(ExamGuidlines);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/student/components/startexam/StartExam.js",["324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339"],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/shared/parseCookie.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/config.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/verifyOtp/verifyOtp.js",["340","341","342","343"],"import { Component } from \"react\";\nimport \"./verifyOtp.css\";\n\nimport http from \"../../../shared/http\";\nclass VerifyOtp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: {},\n      seconds: 60 * 5,\n      resendEnable: false,\n      otp: \"\",\n      otpError: null,\n    };\n    this.timer = 0;\n    this.startTimer = this.startTimer.bind(this);\n    this.countDown = this.countDown.bind(this);\n  }\n\n  secondsToTime(secs) {\n    let hours = Math.floor(secs / (60 * 60));\n\n    let divisor_for_minutes = secs % (60 * 60);\n    let minutes = Math.floor(divisor_for_minutes / 60);\n\n    let divisor_for_seconds = divisor_for_minutes % 60;\n    let seconds = Math.ceil(divisor_for_seconds);\n\n    let obj = {\n      h: hours,\n      m: minutes,\n      s: seconds,\n    };\n    return obj;\n  }\n\n  componentDidMount() {\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\n    this.setState({ time: timeLeftVar });\n  }\n\n  startTimer() {\n    if (this.timer == 0 && this.state.seconds > 0) {\n      this.timer = setInterval(this.countDown, 1000);\n    }\n  }\n\n  countDown() {\n    // Remove one second, set state so a re-render happens.\n    let seconds = this.state.seconds - 1;\n    this.setState({\n      time: this.secondsToTime(seconds),\n      seconds: seconds,\n    });\n\n    // Check if we're at zero.\n    if (seconds == 0) {\n      clearInterval(this.timer);\n      this.setState({ resendEnable: true });\n    }\n  }\n\n  resendOtp = () => {\n    http(\"POST\", \"/register/resendotp\", {}, (res) => {\n      if (res.status == 200) {\n        console.log(\"OTP resend\");\n      } else {\n        alert(\n          `Error ${res.status} during otp resend\\nError message logged in console.`\n        );\n        console.log(res);\n      }\n    });\n  };\n\n  showAlert = () => {};\n\n  proceed = () => {\n    if (this.state.otp.length > 0) {\n      this.setState({ otpError: null });\n\n      http(\n        \"POST\",\n        \"/register/otp\",\n        {\n          otp: this.state.otp,\n        },\n        (res) => {\n          console.log(\"OTP Sent to server\");\n          if (res.status == 203) {\n            console.log(res.data);\n            alert(\"OTP Not verified: \" + res.data);\n          } else {\n            console.log(\"OTP verification Success\");\n            this.props.otpVerified();\n          }\n        }\n      );\n    } else {\n      this.setState({ otpError: <p>Please enter OTP</p> });\n    }\n  };\n\n  otpChange = (event) => {\n    if (this.state.otp.length > 0) {\n      this.setState({ otpError: null });\n    }\n    this.setState({ otp: event.target.value });\n  };\n\n  render() {\n    this.startTimer();\n\n    return (\n      <form>\n        <center>\n          <p id=\"info-text\">An OTP has been sent to your email</p>\n        </center>\n        <div className=\"form-group\">\n          <label for=\"otp\">Enter OTP</label>\n          <br />\n          <input\n            type=\"text\"\n            name=\"otp\"\n            id=\"otp\"\n            placeholder=\"OTP\"\n            className=\"form-control mt-3\"\n            value={this.state.otp}\n            onChange={this.otpChange}\n          />\n          {this.state.otpError}\n          <p>\n            Resend OTP: {this.state.time.m}:{this.state.time.s}\n          </p>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-secondary\"\n            id=\"resend-otp\"\n            disabled={!this.state.resendEnable}\n            onClick={this.resendOtp}\n          >\n            RESEND OTP\n          </button>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            id=\"proceed\"\n            onClick={this.proceed}\n          >\n            PROCEED\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default VerifyOtp;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/signin/signin.js",["344","345","346","347"],"/**\n * CONTENT OF THE SIGNIN TAB\n */\n\nimport { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./signin.css\";\n\nimport http from \"../../../shared/http\";\nimport configureDialogBox from \"../../../shared/dailogBox\";\n\nclass Signin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\", //USERNAME entered in the login form\n      password: \"\", //PASSWORD entered in the login form\n      erroMessage: null, //Error messsage if any (These are displayed bottom side of the login form)\n      reportEmail: \"\", //Email id of the user (REPORT form)\n      reportContent: \"\", //Content of the report (REPORT from)\n      reportError: null,\n    };\n  }\n\n  showPassword = () => {\n    let password = document.getElementById(\"password\");\n\n    if (password.type == \"password\") {\n      password.type = \"text\";\n    } else {\n      password.type = \"password\";\n    }\n  };\n\n  //Setting form data into the component state\n  inputChange = (event) => {\n    let newState = {};\n    newState[event.target.name] = event.target.value;\n\n    this.setState(newState);\n  };\n\n  /**\n   * When LOGIN button clicked\n   */\n\n  login = () => {\n    if (this.state.username.length > 0 && this.state.password.length > 0) {\n      this.setState({ erroMessage: null });\n      http(\n        \"POST\",\n        \"/login\",\n        { username: this.state.username, password: this.state.password },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Login Successful\");\n\n            if (res.data.accountType === \"teacher\") {\n              document.location.href = \"http://localhost:3000/teacher\";\n            } else if (res.data.accountType === \"student\") {\n              document.location.href = \"http://localhost:3000/student\";\n            }\n          } else {\n            this.setState({\n              erroMessage: <p>{res.data}</p>,\n            });\n          }\n        }\n      );\n    } else {\n      this.setState({ erroMessage: <p>Please fill all fields</p> });\n    }\n  };\n\n  // When googleSignin button clicked\n  googleSignin = () => {\n    document.location.href = \"http://localhost:4000/register/google\";\n  };\n\n  //Validate Email ID\n  validateEmail = (email) => {\n    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  reportFormChange = (e) => {\n    let newState = {};\n\n    newState[e.target.name] = e.target.value;\n    this.setState(newState);\n\n    this.validateReportForm();\n  };\n\n  validateReportForm = () => {\n    if (this.validateEmail(this.state.reportEmail)) {\n      if (this.state.reportContent === \"\") {\n        this.setState({ reportError: \"Content is empty\" });\n        return false;\n      } else {\n        this.setState({ reportError: null });\n        return true;\n      }\n    } else {\n      this.setState({ reportError: \"Email not valid\" });\n      return false;\n    }\n  };\n\n  //When clicking Send in report form\n  sendReport = (e) => {\n    e.preventDefault();\n    if (this.validateReportForm()) {\n      http(\n        \"POST\",\n        \"/login/report\",\n        {\n          email: this.state.reportEmail,\n          message: this.state.reportContent,\n        },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Report sent successfully\");\n          } else {\n            alert(res.data);\n          }\n        }\n      );\n    }\n  };\n\n  render() {\n    return (\n      <form>\n        {/* Configuring The reportModal */}\n        {configureDialogBox(\n          \"reportModal\",\n          \"Report an Issue\",\n          <>\n            <form>\n              <label className=\"black\" for=\"email\">\n                Enter your email:{\" \"}\n              </label>\n              <input\n                onChange={this.reportFormChange}\n                type=\"email\"\n                name=\"reportEmail\"\n                id=\"email\"\n                className=\"m-3\"\n                value={this.state.reportEmail}\n              ></input>\n              <br />\n\n              <label className=\"black\" for=\"content\">\n                Enter content:{\" \"}\n              </label>\n              <textarea\n                onChange={this.reportFormChange}\n                rows=\"10\"\n                name=\"reportContent\"\n                id=\"content\"\n                className=\"m-3\"\n              ></textarea>\n            </form>\n            {this.state.reportError ? <p>{this.state.reportError}</p> : null}\n          </>,\n          <>\n            <button className=\"btn btn-primary\" onClick={this.sendReport}>\n              Send\n            </button>\n          </>\n        )}\n\n        <div className=\"form-group\">\n          <label for=\"username\">Username</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"username\"\n            name=\"username\"\n            value={this.state.username}\n            onChange={this.inputChange}\n            placeholder=\"Username\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <label for=\"password\">Password</label>\n          <input\n            type=\"password\"\n            class=\"form-control\"\n            id=\"password\"\n            name=\"password\"\n            value={this.state.password}\n            onChange={this.inputChange}\n            placeholder=\"Password\"\n          />\n        </div>\n        {this.state.erroMessage}\n        <div className=\"form-check\">\n          <input\n            type=\"checkbox\"\n            className=\"form-check-input\"\n            id=\"showPassword\"\n            name=\"showPassword\"\n            onClick={this.showPassword}\n          />\n          <label className=\"form-check-label\" for=\"showPassword\">\n            Show Password\n          </label>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            id=\"login-btn\"\n            onClick={this.login}\n          >\n            LOGIN\n          </button>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            id=\"google-login-btn\"\n            onClick={this.googleSignin}\n          >\n            SIGN IN WITH GOOGLE\n          </button>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <p style={{ \"margin-top\": \"8px\", color: \"white\" }}>\n            Need help?{\" \"}\n            <a\n              href=\"#\"\n              data-toggle=\"modal\"\n              data-target=\"#reportModal\"\n              style={{ color: \"white\" }}\n            >\n              Report\n            </a>\n          </p>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(Signin);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/setPassword/SetPassword.js",["348","349"],"import { Component } from \"react\";\nimport \"./SetPassword.css\";\n\nimport http from \"../../../shared/http\";\nclass SetPassword extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: \"\",\n      confirm: \"\",\n      errorMessage: null,\n    };\n  }\n\n  validatePassword = () => {\n    if (this.state.password.length > 0 && this.state.confirm.length > 0) {\n      if (this.state.password === this.state.confirm) {\n        console.log(\"Password Validation Success\");\n        this.setState({ errorMessage: null });\n\n        http(\n          \"POST\",\n          \"/register/finish\",\n          { password: this.state.password },\n          (res) => {\n            if (res.status === 200) {\n              alert(\"Signup Completed\");\n              window.location.href = \"http://localhost:3000/signin\";\n            } else {\n              alert(\"Error: \" + res.data);\n            }\n          }\n        );\n      } else {\n        this.setState({ errorMessage: <p>Passwords do not match</p> });\n      }\n    } else {\n      this.setState({ errorMessage: \"No password entered\" });\n    }\n  };\n\n  onValueChange = (event) => {\n    let newSate = {};\n    newSate[event.target.name] = event.target.value;\n    this.setState(newSate);\n  };\n\n  showPassword = () => {\n    let password = document.getElementById(\"password\");\n    let confirm = document.getElementById(\"confirm\");\n\n    if (password.type == \"password\" && confirm.type == \"password\") {\n      password.type = \"text\";\n      confirm.type = \"text\";\n    } else {\n      password.type = \"password\";\n      confirm.type = \"password\";\n    }\n  };\n\n  render() {\n    return (\n      <form>\n        <center>\n          <p id=\"info-text\">Setup a new Password</p>\n        </center>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            name=\"password\"\n            id=\"password\"\n            value={this.state.password}\n            onChange={this.onValueChange}\n            placeholder=\"Password\"\n            className=\"form-control mt-3\"\n          />\n          <input\n            type=\"password\"\n            name=\"confirm\"\n            id=\"confirm\"\n            value={this.state.confirm}\n            onChange={this.onValueChange}\n            placeholder=\"Confirm Password\"\n            className=\"form-control mt-3\"\n          />\n          {this.state.errorMessage}\n          <br />\n          <div className=\"form-check\">\n            <input\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id=\"showPassword\"\n              name=\"showPassword\"\n              onClick={this.showPassword}\n            />\n            <label className=\"form-check-label\" for=\"showPassword\">\n              Show Password\n            </label>\n          </div>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            id=\"finish\"\n            onClick={this.validatePassword}\n          >\n            FINISH\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default SetPassword;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/TeacherProfile/TeacherProfile.js",["350","351","352","353"],"import React, { Component } from \"react\";\nimport NavBar from \"../../ui-elements/navBar/NavBar\";\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\nimport http from \"../../../shared/http\";\nimport configureDialogBox from \"../../../shared/dailogBox\";\nimport $ from \"jquery\";\n\nimport \"./TeacherProfile.css\";\nimport { Route, withRouter } from \"react-router-dom\";\nimport VerifyStudent from \"./VerifyStudent\";\n\nclass TeacherProfile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      otpDisabled: true,\n    };\n  }\n\n  //Creating required refs\n  emailRef = React.createRef();\n  passwordRef = React.createRef();\n  confirmRef = React.createRef();\n  newEmailRef = React.createRef();\n  otpRef = React.createRef();\n\n  //Set initial Value of the form\n  setFormaData = () => {\n    $(this.emailRef.current).attr(\"value\", this.props.user.user.email);\n  };\n\n  //Logout user\n  logout = () => {\n    http(\"GET\", \"/login/logout\", {}, (res) => {\n      alert(res.data);\n      if (res.status == 200) {\n        window.location.href = \"http://localhost:3000/\";\n      }\n    });\n  };\n\n  //email validation\n  validateEmail = (email) => {\n    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  //Save changes to user account\n  saveUserAccount = () => {\n    let password = this.passwordRef.current.value;\n    let confirm = this.confirmRef.current.value;\n\n    if (password) {\n      if (password == confirm) {\n        http(\"POST\", \"/teacher/profile/save\", { password }, (res) => {\n          alert(res.data);\n        });\n      } else {\n        alert(\"Passwords does not match\");\n      }\n    } else {\n      alert(\"Enter new Password!\");\n    }\n  };\n\n  //When click GET OTP button in change email modal\n  getOtpClickListener = () => {\n    let newEmail = this.newEmailRef.current.value;\n\n    if (newEmail && this.validateEmail(newEmail)) {\n      http(\n        \"POST\",\n        \"/register/changeemail/sendotp\",\n        { email: newEmail },\n        (res) => {\n          alert(res.data);\n          if (res.status == 200) {\n            this.otpSentSuccess();\n          }\n        }\n      );\n    } else {\n      alert(\"New Email is not valid\");\n    }\n  };\n\n  //Called when OTP is send successfully\n  otpSentSuccess = () => {\n    this.setState({ otpDisabled: false });\n  };\n\n  //Reset the modal to change email\n  resetModal = () => {\n    this.newEmailRef.current.value = \"\";\n\n    this.setState({ otpDisabled: true });\n  };\n\n  //Verify the OTP\n  verifyOtp = () => {\n    let otp = this.otpRef.current.value;\n    let email = this.newEmailRef.current.value;\n\n    if (otp) {\n      http(\"POST\", \"/register/changeemail/verify\", { otp, email }, (res) => {\n        alert(res.data);\n\n        if (res.status == 200) {\n          window.$(\"#change-email\").modal(\"toggle\");\n        }\n      });\n    } else {\n      alert(\"Please enter OTP\");\n    }\n  };\n\n  //Verify Students button click listener\n  verifyStudents = () => {\n    this.props.history.push(\"/teacher/profile/verifystudents\");\n  };\n\n  componentDidMount() {\n    this.setFormaData();\n  }\n\n  render() {\n    return (\n      <>\n        <Route path=\"/teacher/profile/verifystudents\">\n          <VerifyStudent />\n        </Route>\n        <Route path=\"/teacher/profile\" exact>\n          <div>\n            {/* Configure the change email modal */}\n            {configureDialogBox(\n              \"change-email\",\n              \"Change Email\",\n              <>\n                <div>\n                  Email:\n                  <br />\n                  <input\n                    type=\"text\"\n                    name=\"new-email\"\n                    placeholder=\"New Email\"\n                    id=\"new-email\"\n                    ref={this.newEmailRef}\n                    disabled={!this.state.otpDisabled}\n                  ></input>\n                  <br />\n                  <div className=\"text-right\">\n                    <input\n                      type=\"button\"\n                      className=\"btn btn-primary mt-3\"\n                      value=\"GET OTP\"\n                      onClick={this.getOtpClickListener}\n                    />\n                  </div>\n                  OTP:\n                  <input\n                    type=\"text\"\n                    placeholder=\"Enter OTP\"\n                    name=\"otp\"\n                    id=\"otp\"\n                    disabled={this.state.otpDisabled}\n                    ref={this.otpRef}\n                  />\n                </div>\n              </>,\n              <>\n                <input\n                  type=\"button\"\n                  className=\"btn btn-primary\"\n                  value=\"VERIFY\"\n                  disabled={this.state.otpDisabled}\n                  onClick={this.verifyOtp}\n                />\n              </>\n            )}\n            <NavBar>\n              {{\n                left: (\n                  <h5>\n                    <Button\n                      variant=\"primary\"\n                      className=\"btn btn-primary mr-3\"\n                      size=\"sm\"\n                      onClick={() => {\n                        window.history.back();\n                      }}\n                    >\n                      {\"<\"}\n                    </Button>\n                    <span id=\"username\">{this.props.user.user.name}</span>\n                  </h5>\n                ),\n                right: (\n                  <h5>\n                    <Row className=\"mt-2\">\n                      {this.props.user.mentor ? (\n                        <Col>\n                          <Button\n                            variant=\"primary\"\n                            ClassName=\"btn bg-light\"\n                            size=\"sm\"\n                            onClick={this.verifyStudents}\n                          >\n                            VERIFY STUDENTS\n                          </Button>\n                        </Col>\n                      ) : null}\n                      <Col>\n                        {\" \"}\n                        <Button\n                          variant=\"danger\"\n                          className=\"btn bg-danger\"\n                          size=\"md\"\n                          onClick={this.logout}\n                        >\n                          LOGOUT\n                        </Button>\n                      </Col>\n                    </Row>\n                  </h5>\n                ),\n              }}\n            </NavBar>\n            <div\n              className=\"d-flex align-items-center justify-content-center\"\n              id=\"userProfileBody\"\n            >\n              {/* <img src=\"...\" alt=\"...\" class=\"rounded-circle mt-5\"></img> */}\n\n              <Form className=\"col-sm-4\" id=\"userProfileForm\">\n                <Form.Group as={Row} controlId=\"formPlaintextEmail\">\n                  <Form.Label column sm=\"12\">\n                    Email\n                  </Form.Label>\n                  <Col sm=\"10\">\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"Email\"\n                      disabled\n                      ref={this.emailRef}\n                    />\n                    <input\n                      type=\"button\"\n                      value=\"CHANGE\"\n                      className=\"btn btn-primary mt-3\"\n                      data-toggle=\"modal\"\n                      data-target=\"#change-email\"\n                      onClick={this.resetModal}\n                    />\n                  </Col>\n                </Form.Group>\n\n                <Form.Group as={Row} controlId=\"formPlaintextPassword\">\n                  <Form.Label column sm=\"12\">\n                    New Password\n                  </Form.Label>\n                  <Col sm=\"10\">\n                    <Form.Control\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      ref={this.passwordRef}\n                    />\n                  </Col>\n                </Form.Group>\n                <Form.Group as={Row} controlId=\"formPlaintextPassword\">\n                  <Form.Label column sm=\"12\">\n                    Confirm Password\n                  </Form.Label>\n                  <Col sm=\"10\">\n                    <Form.Control\n                      type=\"password\"\n                      placeholder=\"Password\"\n                      ref={this.confirmRef}\n                    />\n                  </Col>\n                </Form.Group>\n                <p className=\"ml-2 text-right\">\n                  <Button\n                    className=\"ml-7\"\n                    variant=\"primary\"\n                    onClick={this.saveUserAccount}\n                  >\n                    SAVE\n                  </Button>\n                </p>\n              </Form>\n            </div>\n          </div>\n        </Route>\n      </>\n    );\n  }\n}\n\nexport default withRouter(TeacherProfile);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/sigup/signup.js",["354","355"],"import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter } from \"react-router-dom\";\nimport \"./signup.css\";\n\nimport Student from \"./student/student\";\nimport Teacher from \"./teacher/teacher\";\n\nimport http from \"../../../shared/http\";\n\nconst mapStateToProps = (state) => {\n  return {\n    signupData: state.login.signupData,\n    validSignupData: state.login.validSignupData,\n  };\n};\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountType: \"student\",\n    };\n  }\n\n  selectAccountType = (event) => {\n    this.setState({ accountType: event.target.value });\n  };\n\n  verifyEmail = () => {\n    if (this.props.validSignupData) {\n      http(\"POST\", \"/register\", this.props.signupData, (res) => {\n        if (res.status === 200) {\n          this.props.otpSent();\n        } else {\n          alert(res.data);\n\n          //TEST DATA\n        }\n      });\n    }\n  };\n\n  googleSignup = () => {\n    document.location.href = \"http://localhost:4000/register/google\";\n  };\n\n  render() {\n    return (\n      <form>\n        <div className=\"form-group\">\n          <label for=\"account-type\">Select Account Type</label>\n          <br />\n          <select\n            className=\"form-select\"\n            aria-label=\"Default select example\"\n            id=\"account-type\"\n            onChange={this.selectAccountType}\n          >\n            <option value=\"student\" selected>\n              Student\n            </option>\n            <option value=\"teacher\">Teacher</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label>Enter your details</label>\n          {this.state.accountType == \"student\" ? <Student /> : null}\n          {this.state.accountType == \"teacher\" ? <Teacher /> : null}\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            id=\"login-btn\"\n            onClick={this.verifyEmail}\n            disabled={!this.props.validSignupData}\n          >\n            VERIFY EMAIL\n          </button>\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            id=\"google-login-btn\"\n            onClick={this.googleSignup}\n          >\n            SIGN UP WITH GOOGLE\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps)(Signup));\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/questionpaperpreview/QuestionpaperPreview.js",["356","357","358"],"import React, { Component } from \"react\";\nimport \"./QuestionPaperPreview.css\";\n\nimport NavBar from \"../../ui-elements/navBar/NavBar\";\nimport { BsPencil, BsDash } from \"react-icons/bs\";\nimport { Row, Col, Button } from \"react-bootstrap\";\nimport Question from \"../Question/Question\";\nimport { Route, withRouter, Switch } from \"react-router-dom\";\nimport NewExam from \"../newExam/NewExam\";\nimport http from \"../../../shared/http\";\n\nclass QuestionPaperPreview extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n\n    this.timeDuration = 0;\n  }\n\n  //Parse the questions to display it\n  parseQuestions = () => {\n    let questionNumber = 0;\n\n    return this.props.exam.questionPaper.map((question, index) => {\n      //Count the question Number\n      if (question.type != \"header\" && question.type != \"text\") {\n        questionNumber++;\n      }\n\n      return (\n        <Question\n          question={question}\n          index={questionNumber}\n          key={question.id}\n        />\n      );\n    });\n  };\n\n  //Convert milliseconds to time format string\n  msToTime = (s) => {\n    // Pad to 2 or 3 digits, default is 2\n    function pad(n, z) {\n      z = z || 2;\n      return (\"00\" + n).slice(-z);\n    }\n\n    var ms = s % 1000;\n    s = (s - ms) / 1000;\n    var secs = s % 60;\n    s = (s - secs) / 60;\n    var mins = s % 60;\n    var hrs = (s - mins) / 60;\n\n    return pad(hrs) + \":\" + pad(mins) + \":\" + pad(secs);\n  };\n\n  //Calculate time duration of the exam\n  calculateTimeDuration = () => {\n    let to = new Date(`${this.props.exam.date},${this.props.exam.to}`);\n    let from = new Date(`${this.props.exam.date},${this.props.exam.from}`);\n\n    let differenceInMilliSeconds = to.getTime() - from.getTime();\n\n    this.timeDuration = this.msToTime(differenceInMilliSeconds);\n  };\n\n  //Open edit exam page\n  openEditExam = () => {\n    console.log(this.props);\n    this.Class = this.props.Class;\n    this.batch = this.props.batch;\n\n    this.props.history.push(\"/teacher/previewexam/editexam\");\n  };\n\n  //Remove exam from server\n  removeExam = () => {\n    if (window.confirm(\"Are you sure to remove exam?\")) {\n      http(\n        \"POST\",\n        \"/teacher/removeexam\",\n        { id: this.props.exam._id },\n        (res) => {\n          alert(res.data);\n\n          if (res.status == 200) {\n            this.props.history.push(\"/teacher\");\n          }\n        }\n      );\n    }\n  };\n\n  render() {\n    //Calculate time duration of the exam\n    this.calculateTimeDuration();\n\n    return (\n      <>\n        <Switch>\n          <Route path=\"/teacher/previewexam/editexam\">\n            <NewExam\n              exam={this.props.exam}\n              Class={this.Class}\n              batch={this.batch}\n            />\n          </Route>\n          <Route path=\"/teacher/previewexam\" exact>\n            <div>\n              <NavBar>\n                {{\n                  left: (\n                    <div>\n                      <Button\n                        variant=\"primary\"\n                        className=\"btn btn-primary mr-3\"\n                        size=\"sm\"\n                        onClick={() => {\n                          window.history.back();\n                        }}\n                      >\n                        {\"<\"}\n                      </Button>\n                      <h5>PREVIEW QUESTION PAPER</h5>\n                    </div>\n                  ),\n                  right: !this.props.restricted ? (\n                    <h5>\n                      <Row>\n                        <Col>\n                          <Button\n                            className=\"btn btn-light ml-3 \"\n                            onClick={this.openEditExam}\n                          >\n                            <BsPencil />\n                          </Button>\n                        </Col>\n                        <Col>\n                          <Button\n                            className=\"btn btn-light ml-3 \"\n                            onClick={this.removeExam}\n                          >\n                            <BsDash />\n                          </Button>\n                        </Col>\n                      </Row>\n                    </h5>\n                  ) : null,\n                }}\n              </NavBar>\n              {/* Body of the question paper */}\n              <div id=\"previewExamBody\">\n                <Question\n                  question={{\n                    type: \"header\",\n                    examName: this.props.exam.examName,\n                    subject: this.props.exam.subject,\n                    date: this.props.exam.date,\n                    Class: this.props.Class,\n                    batch: this.props.batch,\n                    marks: this.props.exam.totalMarks,\n                    time: this.timeDuration,\n                  }}\n                />\n                {this.parseQuestions()}\n              </div>\n            </div>\n          </Route>\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport default withRouter(QuestionPaperPreview);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/sigup/googleSignup/GoogleSignup.js",["359","360","361","362"],"import { Component } from \"react\";\nimport { withRouter, useLocation } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport \"./GoogleSignup.css\";\n\nimport Student from \"../student/student\";\nimport Teacher from \"../teacher/teacher\";\n\nimport http from \"../../../../shared/http\";\n\nconst mapStateToProps = (state) => {\n  return {\n    signupData: state.login.signupData,\n    validSignupData: state.login.validSignupData,\n  };\n};\n\nlet GOOGLE_DATA = {};\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      accountType: \"student\",\n      googleData: {},\n    };\n  }\n\n  query = null;\n\n  selectAccountType = (event) => {\n    this.setState({ accountType: event.target.value });\n  };\n\n  finishSignup = () => {\n    console.log(this.props.signupData, GOOGLE_DATA);\n    http(\n      \"POST\",\n      \"/register/googlesignup\",\n      { ...this.props.signupData, ...GOOGLE_DATA },\n      (res) => {\n        if (res.status == 200) {\n          alert(\"Signup Completed\");\n          document.location.href = \"http://localhost:3000/signin\";\n        } else {\n          alert(res.data);\n        }\n      }\n    );\n  };\n\n  useQuery = () => {\n    let query = new URLSearchParams(this.props.location.search);\n    return query;\n  };\n\n  getGoogleData = () => {\n    this.query = this.useQuery();\n\n    if (this.query.get(\"name\")) GOOGLE_DATA.name = this.query.get(\"name\");\n    if (this.query.get(\"email\")) GOOGLE_DATA.email = this.query.get(\"email\");\n    if (this.query.get(\"id\")) GOOGLE_DATA.googleId = this.query.get(\"id\");\n  };\n\n  render() {\n    this.getGoogleData();\n    return (\n      <form>\n        <div className=\"form-group\">\n          <label for=\"account-type\">Select Account Type</label>\n          <br />\n          <select\n            className=\"form-select\"\n            aria-label=\"Default select example\"\n            id=\"account-type\"\n            onChange={this.selectAccountType}\n          >\n            <option value=\"student\" selected>\n              Student\n            </option>\n            <option value=\"teacher\">Teacher</option>\n          </select>\n        </div>\n        <div className=\"form-group\">\n          <label>Enter your details</label>\n          {this.state.accountType == \"student\" ? (\n            <Student\n              google\n              data={{\n                name: GOOGLE_DATA.name,\n                email: GOOGLE_DATA.email,\n                id: GOOGLE_DATA.id,\n              }}\n            />\n          ) : null}\n          {this.state.accountType == \"teacher\" ? (\n            <Teacher\n              google\n              data={{\n                name: GOOGLE_DATA.name,\n                email: GOOGLE_DATA.email,\n                id: GOOGLE_DATA.id,\n              }}\n            />\n          ) : null}\n        </div>\n        <div className=\"d-flex align-items-center justify-content-center\">\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            id=\"login-btn\"\n            onClick={this.finishSignup}\n            disabled={!this.props.validSignupData}\n          >\n            FINISH\n          </button>\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default withRouter(connect(mapStateToProps)(Signup));\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/newExam/NewExam.js",["363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383"],"import React, { Component } from \"react\";\nimport NavBar from \"../../ui-elements/navBar/NavBar\";\nimport \"./NewExam.css\";\nimport {\n  BsFillCaretDownFill,\n  BsFillCaretUpFill,\n  BsPencil,\n  BsDash,\n  BsCheck,\n  BsPlus,\n} from \"react-icons/bs\";\nimport { Button, Modal, Form, Row, Col, Dropdown } from \"react-bootstrap\";\nimport configureDialogBox from \"../../../shared/dailogBox\";\nimport $ from \"jquery\";\nimport http from \"../../../shared/http\";\nimport Question from \"../Question/Question\";\nimport Canvas from \"../../ui-elements/Canvas/Canvas\";\nimport { withRouter } from \"react-router-dom\";\n\nclass NewExam extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [\n        {\n          id: 1,\n          type: \"text\",\n          text: \"YOU CAN INSERT SOME INFORMATION TEXT LIKE THIS\",\n        },\n        {\n          id: 2,\n          type: \"mcq\",\n          question: \"YOUR MULTIPLE CHOICE QUESTION HERE\",\n          marks: 1,\n          image: null,\n          canvas: null,\n          options: [\n            {\n              name: \"OPTION 1\",\n              correct: true,\n            },\n            {\n              name: \"OPTION 2\",\n              correct: false,\n            },\n            {\n              name: \"OPTION 3\",\n              correct: false,\n            },\n          ],\n        },\n        {\n          id: 3,\n          type: \"short\",\n          marks: 2,\n          question: \"YOUR SHORT ANSWER TYPE QUESTION HERE\",\n          image: null,\n          canvas: null,\n        },\n        {\n          id: 4,\n          type: \"essay\",\n          question: \"YOUR ESSAY TYPE QUESTION HERE\",\n          marks: 10,\n          canvas: null,\n          image: null,\n        },\n      ],\n      selectedQuestion: null,\n      editSelected: false,\n      mcqModalOptions: [],\n      image: \"\",\n      canvas: \"\",\n      showCanvas: false,\n      lastOpenModal: null,\n      classList: {},\n      classOptions: null,\n      batchOptions: null,\n    };\n  }\n\n  //Creating required refs\n  newTextRef = React.createRef();\n\n  mcqQuestionRef = React.createRef();\n  mcqMarksRef = React.createRef();\n  mcqNewOption = React.createRef();\n\n  shortMarksRef = React.createRef();\n  shortQuestionRef = React.createRef();\n\n  essayMarksRef = React.createRef();\n  essayQuestionRef = React.createRef();\n\n  //When scheduling exam\n  examNameRef = React.createRef();\n  subjectRef = React.createRef();\n  timeFromRef = React.createRef();\n  timeToRef = React.createRef();\n  dateRef = React.createRef();\n  marksRef = React.createRef();\n  classRef = React.createRef();\n  batchRef = React.createRef();\n\n  //This is used when editiong an existing exam that is already scheduled\n  setUpProps = () => {\n    if (this.props.exam) {\n      this.classRef.current.value = this.props.Class;\n      this.setState({ questions: this.props.exam.questionPaper }, () => {\n        this.examNameRef.current.value = this.props.exam.examName;\n        this.subjectRef.current.value = this.props.exam.subject;\n        this.timeFromRef.current.value = this.props.exam.from;\n        this.timeToRef.current.value = this.props.exam.to;\n        this.dateRef.current.value = this.props.exam.date;\n        this.marksRef.current.value = this.props.exam.totalMarks;\n      });\n    }\n  };\n\n  //Add a new Text into questions\n  addNewText = () => {\n    let text = this.newTextRef.current.value;\n\n    if (text) {\n      this.setState({\n        questions: [\n          ...this.state.questions,\n          { type: \"text\", id: Date.now(), text },\n        ],\n      });\n      window.$(\"#textModal\").modal(\"toggle\");\n    } else {\n      alert(\"Please enter some text\");\n    }\n  };\n\n  //Edit an existing Text\n  editText = () => {\n    let text = this.newTextRef.current.value;\n    let questions = [...this.state.questions];\n\n    if (text) {\n      //Getting the the question that is selected\n      let i = 0;\n      for (i in questions) {\n        if (questions[i].id == this.state.selectedQuestion) {\n          questions.splice(i, 1);\n\n          break;\n        }\n      }\n\n      questions.splice(i, 0, { type: \"text\", text, id: Date.now() });\n\n      this.setState({\n        questions: [...questions],\n        editSelected: false,\n        selectedQuestion: null,\n      });\n      window.$(\"#textModal\").modal(\"toggle\");\n    } else {\n      alert(\"Please enter some text\");\n    }\n  };\n\n  //Parse the questions to display it\n  parseQuestions = () => {\n    return this.state.questions.map((question, index) => {\n      return (\n        <Question\n          question={question}\n          click={this.selectQuestion}\n          key={question.id}\n        />\n      );\n    });\n  };\n\n  //select a particular question (Called inside <Question/>)\n  selectQuestion = (event) => {\n    let questionElement = null;\n\n    //SELECTING PARENT QUESTION ELEMENT\n    for (let element of event.nativeEvent.path) {\n      if ($(element).hasClass(\"question\")) questionElement = element;\n    }\n\n    this.setState({ selectedQuestion: questionElement.id });\n  };\n\n  //Remove question from array\n  removeQuestion = () => {\n    let questions = [...this.state.questions];\n    for (let i in questions) {\n      if (questions[i].id == this.state.selectedQuestion) {\n        questions.splice(i, 1);\n        this.setState({ questions });\n      }\n    }\n    this.forceUpdate();\n    this.state.selectedQuestion = null;\n    $(\"#questionsList .active\").removeClass(\"active\");\n  };\n\n  //Change order -1\n  questionDown = () => {\n    let questions = [...this.state.questions];\n    const max = questions.length - 1;\n\n    for (let i in questions) {\n      if (questions[i].id == this.state.selectedQuestion) {\n        if (i >= max) {\n          alert(\"This is the last question, Cannot move down\");\n        } else {\n          //Swapping down\n          questions.splice(parseInt(i) + 1, 0, questions.splice(i, 1)[0]);\n\n          break;\n        }\n      }\n    }\n    this.setState({ questions });\n  };\n\n  //Change order +1\n  questionUp = () => {\n    let questions = [...this.state.questions];\n\n    for (let i in questions) {\n      if (questions[i].id == this.state.selectedQuestion) {\n        if (i <= 0) {\n          alert(\"This is the first question, Cannot move up\");\n        } else {\n          //Swapping up\n          questions.splice(parseInt(i) - 1, 0, questions.splice(i, 1)[0]);\n\n          break;\n        }\n      }\n    }\n    this.setState({ questions });\n  };\n\n  //Edit currently selected Question\n  editSelectedQuestion = () => {\n    let selectedQuestion = null;\n    this.setState({ editSelected: true });\n\n    //Getting the type of the question that is selected\n    let questionType = \"\";\n    for (let question of this.state.questions) {\n      if (question.id == this.state.selectedQuestion) {\n        selectedQuestion = question;\n        questionType = question.type;\n      }\n    }\n\n    window.$(\"#\" + questionType + \"Modal\").modal(\"toggle\");\n\n    if (questionType == \"text\") {\n      this.newTextRef.current.value = selectedQuestion.text;\n    } else if (questionType == \"mcq\") {\n      this.mcqMarksRef.current.value = selectedQuestion.marks;\n      this.mcqQuestionRef.current.value = selectedQuestion.question;\n      this.setState({\n        mcqModalOptions: selectedQuestion.options,\n        image: selectedQuestion.image,\n        canvas: selectedQuestion.canvas,\n      });\n    } else if (questionType == \"short\") {\n      this.shortMarksRef.current.value = selectedQuestion.marks;\n      this.shortQuestionRef.current.value = selectedQuestion.question;\n      this.setState({\n        image: selectedQuestion.image,\n        canvas: selectedQuestion.canvas,\n      });\n    } else if (questionType == \"essay\") {\n      this.essayMarksRef.current.value = selectedQuestion.marks;\n      this.essayQuestionRef.current.value = selectedQuestion.question;\n      this.setState({\n        image: selectedQuestion.image,\n        canvas: selectedQuestion.canvas,\n      });\n    }\n  };\n\n  //Render options list in mcqModal\n  renderMcqModalOptions = () => {\n    return this.state.mcqModalOptions.map((option, index) => {\n      return (\n        <tr key={option.name}>\n          <td>\n            <input\n              className=\"ml-3\"\n              type=\"radio\"\n              name=\"mcqModalOptions\"\n              value={option.name}\n              checked={option.correct ? true : undefined}\n              onChange={(e) => {\n                this.mcqSelectCorrectOption();\n              }}\n            />\n          </td>\n\n          <td\n            onClick={(e) => {\n              this.removeMcqOption(e.target.getAttribute(\"name\"));\n            }}\n            name={option.name}\n          >\n            <label\n              name={option.name}\n              class=\"form-check-label\"\n              for=\"mcqModalOptions\"\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n            >\n              {option.name}\n            </label>\n          </td>\n        </tr>\n      );\n    });\n  };\n\n  //Add new option to mcq\n  addMcqOption = () => {\n    let newOption = this.mcqNewOption.current.value;\n\n    if (newOption) {\n      this.setState({\n        mcqModalOptions: [\n          ...this.state.mcqModalOptions,\n          { name: newOption, correct: false },\n        ],\n      });\n\n      //Reset form value\n      this.mcqNewOption.current.value = \"\";\n    } else {\n      alert(\"Enter option to add\");\n    }\n  };\n\n  //Remove option in mcq\n  removeMcqOption = (name) => {\n    let confirmation = window.confirm(\"Are you sure to remove option?\");\n\n    if (confirmation) {\n      let options = [...this.state.mcqModalOptions];\n\n      for (let i in options) {\n        if (options[i].name == name) {\n          options.splice(i, 1);\n        }\n      }\n\n      this.setState({ mcqModalOptions: [...options] });\n    }\n  };\n\n  //Add MCQ Question\n  addMcqQuestion = () => {\n    let question = this.mcqQuestionRef.current.value;\n    let marks = this.mcqMarksRef.current.value;\n    let options = [...this.state.mcqModalOptions];\n    let id = Date.now();\n    let type = \"mcq\";\n\n    if (question) {\n      if (marks) {\n        if (options.length > 0) {\n          //Validation success\n\n          //Adding new Question\n          this.setState({\n            questions: [\n              ...this.state.questions,\n              {\n                question,\n                marks,\n                options,\n                id,\n                type,\n                image: this.state.image,\n                canvas: this.state.canvas,\n              },\n            ],\n            mcqModalOptions: [],\n          });\n\n          this.mcqMarksRef.current.value = \"\";\n          this.mcqQuestionRef.current.value = \"\";\n          this.setState({ image: \"\", canvas: \"\", editCanvas: \"\" });\n\n          window.$(\"#mcqModal\").modal(\"hide\");\n        } else {\n          alert(\"No options inserted for the question\");\n        }\n      } else {\n        alert(\"Please enter marks\");\n      }\n    } else {\n      alert(\"Please enter question\");\n    }\n  };\n\n  //When selecting MCQ correct option\n  mcqSelectCorrectOption = () => {\n    let correctOption = window.$('input[name=\"mcqModalOptions\"]:checked').val();\n\n    let options = [...this.state.mcqModalOptions];\n\n    for (let i in options) {\n      if (options[i].name == correctOption) {\n        options[i].correct = true;\n      } else {\n        options[i].correct = false;\n      }\n    }\n\n    this.setState({ mcqModalOptions: [...options] });\n  };\n\n  //Edit an existing MCQ\n  editMcq = () => {\n    let question = this.mcqQuestionRef.current.value;\n    let marks = this.mcqMarksRef.current.value;\n    let options = [...this.state.mcqModalOptions];\n    let id = Date.now();\n    let type = \"mcq\";\n\n    let questions = [...this.state.questions];\n\n    if (question) {\n      if (marks) {\n        if (options.length > 0) {\n          //Validation success\n\n          //Editing Question\n          let i = 0;\n          for (i in questions) {\n            if (questions[i].id == this.state.selectedQuestion) {\n              questions.splice(i, 1);\n\n              break;\n            }\n          }\n\n          questions.splice(i, 0, {\n            question,\n            marks,\n            options,\n            id,\n            type,\n            image: this.state.image,\n            canvas: this.state.canvas,\n          });\n\n          this.setState({\n            questions: [...questions],\n            mcqModalOptions: [],\n            editSelected: false,\n            selectedQuestion: null,\n            image: \"\",\n            canvas: \"\",\n            editCanvas: \"\",\n          });\n          window.$(\"#mcqModal\").modal(\"toggle\");\n\n          this.mcqMarksRef.current.value = \"\";\n          this.mcqQuestionRef.current.value = \"\";\n        } else {\n          alert(\"No options inserted for the question\");\n        }\n      } else {\n        alert(\"Please enter marks\");\n      }\n    } else {\n      alert(\"Please enter question\");\n    }\n  };\n\n  //File upload\n  uploadFile = () => {\n    let imageFile = document.getElementById(\"imageUpload\").files[0];\n    let formData = new FormData();\n\n    if (!imageFile) {\n      return alert(\"Please select an image\");\n    }\n\n    formData.append(\"image\", imageFile);\n\n    $.ajax({\n      url: \"http://localhost:4000/upload\",\n      cache: false,\n      contentType: false,\n      processData: false,\n      data: formData,\n      type: \"POST\",\n      success: (response) => {\n        this.setState({ image: response });\n        window.$(\"#uploadImage\").modal(\"hide\");\n      },\n      error: function (error) {\n        alert(\"File upload error. Check file type and size\");\n      },\n    });\n  };\n\n  //Clear uploaded image\n  clearUpload = () => {\n    this.setState({ image: \"\" });\n    window.$(\"#uploadImage\").modal(\"hide\");\n  };\n\n  //Open canvas\n  openCanvas = () => {\n    this.setState({\n      showCanvas: true,\n      lastOpenModal: window.$(\".modal.show\"),\n    });\n\n    window.$(\".modal\").modal(\"hide\");\n  };\n\n  //Close canvas\n  closeCanvas = () => {\n    this.state.lastOpenModal.modal(\"show\");\n\n    this.setState({ showCanvas: false, lastOpenModal: null });\n  };\n\n  //Save Canvas\n  saveCanvas = (image) => {\n    this.state.lastOpenModal.modal(\"show\");\n\n    this.setState({ showCanvas: false, canvas: image, lastOpenModal: null });\n  };\n\n  //Add a new Short question\n  addShort = () => {\n    let question = this.shortQuestionRef.current.value;\n    let marks = this.shortMarksRef.current.value;\n    let id = Date.now();\n    let type = \"short\";\n\n    if (question) {\n      if (marks) {\n        //Validation success\n\n        //Adding new Question\n        this.setState({\n          questions: [\n            ...this.state.questions,\n            {\n              question,\n              marks,\n              id,\n              type,\n              image: this.state.image,\n              canvas: this.state.canvas,\n            },\n          ],\n        });\n\n        this.shortQuestionRef.current.value = \"\";\n        this.shortMarksRef.current.value = \"\";\n        this.setState({ image: \"\", canvas: \"\", editCanvas: \"\" });\n\n        window.$(\"#shortModal\").modal(\"hide\");\n      } else {\n        alert(\"Please enter marks\");\n      }\n    } else {\n      alert(\"Please enter question\");\n    }\n  };\n\n  //Edit existing short question\n  editShort = () => {\n    let question = this.shortQuestionRef.current.value;\n    let marks = this.shortMarksRef.current.value;\n    let id = Date.now();\n    let type = \"short\";\n\n    let questions = [...this.state.questions];\n\n    if (question) {\n      if (marks) {\n        //Validation success\n\n        //Editing Question\n        let i = 0;\n        for (i in questions) {\n          if (questions[i].id == this.state.selectedQuestion) {\n            questions.splice(i, 1);\n\n            break;\n          }\n        }\n\n        questions.splice(i, 0, {\n          question,\n          marks,\n          id,\n          type,\n          image: this.state.image,\n          canvas: this.state.canvas,\n        });\n\n        this.setState({\n          questions: [...questions],\n          editSelected: false,\n          selectedQuestion: null,\n          image: \"\",\n          canvas: \"\",\n        });\n        window.$(\"#shortModal\").modal(\"toggle\");\n\n        this.shortMarksRef.current.value = \"\";\n        this.shortQuestionRef.current.value = \"\";\n      } else {\n        alert(\"Please enter marks\");\n      }\n    } else {\n      alert(\"Please enter question\");\n    }\n  };\n\n  //Add a new Essay question\n  addEssay = () => {\n    let question = this.essayQuestionRef.current.value;\n    let marks = this.essayMarksRef.current.value;\n    let id = Date.now();\n    let type = \"essay\";\n\n    if (question) {\n      if (marks) {\n        //Validation success\n\n        //Adding new Question\n        this.setState({\n          questions: [\n            ...this.state.questions,\n            {\n              question,\n              marks,\n              id,\n              type,\n              image: this.state.image,\n              canvas: this.state.canvas,\n            },\n          ],\n        });\n\n        this.essayMarksRef.current.value = \"\";\n        this.essayQuestionRef.current.value = \"\";\n        this.setState({ image: \"\", canvas: \"\" });\n\n        window.$(\"#essayModal\").modal(\"hide\");\n      } else {\n        alert(\"Please enter marks\");\n      }\n    } else {\n      alert(\"Please enter question\");\n    }\n  };\n\n  //Edit existing essay question\n  editEssay = () => {\n    let question = this.essayQuestionRef.current.value;\n    let marks = this.essayMarksRef.current.value;\n    let id = Date.now();\n    let type = \"essay\";\n\n    let questions = [...this.state.questions];\n\n    if (question) {\n      if (marks) {\n        //Validation success\n\n        //Editing Question\n        let i = 0;\n        for (i in questions) {\n          if (questions[i].id == this.state.selectedQuestion) {\n            questions.splice(i, 1);\n\n            break;\n          }\n        }\n\n        questions.splice(i, 0, {\n          question,\n          marks,\n          id,\n          type,\n          image: this.state.image,\n          canvas: this.state.canvas,\n        });\n\n        this.setState({\n          questions: [...questions],\n          editSelected: false,\n          selectedQuestion: null,\n          image: \"\",\n          canvas: \"\",\n        });\n        window.$(\"#essayModal\").modal(\"toggle\");\n\n        this.essayMarksRef.current.value = \"\";\n        this.essayQuestionRef.current.value = \"\";\n      } else {\n        alert(\"Please enter marks\");\n      }\n    } else {\n      alert(\"Please enter question\");\n    }\n  };\n\n  //Open the schedule exam modal\n  openScheduleExam = () => {\n    //Checking if editExam mode or not\n    if (this.props.exam) {\n      this.classRef.current.value = this.props.Class;\n      this.batchRef.current.value = this.props.batch;\n    }\n\n    if (this.state.questions.length > 0) {\n      let marks = 0;\n\n      //Setting total marks automatically\n      for (let question of this.state.questions) {\n        if (question.marks) {\n          marks += parseInt(question.marks);\n        }\n      }\n\n      this.marksRef.current.value = marks;\n      window.$(\"#scheduleexam\").modal(\"toggle\");\n    } else {\n      alert(\"Please insert atleast one question\");\n    }\n  };\n\n  //Get Class data from the database (SCHEDULE EXAM)\n  getClasses = () => {\n    http(\"GET\", \"/login/getclasses\", {}, (res) => {\n      if (res.status == 200) {\n        this.setState({ classList: res.data }, () => {\n          this.setupClassOptions();\n          this.setUpProps();\n        });\n      }\n    });\n  };\n\n  //Setup the options for the <select> for classes (SCHEDULE EXAM)\n  setupClassOptions = () => {\n    //Options JSX\n    let options = [];\n\n    options = Object.keys(this.state.classList).map((key, array) => {\n      return (\n        <>\n          <option value={key}>{key}</option>\n        </>\n      );\n    });\n\n    //Setting class list options to display\n    this.setState({ classOptions: options }, () => {\n      this.setUpProps();\n      this.setupBatchOptions();\n    });\n  };\n\n  //Setup the options for the <select> for batches based on the selected Class (SCHEDULE EXAM)\n  setupBatchOptions = () => {\n    //Currently selected class\n    let Class = this.classRef.current.value;\n\n    if (!Class) return;\n\n    //Getting batches of the selected class\n    let batches = this.state.classList[Class].batches;\n\n    let options = batches.map((batch, index, array) => {\n      return (\n        <>\n          <option value={batch}>{batch}</option>\n        </>\n      );\n    });\n\n    //Setting options as state to diaplay it in screen\n    this.setState({ batchOptions: options });\n  };\n\n  //Schedule a new Exam\n  scheduleExam = () => {\n    let examName = this.examNameRef.current.value;\n    let subject = this.subjectRef.current.value;\n    let timeFrom = this.timeFromRef.current.value;\n    let timeTo = this.timeToRef.current.value;\n    let date = this.dateRef.current.value;\n    let marks = this.marksRef.current.value;\n    let Class = this.classRef.current.value;\n    let batch = this.batchRef.current.value;\n\n    if (!examName) {\n      return alert(\"Please Enter exam name\");\n    }\n\n    if (!subject) {\n      return alert(\"Please Enter subject name\");\n    }\n\n    if (!timeFrom) {\n      return alert(\"Please Enter exam start time\");\n    }\n\n    if (!timeTo) {\n      return alert(\"Please Enter exam end time\");\n    }\n\n    if (!date) {\n      return alert(\"Please Enter date of exam\");\n    }\n\n    if (!marks || marks == 0) {\n      return alert(\"Invalid total marks\");\n    }\n\n    if (!Class || !batch) {\n      return alert(\"Class or batch data incorrect\");\n    }\n\n    //Validate time\n    let timeFromObject = new Date(\"1970-01-01 \" + timeFrom);\n    let timeToObject = new Date(\"1970-01-01 \" + timeTo);\n\n    if (timeFromObject.getTime() >= timeToObject.getTime()) {\n      return alert(\"Invalid time!\");\n    }\n\n    //Validate date\n    let dateObject = new Date(date + \" \" + timeFrom);\n    let now = new Date();\n\n    if (dateObject.getTime() <= now.getTime()) {\n      return alert(\"Invalid date\");\n    }\n\n    //VALIDATION SUCCESS\n\n    if (this.props.exam) {\n      //EDIT MODE==EDIT EXISTING EXAM\n      console.log(this.props.exam);\n      http(\n        \"POST\",\n        \"/teacher/editexam\",\n        {\n          examName,\n          subject,\n          timeFrom,\n          timeTo,\n          date,\n          marks,\n          Class,\n          batch,\n          questions: this.state.questions,\n          id: this.props.exam._id,\n        },\n        (res) => {\n          alert(res.data);\n\n          if (res.status == 200) {\n            window.$(\".modal.show\").modal(\"hide\");\n            this.props.history.push(\"/teacher\");\n          }\n        }\n      );\n    } else {\n      //CREATE NEW EXAM\n      //Send data to server\n      http(\n        \"POST\",\n        \"/teacher/newexam\",\n        {\n          examName,\n          subject,\n          timeFrom,\n          timeTo,\n          date,\n          marks,\n          Class,\n          batch,\n          questions: this.state.questions,\n        },\n        (res) => {\n          alert(res.data);\n\n          if (res.status == 200) {\n            window.$(\".modal.show\").modal(\"hide\");\n            this.props.history.push(\"/teacher\");\n          }\n        }\n      );\n    }\n  };\n\n  componentDidMount() {\n    this.getClasses();\n  }\n\n  render() {\n    return (\n      <div>\n        {/**SHOW CANVAS */}\n        {this.state.showCanvas ? (\n          <Canvas\n            close={this.closeCanvas}\n            save={this.saveCanvas}\n            image={this.state.editSelected ? this.state.canvas : undefined}\n          />\n        ) : null}\n        {/* Configuring The scheduleexam */}\n        {configureDialogBox(\n          \"scheduleexam\",\n          \"SCHEDULE EXAM\",\n          <>\n            <Row>\n              <Col>\n                <Form.Label className=\"text-dark\">EXAM NAME</Form.Label>\n              </Col>\n              <Col>\n                <Form.Control\n                  ref={this.examNameRef}\n                  type=\"text\"\n                  placeholder=\"Exam name\"\n                />\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col>\n                <Form.Label className=\"text-dark\">SUBJECT</Form.Label>\n              </Col>\n              <Col>\n                <Form.Control\n                  ref={this.subjectRef}\n                  type=\"text\"\n                  placeholder=\"Subject\"\n                />\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col>\n                <Form.Label className=\"text-dark\">TIME</Form.Label>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Form.Label className=\"text-dark\">From</Form.Label>\n              </Col>\n              <Col>\n                <Form.Control\n                  ref={this.timeFromRef}\n                  type=\"time\"\n                  placeholder=\"FROM\"\n                />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Form.Label className=\"text-dark\">To</Form.Label>\n              </Col>\n              <Col>\n                <Form.Control\n                  ref={this.timeToRef}\n                  type=\"time\"\n                  placeholder=\"TO\"\n                />\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col>\n                <Form.Label className=\"text-dark\">DATE</Form.Label>\n              </Col>\n              <Col>\n                <Form.Control\n                  ref={this.dateRef}\n                  type=\"date\"\n                  placeholder=\"Date\"\n                />\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col>\n                <Form.Label className=\"text-dark\">TOTAL MARKS</Form.Label>\n              </Col>\n              <Col>\n                <Form.Control\n                  ref={this.marksRef}\n                  type=\"number\"\n                  placeholder=\"Marks\"\n                  disabled\n                />\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col>\n                <Form.Label className=\"text-dark\">CLASS</Form.Label>\n              </Col>\n              <Col>\n                <Form.Control\n                  ref={this.classRef}\n                  as=\"select\"\n                  className=\"my-1 mr-sm-2\"\n                  id=\"inlineFormCustomSelectPref\"\n                  onChange={() => {\n                    //Setup batch details based on the selected class\n                    this.setupBatchOptions();\n                  }}\n                  custom\n                >\n                  <option value=\"\" selected>\n                    --CLASS--\n                  </option>\n                  {this.state.classOptions}\n                </Form.Control>\n              </Col>\n              <Col>\n                <Form.Label className=\"text-dark\">BATCH</Form.Label>\n              </Col>\n              <Col>\n                <Form.Control\n                  ref={this.batchRef}\n                  as=\"select\"\n                  className=\"my-1 mr-sm-2\"\n                  id=\"inlineFormCustomSelectPref\"\n                  custom\n                >\n                  <option value=\"\" selected>\n                    --BATCH--\n                  </option>\n                  {this.state.batchOptions}\n                </Form.Control>\n              </Col>\n            </Row>\n          </>,\n          <>\n            <button\n              variant=\"light\"\n              className=\"btn btn-primary\"\n              onClick={this.scheduleExam}\n            >\n              {this.props.exam ? \"EDIT EXAM\" : \"CREATE EXAM\"}\n            </button>\n          </>\n        )}\n        {/* Configuring The add text */}\n        {configureDialogBox(\n          \"textModal\",\n          this.state.editSelected ? \"EDIT TEXT\" : \"ADD TEXT\",\n          <>\n            <form>\n              <label className=\"black\" for=\"text\">\n                Enter text:{\" \"}\n              </label>\n              <textarea\n                rows=\"10\"\n                name=\"text\"\n                id=\"text\"\n                className=\"m-3\"\n                ref={this.newTextRef}\n              ></textarea>\n            </form>\n          </>,\n          <>\n            <button\n              className=\"btn btn-primary\"\n              onClick={\n                this.state.editSelected ? this.editText : this.addNewText\n              }\n            >\n              OK\n            </button>\n          </>\n        )}\n        {/* Configuring The add mcq */}\n        {configureDialogBox(\n          \"mcqModal\",\n          this.state.editSelected\n            ? \"EDIT MULTIPLE CHOICE QUESTION\"\n            : \"ADD MULTIPLE CHOICE QUESTION\",\n          <>\n            <form>\n              <label className=\"black\" for=\"mcq\">\n                Enter Question:{\" \"}\n              </label>\n              <textarea\n                name=\"mcq\"\n                ref={this.mcqQuestionRef}\n                id=\"mcq\"\n                className=\"  mr-3 form-control from-control-lg\"\n              ></textarea>\n              <br />\n              <label className=\"black\" for=\"mcq\">\n                Mark:{\" \"}\n              </label>\n              <input\n                type=\"number\"\n                name=\"mark\"\n                id=\"mark\"\n                ref={this.mcqMarksRef}\n                className=\"ml-3 \"\n              ></input>\n              <br />\n              <div className=\"mcqOptionsContainer\">\n                <table>\n                  <tr>\n                    <td>Correct</td>\n                    <td>Choice</td>\n                  </tr>\n                  {this.renderMcqModalOptions()}\n                  <tr>\n                    <td></td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        name=\"mcqNewOption\"\n                        placeholder=\"New Option\"\n                        ref={this.mcqNewOption}\n                      ></input>\n                    </td>\n                  </tr>\n                </table>\n              </div>\n            </form>\n          </>,\n          <>\n            <button className=\"btn btn-primary\" onClick={this.addMcqOption}>\n              Add option\n            </button>\n            <button className=\"btn btn-primary\" onClick={this.openCanvas}>\n              Canvas{\" \"}\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                window.$(\"#uploadImage\").modal(\"show\");\n              }}\n            >\n              Upload\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={\n                this.state.editSelected ? this.editMcq : this.addMcqQuestion\n              }\n            >\n              OK\n            </button>\n          </>\n        )}\n        {/* Configuring The add SHORT */}\n        {configureDialogBox(\n          \"shortModal\",\n          this.state.editSelected\n            ? \"EDIT SHORT ANSWER QUESTION\"\n            : \"ADD SHORT ANSWER QUESTION\",\n          <>\n            <form>\n              <label className=\"black mr-3\" for=\"mcq\">\n                Enter Question:\n              </label>\n              <input\n                type=\"text\"\n                name=\"short\"\n                id=\"short\"\n                ref={this.shortQuestionRef}\n                className=\"mr-3 form-control from-control-lg\"\n              ></input>\n              <br />\n              <label className=\"black\" for=\"mcq\">\n                Mark:\n              </label>\n              <input\n                type=\"number\"\n                name=\"mark\"\n                id=\"mark\"\n                ref={this.shortMarksRef}\n                className=\"ml-3 \"\n              ></input>\n              <br />\n            </form>\n          </>,\n          <>\n            <button className=\"btn btn-primary\" onClick={this.openCanvas}>\n              Canvas{\" \"}\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                window.$(\"#uploadImage\").modal(\"show\");\n              }}\n            >\n              Upload\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={this.state.editSelected ? this.editShort : this.addShort}\n            >\n              OK\n            </button>\n          </>\n        )}\n        {/* Configuring The add SHORT */}\n        {configureDialogBox(\n          \"essayModal\",\n          this.state.editSelected\n            ? \"EDIT ESSAY QUESTION\"\n            : \"ADD ESSAY QUESTION\",\n          <>\n            <form>\n              <label className=\"black mr-3\" for=\"mcq\">\n                Enter Question:\n              </label>\n              <input\n                type=\"text\"\n                name=\"short\"\n                id=\"short\"\n                ref={this.essayQuestionRef}\n                className=\"mr-3 form-control from-control-lg\"\n              ></input>\n              <br />\n              <label className=\"black\" for=\"mcq\">\n                Mark:\n              </label>\n              <input\n                ref={this.essayMarksRef}\n                type=\"number\"\n                name=\"mark\"\n                id=\"mark\"\n                className=\"ml-3 \"\n              ></input>\n              <br />\n            </form>\n          </>,\n          <>\n            <button className=\"btn btn-primary\" onClick={this.openCanvas}>\n              Canvas\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={() => {\n                window.$(\"#uploadImage\").modal(\"show\");\n              }}\n            >\n              Upload\n            </button>\n            <button\n              className=\"btn btn-primary\"\n              onClick={this.state.editSelected ? this.editEssay : this.addEssay}\n            >\n              OK\n            </button>\n          </>\n        )}\n        <div>\n          {configureDialogBox(\n            \"uploadImage\",\n            \"Upload Image\",\n            <>\n              <form\n                // action=\"http://localhost:4000/upload\"\n                enctype=\"multipart/form-data\"\n                // method=\"post\"\n              >\n                <p>MAX FILE SIZE (5MB)</p>\n                <p>Only .jpg, .jpeg, .png files supported</p>\n                <input type=\"file\" id=\"imageUpload\" name=\"image\" />\n                <input\n                  type=\"button\"\n                  value=\"UPLOAD\"\n                  className=\"btn btn-primary\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    this.uploadFile();\n                  }}\n                />\n                <input\n                  type=\"button\"\n                  value=\"CLEAR\"\n                  className=\"btn btn-danger ml-1\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    this.clearUpload();\n                  }}\n                />\n              </form>\n            </>\n          )}\n        </div>\n        <NavBar>\n          {{\n            left: (\n              <div>\n                <Button\n                  variant=\"primary\"\n                  className=\"btn btn-primary mr-3\"\n                  size=\"sm\"\n                  onClick={() => {\n                    this.props.history.push(\"/teacher\");\n                  }}\n                >\n                  {\"<\"}\n                </Button>\n                <h5>\n                  {this.props.exam\n                    ? \"EDIT QUESTION PAPER\"\n                    : \"CREATE QUESTION PAPER\"}\n                </h5>\n              </div>\n            ),\n            right: (\n              <div>\n                <Row>\n                  <Col>\n                    {\" \"}\n                    <button\n                      className=\"btn btn-light \"\n                      id=\"navBarDown\"\n                      disabled={this.state.selectedQuestion ? undefined : true}\n                      onClick={this.questionDown}\n                    >\n                      <BsFillCaretDownFill />\n                    </button>\n                  </Col>\n                  <Col>\n                    <button\n                      className=\"btn btn-light ml-3 \"\n                      id=\"navBarUp\"\n                      disabled={this.state.selectedQuestion ? undefined : true}\n                      onClick={this.questionUp}\n                    >\n                      <BsFillCaretUpFill />\n                    </button>\n                  </Col>\n                  <Col>\n                    <button\n                      className=\"btn btn-light ml-3 \"\n                      id=\"navBarEdit\"\n                      disabled={this.state.selectedQuestion ? undefined : true}\n                      onClick={this.editSelectedQuestion}\n                    >\n                      <BsPencil />\n                    </button>\n                  </Col>\n                  <Col>\n                    <button\n                      className=\"btn btn-light ml-3 \"\n                      id=\"navBarDelete\"\n                      disabled={this.state.selectedQuestion ? undefined : true}\n                      onClick={this.removeQuestion}\n                    >\n                      <BsDash />\n                    </button>\n                  </Col>\n                  <Col>\n                    <Dropdown>\n                      <Dropdown.Toggle variant=\"light\" id=\"dropdown-basic\">\n                        <BsPlus />\n                      </Dropdown.Toggle>\n\n                      <Dropdown.Menu>\n                        <Dropdown.Item\n                          data-toggle=\"modal\"\n                          data-target=\"#textModal\"\n                          onClick={() => {\n                            this.setState({ editSelected: false, image: \"\" });\n                          }}\n                        >\n                          Text\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          data-toggle=\"modal\"\n                          data-target=\"#mcqModal\"\n                          onClick={() => {\n                            this.setState({ editSelected: false, image: \"\" });\n                          }}\n                        >\n                          Multiple Choice question\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          data-toggle=\"modal\"\n                          data-target=\"#shortModal\"\n                          onClick={() => {\n                            this.setState({ editSelected: false, image: \"\" });\n                          }}\n                        >\n                          Short answer\n                        </Dropdown.Item>\n                        <Dropdown.Item\n                          data-toggle=\"modal\"\n                          data-target=\"#essayModal\"\n                          onClick={() => {\n                            this.setState({ editSelected: false, image: \"\" });\n                          }}\n                        >\n                          Essay Question\n                        </Dropdown.Item>\n                      </Dropdown.Menu>\n                    </Dropdown>\n                  </Col>\n                  <Button\n                    className=\"btn btn-success ml-3\"\n                    onClick={this.openScheduleExam}\n                  >\n                    <BsCheck />\n                  </Button>\n                </Row>\n              </div>\n            ),\n          }}\n        </NavBar>\n        <div id=\"newExamBody\">\n          {this.state.questions.length == 0 ? (\n            <div\n              id=\"emptyQuestion\"\n              className=\"d-flex align-items-center justify-content-center\"\n            >\n              <p>NO QUESTIONS INSERTED</p>\n            </div>\n          ) : (\n            <div className=\"list-group\" id=\"questionsList\">\n              {this.parseQuestions()}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NewExam);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/VerifyAccounts/VerifyAccounts.js",["384","385","386","387"],"import React, { Component } from \"react\";\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\nimport { Button, Row, Col, Form } from \"react-bootstrap\";\nimport \"./verifyAccounts.css\";\n\nimport http from \"../../../../shared/http\";\nexport default class VerifyAccounts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userData: [],\n    };\n  }\n\n  //Get users data from the server\n  getUserData = () => {\n    http(\"GET\", \"/admin/verifyaccount\", null, (res) => {\n      if (res.status == 200) {\n        this.setState({ userData: res.data });\n      } else {\n        alert(\"Users data return failed\");\n      }\n    });\n  };\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  acceptUser = (item) => {\n    let confirmation = window.confirm(\"Are you sure you want to accept?\");\n\n    if (confirmation) {\n      http(\n        \"POST\",\n        \"/admin/verifyaccount/accept\",\n        { userId: item.id },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Account Verified Successfully\");\n            document.getElementById(item.id).style.display = \"none\";\n          } else {\n            alert(\"Error during account verification\");\n          }\n        }\n      );\n    }\n  };\n\n  rejectUser = (item) => {\n    let confirmation = window.confirm(\"Are you sure you want to reject?\");\n\n    if (confirmation) {\n      http(\n        \"POST\",\n        \"/admin/verifyaccount/reject\",\n        { userId: item.id },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Account Rejected Successfully\");\n            document.getElementById(item.id).style.display = \"none\";\n          } else {\n            alert(\"Error during account rejection\");\n          }\n        }\n      );\n    }\n  };\n\n  getTeacherList = () => {\n    let teachers = this.state.userData.map((item) => {\n      return (\n        <div className=\" mt-1 \" id={item.id}>\n          <ListItem height=\"180px\">\n            {{\n              left: (\n                <div>\n                  <span>\n                    <Row>\n                      <Col>\n                        <p class=\"text-left\">Name: {item.name}</p>\n                      </Col>\n                    </Row>\n                    <p class=\"text-left\">Email: {item.email}</p>\n                    <p class=\"text-left\">Department: {item.department}</p>\n                  </span>\n                  <Col>\n                    <br />\n                    <Button\n                      type=\"submit\"\n                      className=\" mr-3 btn btn-danger\"\n                      onClick={() => this.rejectUser(item)}\n                    >\n                      Reject\n                    </Button>\n                  </Col>\n                </div>\n              ),\n              right: (\n                <div>\n                  <p class=\"text-right\">\n                    RegisterNumber: {item.registerNumber}\n                  </p>\n                  <br />\n                  <br />\n                  <br />\n                  <div className=\"text-right\">\n                    <Button\n                      type=\"submit\"\n                      className=\" mr-3 btn btn-success\"\n                      onClick={() => this.acceptUser(item)}\n                    >\n                      Accept\n                    </Button>\n                  </div>\n                </div>\n              ),\n            }}\n          </ListItem>\n        </div>\n      );\n    });\n\n    return teachers;\n  };\n\n  render() {\n    return <>{this.getTeacherList()}</>;\n  }\n}\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Message/Messagelist.js",["388","389"],"import React from \"react\";\nimport Message from \"./Message\";\n\nimport http from \"../../../../shared/http\";\n\nclass Messagelist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messages: [],\n      replayedMessages: [],\n    };\n  }\n\n  //Get messages form server\n  getMessages = () => {\n    http(\"GET\", \"/admin/messages\", {}, (res) => {\n      if (res.status == 200) {\n        let replayedMessages = [];\n        let messages = [];\n\n        //Setting replayed messages\n        for (let message of res.data) {\n          console.log(message);\n          if (message.reply && message.reply != \"\") {\n            //Replayed message\n            replayedMessages.push(message);\n          } else {\n            //message not replayed\n            messages.push(message);\n          }\n        }\n        this.setState({ messages, replayedMessages });\n      } else alert(res.data);\n    });\n  };\n\n  componentDidMount() {\n    this.getMessages();\n  }\n\n  render() {\n    let messages = this.state.messages.map((message) => {\n      return <Message message={message} />;\n    });\n\n    let replayed = this.state.replayedMessages.map((message) => {\n      return <Message message={message} replayed />;\n    });\n\n    return (\n      <>\n        <div>{messages}</div>\n        <div>{replayed}</div>\n      </>\n    );\n  }\n}\n\nexport default Messagelist;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Message/Messagecontent.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Report/Report.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Institutionstructure/Institutionstructure.js",["390"],"import React, { Component } from \"react\";\nimport Department from \"./Department\";\nimport ClassBatch from \"./ClassBatch\";\nimport Subject from \"./Subjects\";\n\nimport { Route, Switch, withRouter } from \"react-router-dom\";\n\nclass Institutionstructure extends Component {\n  //Change route to class\n  departmentSelected = (departmentId) => {\n    this.props.history.push(\n      \"/admin/institutionStructure/class/\" + departmentId\n    );\n  };\n\n  render() {\n    return (\n      <div style={{ width: \"100%\" }}>\n        <Switch>\n          <Route path=\"/admin/institutionstructure/\" exact>\n            <Department departmentSelected={this.departmentSelected} />\n          </Route>\n\n          <Route path=\"/admin/institutionstructure/class/:departmentId\" exact>\n            <ClassBatch />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Institutionstructure);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Home/Home.js",["391","392","393"],"import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Row, Col, Form } from \"react-bootstrap\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\n\nimport http from \"../../../../shared/http\";\n\nimport \"./Home.css\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  //Creating ref to the form input\n  password = React.createRef();\n  confirm = React.createRef();\n\n  changePassword = () => {\n    //Getting the form values\n    let passwordValue = this.password.current.value;\n    let confirmValue = this.confirm.current.value;\n\n    //Validating password\n    if (passwordValue != \"\" && confirmValue != \"\") {\n      if (passwordValue === confirmValue)\n        http(\n          \"POST\",\n          \"/admin/changepassword\",\n          { password: passwordValue },\n          (res) => {\n            if (res.status === 200) {\n              alert(\"Password changed successfully\");\n            } else {\n              alert(res.data);\n            }\n          }\n        );\n      else alert(\"Password does not match\");\n    } else {\n      alert(\"Please fill all data\");\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container mt-5\">\n          <Jumbotron className=\"bg-secondary\" id=\"changePasswordDiv\">\n            <h1 className=\"text-light\">Change password</h1>\n            <Form>\n              <Form.Group as={Row} controlId=\"formPlaintextPassword\">\n                <Form.Label column>New Password</Form.Label>\n                <Col sm=\"10\">\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    ref={this.password}\n                  />\n                </Col>\n              </Form.Group>\n              <Form.Group as={Row} controlId=\"formPlaintextPassword\">\n                <Form.Label column>Confirm Password</Form.Label>\n                <Col sm=\"10\">\n                  <Form.Control\n                    type=\"password\"\n                    placeholder=\"Confirm\"\n                    ref={this.confirm}\n                  />\n                </Col>\n              </Form.Group>\n            </Form>\n\n            <p className=\"ml-2 text-right\">\n              <Button\n                className=\"ml-7\"\n                variant=\"primary\"\n                onClick={this.changePassword}\n              >\n                Save\n              </Button>\n            </p>\n          </Jumbotron>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/UserManagment/UserMangamenet.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Question.js",["394","395","396","397","398"],"import React, { Component } from \"react\";\r\nimport Mcq from \"./Mcq/Mcq\";\r\nimport \"./Question.css\";\r\nimport Text from \"./Text/Text\";\r\nimport Short from \"./Short/Short\";\r\nimport Essay from \"./Essay/Essay\";\r\nimport Header from \"./Header/Header\";\r\n\r\nexport default class Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      component: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Selecting question type\r\n    if (this.props.question.type == \"text\") {\r\n      this.setState({ component: <Text question={this.props.question} /> });\r\n    } else if (this.props.question.type == \"mcq\") {\r\n      this.setState({\r\n        component: (\r\n          <Mcq\r\n            question={this.props.question}\r\n            index={this.props.index}\r\n            examMode={this.props.examMode}\r\n            optionChange={this.props.optionChange}\r\n          />\r\n        ),\r\n      });\r\n    } else if (this.props.question.type == \"short\") {\r\n      this.setState({\r\n        component: (\r\n          <Short\r\n            question={this.props.question}\r\n            index={this.props.index}\r\n            examMode={this.props.examMode}\r\n            canvasClick={this.props.canvasClick}\r\n            textChange={this.props.textChange}\r\n          />\r\n        ),\r\n      });\r\n    } else if (this.props.question.type == \"essay\") {\r\n      this.setState({\r\n        component: (\r\n          <Essay\r\n            question={this.props.question}\r\n            index={this.props.index}\r\n            examMode={this.props.examMode}\r\n            canvasClick={this.props.canvasClick}\r\n            textChange={this.props.textChange}\r\n          />\r\n        ),\r\n      });\r\n    } else if (this.props.question.type == \"header\") {\r\n      this.setState({\r\n        component: <Header question={this.props.question} />,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id={this.props.question.id}\r\n        onClick={this.props.click}\r\n        className=\"question list-group-item list-group-item-action\"\r\n        data-toggle={this.props.examMode ? undefined : \"list\"}\r\n      >\r\n        {this.state.component}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/TeacherProfile/VerifyStudent.js",["399","400","401"],"import React, { Component } from \"react\";\nimport ListItem from \"../../ui-elements/ListItem/ListItem\";\nimport NavBar from \"../../ui-elements/navBar/NavBar\";\nimport { Row, Col, Button } from \"react-bootstrap\";\n\nimport \"./VerifyStudent.css\";\nimport http from \"../../../shared/http\";\n\nclass VerifyStudent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      studentData: [],\n    };\n  }\n\n  //Get the list of students in the class\n  getStudentData = () => {\n    http(\"GET\", \"/teacher/profile/verifystudents\", {}, (res) => {\n      if (res.status == 200) {\n        this.setState({ studentData: res.data }, () => {\n          this.setUpStudentList();\n        });\n      } else {\n        alert(\"Error in fetching student account details\");\n      }\n    });\n  };\n\n  //Setup the list items for the students\n  setUpStudentList = () => {\n    return this.state.studentData.map((student, index, array) => {\n      return (\n        <div key={student.id} id={student.id}>\n          <ListItem height=\"180px\">\n            {{\n              left: (\n                <div>\n                  <span>\n                    <Row>\n                      <Col>\n                        <p class=\"text-left\">Name : {student.name} </p>\n                      </Col>\n                    </Row>\n                    <p class=\"text-left\">Email: {student.email}</p>\n                    <p class=\"text-left\">Class: {student.Class}</p>\n                    <p class=\"text-left\">Batch: {student.batch}</p>\n                  </span>{\" \"}\n                  <Col>\n                    <Button\n                      type=\"submit\"\n                      className=\" mr-3 btn btn-danger\"\n                      onClick={() => this.rejectStudent(student)}\n                    >\n                      Reject\n                    </Button>\n                  </Col>\n                </div>\n              ),\n              right: (\n                <div>\n                  <p>Admision Number: {student.registerNumber}</p>\n                  <p>Parentemail: {student.parentEmail}</p>\n                  <br />\n                  <br />\n                  <div className=\"text-right\">\n                    <Button\n                      type=\"submit\"\n                      className=\" mr-3 btn btn-success\"\n                      onClick={() => this.acceptStudent(student)}\n                    >\n                      Accept\n                    </Button>\n                  </div>\n                </div>\n              ),\n            }}\n          </ListItem>\n        </div>\n      );\n    });\n  };\n\n  //Reject a student account\n  rejectStudent = (item) => {\n    let confirmation = window.confirm(\"Are you sure you want to reject?\");\n\n    if (confirmation) {\n      http(\n        \"POST\",\n        \"/teacher/profile/verifystudents/reject\",\n        { userId: item.id },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Account Rejected Successfully\");\n            document.getElementById(item.id).style.display = \"none\";\n          } else {\n            alert(\"Error during account rejection\");\n          }\n        }\n      );\n    }\n  };\n\n  //Accept a student account\n  acceptStudent = (item) => {\n    let confirmation = window.confirm(\"Are you sure you want to Accept?\");\n\n    if (confirmation) {\n      http(\n        \"POST\",\n        \"/teacher/profile/verifystudents/accept\",\n        { userId: item.id },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Account Accepted Successfully\");\n            document.getElementById(item.id).style.display = \"none\";\n          } else {\n            alert(\"Error during account verification\");\n          }\n        }\n      );\n    }\n  };\n\n  componentDidMount() {\n    this.getStudentData();\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar>\n          {{\n            left: (\n              <h5>\n                <Button\n                  variant=\"primary\"\n                  className=\"btn btn-primary mr-3\"\n                  size=\"sm\"\n                  onClick={() => {\n                    window.history.back();\n                  }}\n                >\n                  {\"<\"}\n                </Button>\n                Verify Students\n              </h5>\n            ),\n          }}\n        </NavBar>\n        <div id=\"verifyStudentBody\">{this.setUpStudentList()}</div>\n      </div>\n    );\n  }\n}\n\nexport default VerifyStudent;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Institutionstructure/ClassBatch.js",["402","403","404","405","406","407","408","409"],"import React, { Component } from \"react\";\nimport { Button, Row, Form, Col, Modal } from \"react-bootstrap\";\n\nimport { FaMinus, FaPencilAlt, FaPlus } from \"react-icons/fa\";\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\nimport configureDialogBox from \"../../../../shared/dailogBox\";\nimport { withRouter } from \"react-router-dom\";\n\nimport http from \"../../../../shared/http\";\n\nclass ClassBatch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { classList: null };\n  }\n\n  //Global member variables\n  classToEdit = \"\";\n\n  //Creating necessary ref objects\n  newClassName = React.createRef();\n  newBatchName = React.createRef();\n  classNewName = React.createRef(); //for editing class name\n  batchNewName = React.createRef();\n\n  getClasses = () => {\n    //getting class data from db\n    http(\n      \"POST\",\n      \"/admin/institutionstructure/class\",\n      { department: this.props.match.params.departmentId },\n      async (res) => {\n        let classes = [...res.data];\n\n        //This will return options for the <select> to select HOD for each department\n        let getTeacherOptions = (cls) => {\n          //Get teachers in department options\n          let teacherOptions = [];\n          if (cls.teachers) {\n            teacherOptions = cls.teachers.map((teacher, index, array) => {\n              return <option value={teacher._id}>{teacher.name}</option>;\n            });\n          }\n\n          return (\n            <>\n              {/* //Setting Mentor option */}\n              {cls.assignedMentor ? (\n                <option value={cls.assignedMentor._id} selected>\n                  {cls.assignedMentor.name}\n                </option>\n              ) : (\n                <option selected>NO MENTOR</option>\n              )}\n              {teacherOptions}\n            </>\n          );\n        };\n\n        let classList = classes.map((Class, index) => {\n          // let Class = classes[key];\n\n          return (\n            <ListItem height=\"120px\">\n              {{\n                left: (\n                  <div className=\"p-1 \">\n                    <Form className=\"md-6\">\n                      <Form.Group controlId=\"formBasicCheckbox\">\n                        <Row>\n                          <Col>\n                            <Form.Label className=\"text-dark\">\n                              {Class.name}\n                            </Form.Label>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col>\n                            <Form.Label className=\"text-dark\">\n                              {Class.batch}\n                            </Form.Label>\n                          </Col>\n                        </Row>\n                        <Row>\n                          <Col>\n                            <Form.Label className=\"text-dark\">\n                              Mentor:\n                            </Form.Label>\n                          </Col>\n                          <Col>\n                            <Form.Control\n                              as=\"select\"\n                              defaultValue=\"Class Mentor\"\n                              placeholder=\"Class Mentor\"\n                              style={{ width: \"200px\" }}\n                              onChange={(event) => {\n                                this.changeMentor(event, Class.id);\n                              }}\n                            >\n                              {getTeacherOptions(Class)}\n                            </Form.Control>\n                          </Col>\n                        </Row>\n                      </Form.Group>\n                    </Form>\n                  </div>\n                ),\n                right: (\n                  <div>\n                    <Button\n                      className=\"mr-4 btn btn-danger\"\n                      onClick={() => {\n                        this.removeClass(Class.id);\n                      }}\n                    >\n                      <FaMinus />\n                    </Button>\n\n                    <a\n                      href=\"#\"\n                      data-toggle=\"modal\"\n                      data-target=\"#editclass\"\n                      style={{ color: \"white\" }}\n                    >\n                      <Button\n                        className=\"btn btn-secondary\"\n                        onClick={() => {\n                          this.setEditingClass(Class.id);\n                        }}\n                      >\n                        <FaPencilAlt />\n                      </Button>{\" \"}\n                    </a>\n                  </div>\n                ),\n              }}\n            </ListItem>\n          );\n        });\n        this.setState({ classList });\n      }\n    );\n  };\n\n  //To add a new class\n  addClass = () => {\n    let className = this.newClassName.current.value;\n    let batchName = this.newBatchName.current.value;\n\n    if (className == \"\" || batchName == \"\") {\n      alert(\"Please fill all data\");\n    } else {\n      http(\n        \"POST\",\n        \"/admin/institutionstructure/class/add\",\n        {\n          className,\n          batchName,\n          department: this.props.match.params.departmentId,\n        },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Class addedd successfully\");\n          } else {\n            alert(res.data);\n          }\n        }\n      );\n    }\n  };\n\n  setEditingClass = (classId) => {\n    this.classToEdit = classId;\n  };\n\n  //Edit an existing class\n  editClass = () => {\n    let newName = this.classNewName.current.value; //Getting new name\n    let newBatch = this.batchNewName.current.value;\n\n    if (newName == \"\" || newBatch == \"\") {\n      alert(\"Please enter all data\");\n    } else {\n      http(\n        \"POST\",\n        \"/admin/institutionstructure/class/edit\",\n        { classId: this.classToEdit, newName, newBatch },\n        (res) => {\n          alert(res.data);\n        }\n      );\n    }\n  };\n\n  //Remove a class\n  removeClass = (classId) => {\n    http(\n      \"POST\",\n      \"/admin/institutionstructure/class/remove\",\n      { classId },\n      (res) => {\n        alert(res.data);\n      }\n    );\n  };\n\n  //Change Mentor of a department\n  changeMentor = (event, classId) => {\n    http(\n      \"POST\",\n      \"/admin/institutionstructure/class/changementor\",\n      {\n        classId,\n        mentor: event.target.value,\n      },\n      (res) => {\n        alert(res.data);\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.getClasses();\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {/* Configuring The add department */}\n          {configureDialogBox(\n            \"addclass\",\n            \"ADD CLASS\",\n            <>\n              <form>\n                <label className=\"black\" for=\"class\">\n                  Class Name:{\" \"}\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"class\"\n                  id=\"class\"\n                  ref={this.newClassName}\n                ></input>\n                <label className=\"black\" for=\"batch\">\n                  Batch:{\" \"}\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"batch\"\n                  id=\"batch\"\n                  ref={this.newBatchName}\n                ></input>\n              </form>\n            </>,\n            <>\n              <button className=\"btn btn-primary\" onClick={this.addClass}>\n                OK\n              </button>\n            </>\n          )}\n          {/* Configuring The edit class */}\n          {configureDialogBox(\n            \"editclass\",\n            \"EDIT CLASS\",\n            <>\n              <form>\n                <label className=\"black\" for=\"className\">\n                  Class Name:{\" \"}\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"className\"\n                  id=\"className\"\n                  ref={this.classNewName}\n                ></input>\n                <label className=\"black\" for=\"batch\">\n                  Batch:{\" \"}\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"batch\"\n                  id=\"batch\"\n                  ref={this.batchNewName}\n                ></input>\n              </form>\n            </>,\n            <>\n              <button className=\"btn btn-primary\" onClick={this.editClass}>\n                EDIT\n              </button>\n            </>\n          )}\n        </div>\n        {this.state.classList}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(ClassBatch);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Message/Message.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Institutionstructure/Department.js",["410","411","412","413","414","415"],"import React from \"react\";\nimport { Button, Form, Col, Row } from \"react-bootstrap\";\nimport { FaMinus, FaPencilAlt } from \"react-icons/fa\";\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\nimport configureDialogBox from \"../../../../shared/dailogBox\";\nimport \"./Department.css\";\nimport http from \"../../../../shared/http\";\nimport $ from \"jquery\";\n\nclass Departments extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      departmentList: null,\n    };\n  }\n\n  //Global member variables\n  departmentToEdit = \"\";\n\n  //Creating necessary ref objects\n  newDepartmentName = React.createRef();\n  departmentNewName = React.createRef(); //for editing department name\n\n  getDepartments = () => {\n    //getting department data from db\n    http(\"GET\", \"/admin/institutionstructure/department\", {}, async (res) => {\n      let departments = { ...res.data };\n\n      //This will return options for the <select> to select HOD for each department\n      let getHodOptions = (department) => {\n        //Get teachers in department options\n        let teacherOptions = [];\n        if (department.teachers) {\n          teacherOptions = department.teachers.map((teacher, index, array) => {\n            return <option value={teacher._id}>{teacher.name}</option>;\n          });\n        }\n\n        return (\n          <>\n            {/* //Setting HOD option */}\n            {department.assignedHod ? (\n              <option value={department.assignedHod._id} selected>\n                {department.assignedHod.name}\n              </option>\n            ) : (\n              <option selected>NO HOD</option>\n            )}\n            {teacherOptions}\n          </>\n        );\n      };\n\n      let departmentList = Object.keys(departments).map((key, index) => {\n        let department = departments[key];\n\n        return (\n          <div\n            onClick={(event) => {\n              if (event.target.id == \"list-item-container\")\n                this.props.departmentSelected(department.id);\n            }}\n          >\n            <ListItem height=\"90px\">\n              {{\n                left: (\n                  <Form className=\"md-6\">\n                    <Form.Group controlId=\"formBasicCheckbox\">\n                      <Row>\n                        <Col>\n                          <Form.Label className=\"text-dark\">{key}</Form.Label>\n                        </Col>\n                      </Row>\n                      <Row>\n                        <Col>\n                          <Form.Label className=\"text-dark\">\n                            Head of the department:\n                          </Form.Label>\n                        </Col>\n                        <Col>\n                          <Form.Control\n                            as=\"select\"\n                            defaultValue=\"Department\"\n                            placeholder=\"Department\"\n                            style={{ width: \"200px\" }}\n                            onChange={(e) => {\n                              this.changeHod(e, department.id);\n                            }}\n                          >\n                            {getHodOptions(department)}\n                          </Form.Control>\n                        </Col>\n                      </Row>\n                    </Form.Group>\n                  </Form>\n                ),\n                right: (\n                  <div>\n                    <Button\n                      className=\"btn btn-danger mr-3\"\n                      data-id={department.id}\n                      onClick={() => {\n                        this.removeDepartment(department.id);\n                      }}\n                    >\n                      <FaMinus />\n                    </Button>\n                    <a\n                      href=\"#\"\n                      data-toggle=\"modal\"\n                      data-target=\"#editdept\"\n                      style={{ color: \"white\" }}\n                    >\n                      <Button\n                        className=\"btn btn-secondary\"\n                        data-id={department.id}\n                        onClick={() => {\n                          this.setEditingDepartment(department.id);\n                        }}\n                      >\n                        <FaPencilAlt />\n                      </Button>\n                    </a>\n                  </div>\n                ),\n              }}\n            </ListItem>\n          </div>\n        );\n      });\n      this.setState({ departmentList });\n    });\n  };\n\n  //To add a new department\n  addDepartment = () => {\n    let departmentName = this.newDepartmentName.current.value;\n\n    if (departmentName == \"\") {\n      alert(\"Please fill department name\");\n    } else {\n      http(\n        \"POST\",\n        \"/admin/institutionstructure/department/add\",\n        { departmentName },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Department addedd successfully\");\n          } else {\n            alert(res.data);\n          }\n        }\n      );\n    }\n  };\n\n  setEditingDepartment = (departmentID) => {\n    this.departmentToEdit = departmentID;\n  };\n\n  //Edit an existing department\n  editDepartment = () => {\n    let newName = this.departmentNewName.current.value; //Getting new name\n\n    if (newName == \"\") {\n      alert(\"Please enter a new name for the department\");\n    } else {\n      http(\n        \"POST\",\n        \"/admin/institutionstructure/department/edit\",\n        { departmentId: this.departmentToEdit, newName },\n        (res) => {\n          alert(res.data);\n        }\n      );\n    }\n  };\n\n  //Remove a department\n  removeDepartment = (departmentId) => {\n    http(\n      \"POST\",\n      \"/admin/institutionstructure/department/remove\",\n      { departmentId },\n      (res) => {\n        alert(res.data);\n      }\n    );\n  };\n\n  //Change HOD of a department\n  changeHod = (event, departmentId) => {\n    http(\n      \"POST\",\n      \"/admin/institutionstructure/department/changehod\",\n      {\n        departmentId,\n        hod: event.target.value,\n      },\n      (res) => {\n        alert(res.data);\n      }\n    );\n  };\n\n  componentDidMount() {\n    //get department data from server\n    this.getDepartments();\n  }\n\n  render() {\n    return (\n      <div id=\"departmentList\">\n        <div>\n          {/* Configuring The add department */}\n          {configureDialogBox(\n            \"adddept\",\n            \"ADD DEPARTMENT\",\n            <>\n              <label className=\"black\" for=\"dept\">\n                Name of department:{\" \"}\n              </label>\n              <input\n                type=\"text\"\n                name=\"dept\"\n                id=\"dept\"\n                ref={this.newDepartmentName}\n              ></input>\n            </>,\n            <>\n              <button className=\"btn btn-primary\" onClick={this.addDepartment}>\n                ADD\n              </button>\n            </>\n          )}\n          {/* Configuring The edit department */}\n          {configureDialogBox(\n            \"editdept\",\n            \"EDIT DEPARTMENT\",\n            <>\n              <form>\n                <label className=\"black\" for=\"dept\">\n                  Name of department:{\" \"}\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"dept\"\n                  id=\"dept\"\n                  ref={this.departmentNewName}\n                ></input>\n                <br />\n              </form>\n            </>,\n            <>\n              <button className=\"btn btn-primary\" onClick={this.editDepartment}>\n                OK\n              </button>\n            </>\n          )}\n        </div>\n\n        {this.state.departmentList}\n      </div>\n    );\n  }\n}\n\nexport default Departments;\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/Institutionstructure/Subjects.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/UserManagment/Students.js",["416","417","418","419","420","421","422"],"import React, { Component } from \"react\";\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\nimport { Button } from \"react-bootstrap\";\nimport http from \"../../../../shared/http\";\nimport $ from \"jquery\";\nimport Search from \"../../../ui-elements/Search/Search\";\n\nexport default class Students extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userData: [],\n    };\n  }\n\n  //Delete a user account\n  deleteClickListener = (item) => {\n    let confirmation = window.confirm(\"Are you sure to want to delete?\");\n\n    if (confirmation) {\n      http(\n        \"POST\",\n        \"/admin/usermanagement/delete\",\n        { userId: item.id },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Student account deleted successfully\");\n\n            document.getElementById(item.id).style.display = \"none\";\n          } else {\n            alert(res.data);\n          }\n        }\n      );\n    }\n  };\n\n  //Disable / Enable account\n  disableClickListener = (event, item) => {\n    if (event.target.value == \"Disable\") {\n      let confirmation = window.confirm(\"Are sure to Disable account?\");\n\n      if (confirmation) {\n        http(\n          \"POST\",\n          \"/admin/usermanagement/disable\",\n          { userId: item.id },\n          (res) => {\n            if (res.status == 200) {\n              alert(\"Student Account disabled Successfully\");\n              this.changeToEnable(item);\n            } else {\n              alert(res.data);\n            }\n          }\n        );\n      }\n    } else {\n      let confirmation = window.confirm(\"Are you sure to Enable account?\");\n\n      if (confirmation) {\n        http(\n          \"POST\",\n          \"/admin/usermanagement/enable\",\n          { userId: item.id },\n          (res) => {\n            if (res.status == 200) {\n              alert(\"Student Account enabled Successfully\");\n              this.changeToDisable(item);\n            } else {\n              alert(res.data);\n            }\n          }\n        );\n      }\n    }\n  };\n\n  //Change style of button\n  changeToDisable = (student) => {\n    let button = $(\"#\" + student.id + \" input[name='changestatus']\");\n    button.attr(\"value\", \"Disable\");\n    button.removeClass(\"btn-success\");\n    button.addClass(\"btn-warning\");\n  };\n\n  changeToEnable = (student) => {\n    let button = $(\"#\" + student.id + \" input[name='changestatus']\");\n    button.attr(\"value\", \"Enable\");\n    button.removeClass(\"btn-warning\");\n    button.addClass(\"btn-success\");\n  };\n\n  getStudentList = () => {\n    let students = this.state.userData.map((item) => {\n      console.log(item);\n      return (\n        <div className=\"mt-1\" id={item.id}>\n          <ListItem height=\"180px\">\n            {{\n              left: (\n                <div>\n                  <p>Name: {item.name}</p>\n\n                  <p>Email: {item.email}</p>\n                  <p>Parent Email: {item.parentEmail}</p>\n                  <p>Register Number: {item.registerNumber}</p>\n\n                  <Button\n                    type=\"submit\"\n                    className=\" mr-3 btn btn-danger\"\n                    onClick={() => this.deleteClickListener(item)}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              ),\n              right: (\n                <div class=\"text-right\">\n                  <p>Class: {item.class}</p>\n                  <p>Batch: {item.batch}</p>\n                  <br />\n                  <br />\n                  <input\n                    type=\"button\"\n                    className={\n                      item.accountStatus == \"disabled\"\n                        ? \"mr-3 btn btn-success\"\n                        : \"mr-3 btn btn-warning\"\n                    }\n                    onClick={(event) => this.disableClickListener(event, item)}\n                    value={\n                      item.accountStatus == \"disabled\" ? \"Enable\" : \"Disable\"\n                    }\n                  ></input>\n                </div>\n              ),\n            }}\n          </ListItem>\n        </div>\n      );\n    });\n    return students;\n  };\n\n  getUserData = () => {\n    http(\"GET\", \"/admin/usermanagement/student\", null, (res) => {\n      if (res.status == 200) {\n        this.setState({ userData: res.data });\n      } else {\n        alert(\"Error during fetching student data from server\");\n      }\n    });\n  };\n\n  //Search\n  search = (searchText) => {\n    if (searchText) {\n      http(\n        \"POST\",\n        \"/admin/usermanagement/student/search\",\n        { searchString: searchText },\n        (res) => {\n          this.setState({ userData: res.data });\n        }\n      );\n    } else {\n      //Return all users without filtering\n      this.getUserData();\n    }\n  };\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  render() {\n    return (\n      <>\n        <Search click={this.search} />\n        {this.getStudentList()}\n      </>\n    );\n  }\n}\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/admin/pages/UserManagment/Teachers.js",["423","424","425","426","427","428","429"],"import React, { Component } from \"react\";\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\nimport { Button } from \"react-bootstrap\";\nimport http from \"../../../../shared/http\";\nimport $ from \"jquery\";\nimport Search from \"../../../ui-elements/Search/Search\";\n\nexport default class Teachers extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userData: [],\n    };\n  }\n\n  //Delete a user account\n  deleteClickListener = (item) => {\n    let confirmation = window.confirm(\"Are you sure to want to delete?\");\n\n    if (confirmation) {\n      http(\n        \"POST\",\n        \"/admin/usermanagement/delete\",\n        { userId: item.id },\n        (res) => {\n          if (res.status == 200) {\n            alert(\"Teacher account deleted successfully\");\n\n            document.getElementById(item.id).style.display = \"none\";\n          } else {\n            alert(res.data);\n          }\n        }\n      );\n    }\n  };\n\n  //Disable / Enable account\n  disableClickListener = (event, item) => {\n    if (event.target.value == \"Disable\") {\n      let confirmation = window.confirm(\"Are sure to Disable account?\");\n\n      if (confirmation) {\n        http(\n          \"POST\",\n          \"/admin/usermanagement/disable\",\n          { userId: item.id },\n          (res) => {\n            if (res.status == 200) {\n              alert(\"Teacher Account disabled Successfully\");\n              this.changeToEnable(item);\n            } else {\n              alert(res.data);\n            }\n          }\n        );\n      }\n    } else {\n      let confirmation = window.confirm(\"Are you sure to Enable account?\");\n\n      if (confirmation) {\n        http(\n          \"POST\",\n          \"/admin/usermanagement/enable\",\n          { userId: item.id },\n          (res) => {\n            if (res.status == 200) {\n              alert(\"Teacher Account enabled Successfully\");\n              this.changeToDisable(item);\n            } else {\n              alert(res.data);\n            }\n          }\n        );\n      }\n    }\n  };\n\n  //Change style of button\n  changeToDisable = (teacher) => {\n    let button = $(\"#\" + teacher.id + \" input[name='changestatus']\");\n    button.attr(\"value\", \"Disable\");\n    button.removeClass(\"btn-success\");\n    button.addClass(\"btn-warning\");\n  };\n\n  changeToEnable = (teacher) => {\n    let button = $(\"#\" + teacher.id + \" input[name='changestatus']\");\n    button.attr(\"value\", \"Enable\");\n    button.removeClass(\"btn-warning\");\n    button.addClass(\"btn-success\");\n  };\n\n  //Return jsx to render the list of teachers\n  getTeacherList = () => {\n    let teachers = this.state.userData.map((item) => {\n      return (\n        <div className=\" mt-1 \" id={item.id}>\n          <ListItem height=\"180px\">\n            {{\n              left: (\n                <div>\n                  <span>\n                    <p class=\"text-left\">Name: {item.name}</p>\n\n                    <p class=\"text-left\">Email: {item.email}</p>\n                    <p class=\"text-left\">Department: {item.department}</p>\n                  </span>{\" \"}\n                  <Button\n                    type=\"submit\"\n                    className=\" mr-3 btn btn-danger\"\n                    onClick={() => this.deleteClickListener(item)}\n                  >\n                    Delete\n                  </Button>\n                </div>\n              ),\n              right: (\n                <div class=\"text-right\">\n                  <p class=\"text-right\">\n                    Register Number: {item.registerNumber}\n                  </p>\n                  <br />\n                  <br />\n                  <br />\n                  <input\n                    type=\"button\"\n                    name=\"changestatus\"\n                    className={\n                      item.accountStatus == \"disabled\"\n                        ? \"mr-3 btn btn-success\"\n                        : \"mr-3 btn btn-warning\"\n                    }\n                    onClick={(event) => this.disableClickListener(event, item)}\n                    value={\n                      item.accountStatus == \"disabled\" ? \"Enable\" : \"Disable\"\n                    }\n                  ></input>\n                </div>\n              ),\n            }}\n          </ListItem>\n        </div>\n      );\n    });\n\n    return teachers;\n  };\n\n  //Get teacher user info from server\n  getUserData = () => {\n    http(\"GET\", \"/admin/usermanagement/teacher\", null, (res) => {\n      if (res.status == 200) {\n        this.setState({ userData: res.data });\n      } else {\n        alert(\"Error during fetching teacher data from server\");\n      }\n    });\n  };\n\n  //Search\n  search = (searchText) => {\n    if (searchText) {\n      http(\n        \"POST\",\n        \"/admin/usermanagement/teacher/search\",\n        { searchString: searchText },\n        (res) => {\n          this.setState({ userData: res.data });\n        }\n      );\n    } else {\n      //Return all users without filtering\n      this.getUserData();\n    }\n  };\n\n  componentDidMount() {\n    this.getUserData();\n  }\n\n  render() {\n    return (\n      <>\n        <Search click={this.search} />\n        {this.getTeacherList()}\n      </>\n    );\n  }\n}\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/sigup/student/student.js",["430","431"],"import { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport http from \"../../../../shared/http\";\n\nimport \"./student.css\";\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateData: (payload) => dispatch({ type: \"updateSignupData\", payload }),\n    clearData: () => dispatch({ type: \"clearSignupData\" }),\n  };\n};\nclass Student extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      parentEmailError: null,\n      emailError: null,\n      classList: null,\n      classOptions: null,\n      batchOptions: null,\n    };\n  }\n\n  inputValues = {};\n\n  validateEmail = (email) => {\n    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  validateForm = () => {\n    if (\n      this.inputValues.name &&\n      this.inputValues.registerNumber &&\n      this.inputValues.class &&\n      this.inputValues.batch &&\n      this.inputValues.email &&\n      this.inputValues.parentEmail\n    ) {\n      this.setState({ error: null });\n      if (this.validateEmail(this.inputValues.email)) {\n        this.setState({ emailError: null });\n      } else {\n        this.setState({ emailError: <p>Enter a valid email address</p> });\n      }\n\n      if (this.validateEmail(this.inputValues.parentEmail)) {\n        this.setState({ parentEmailError: null });\n      } else {\n        this.setState({ parentEmailError: <p>Enter a valid email address</p> });\n      }\n\n      if (\n        this.validateEmail(this.inputValues.email) &&\n        this.validateEmail(this.inputValues.parentEmail)\n      ) {\n        //Successful validation\n        return true;\n      } else {\n        return false;\n      }\n    } else {\n      this.setState({\n        error: <p style={{ color: \"black\" }}>PLEASE FILL ALL DATA</p>,\n      });\n      return false;\n    }\n  };\n\n  onValueChange = (event) => {\n    this.inputValues[event.target.name] = event.target.value;\n    let valid = this.validateForm();\n\n    if (valid) {\n      this.props.updateData({ accountType: \"student\", ...this.inputValues });\n    } else {\n      this.props.clearData();\n    }\n\n    if (event.target.name == \"class\") {\n      //Setup batch details based on the selected class\n      this.setupBatchOptions();\n    }\n  };\n\n  setView = () => {\n    if (this.props.google) {\n      document\n        .getElementById(\"email\")\n        .setAttribute(\"value\", this.props.data.email);\n      document\n        .getElementById(\"name\")\n        .setAttribute(\"value\", this.props.data.name);\n\n      document.getElementById(\"email\").setAttribute(\"disabled\", \"true\");\n      document.getElementById(\"name\").setAttribute(\"disabled\", \"true\");\n    }\n  };\n\n  //Get Class data from the database\n  getClasses = () => {\n    http(\"GET\", \"/login/getclasses\", {}, (res) => {\n      if (res.status == 200) {\n        this.setState({ classList: res.data });\n        this.setupClassOptions();\n      }\n    });\n  };\n\n  //Setup the options for the <select> for classes\n  setupClassOptions = () => {\n    //Options JSX\n    let options = [];\n\n    options = Object.keys(this.state.classList).map((key, array) => {\n      return (\n        <>\n          <option value={key}>{key}</option>\n        </>\n      );\n    });\n\n    //Setting class list options to display\n    this.setState({ classOptions: options });\n  };\n\n  //Setup the options for the <select> for batches based on the selected Class\n  setupBatchOptions = () => {\n    //Currently selected class\n    let Class = this.inputValues.class;\n\n    //Getting batches of the selected class\n    let batches = this.state.classList[Class].batches;\n\n    let options = batches.map((batch, index, array) => {\n      return (\n        <>\n          <option value={batch}>{batch}</option>\n        </>\n      );\n    });\n\n    //Setting options as state to diaplay it in screen\n    this.setState({ batchOptions: options });\n  };\n\n  componentDidMount() {\n    this.props.clearData();\n    this.setView();\n\n    //Get class info\n    this.getClasses();\n  }\n\n  render() {\n    if (this.props.google) {\n      this.inputValues.name = this.props.data.name;\n      this.inputValues.email = this.props.data.email;\n    }\n\n    return (\n      <div>\n        {this.state.error}\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"name\"\n          name=\"name\"\n          placeholder=\"Name\"\n          onChange={this.onValueChange}\n        />\n        <input\n          type=\"text\"\n          className=\"form-control mt-3\"\n          id=\"admission-number\"\n          name=\"registerNumber\"\n          placeholder=\"Admission Number\"\n          onChange={this.onValueChange}\n        />\n        <select\n          className=\"form-select mt-3\"\n          aria-label=\"Default select example\"\n          id=\"class\"\n          name=\"class\"\n          onChange={this.onValueChange}\n        >\n          <option value=\"\" selected>\n            --CLASS--\n          </option>\n          {this.state.classOptions}\n        </select>\n        <select\n          className=\"form-select mt-3\"\n          aria-label=\"Default select example\"\n          id=\"batch\"\n          onChange={this.onValueChange}\n          name=\"batch\"\n        >\n          <option value=\"\" selected>\n            --BATCH--\n          </option>\n          {this.state.batchOptions}\n        </select>\n        <input\n          type=\"email\"\n          className=\"form-control mt-3\"\n          id=\"email\"\n          name=\"email\"\n          placeholder=\"Email\"\n          onChange={this.onValueChange}\n        />\n        {this.state.emailError}\n        <input\n          type=\"email\"\n          className=\"form-control mt-3\"\n          id=\"parent-email\"\n          name=\"parentEmail\"\n          placeholder=\"Parent Email\"\n          onChange={this.onValueChange}\n        />\n        {this.state.parentEmailError}\n      </div>\n    );\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Student);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/login/sigup/teacher/teacher.js",["432"],"import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport http from \"../../../../shared/http\";\n\nimport \"./teacher.css\";\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateData: (payload) => dispatch({ type: \"updateSignupData\", payload }),\n    clearData: () => dispatch({ type: \"clearSignupData\" }),\n  };\n};\nclass Teacher extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      emailValidation: null,\n      departmentList: null,\n      departments: null,\n    };\n  }\n\n  inputValues = {};\n\n  validateForm = () => {\n    if (\n      this.inputValues.name &&\n      this.inputValues.registerNumber &&\n      this.inputValues.department &&\n      this.inputValues.email\n    ) {\n      this.setState({ error: null });\n      if (\n        /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(this.inputValues.email)\n      ) {\n        this.setState({ emailValidation: null });\n\n        //Successful validation\n        return true;\n      } else {\n        this.setState({ emailValidation: <p>Enter a valid email address</p> });\n        return false;\n      }\n    } else {\n      this.setState({\n        error: <p style={{ color: \"black\" }}>PLEASE FILL ALL DATA</p>,\n      });\n      return false;\n    }\n  };\n\n  onValueChange = (event) => {\n    this.inputValues[event.target.name] = event.target.value;\n    let valid = this.validateForm();\n\n    if (valid) {\n      this.props.updateData({ accountType: \"teacher\", ...this.inputValues });\n    } else {\n      this.props.clearData();\n    }\n  };\n\n  setView = () => {\n    if (this.props.google) {\n      document\n        .getElementById(\"email\")\n        .setAttribute(\"value\", this.props.data.email);\n      document\n        .getElementById(\"name\")\n        .setAttribute(\"value\", this.props.data.name);\n\n      document.getElementById(\"email\").setAttribute(\"disabled\", \"true\");\n      document.getElementById(\"name\").setAttribute(\"disabled\", \"true\");\n    }\n  };\n\n  //Get department details from db\n  getDepartmentList = () => {\n    http(\"GET\", \"/login/departments\", null, (res) => {\n      if (res.status == 200) {\n        this.setState({ departments: res.data });\n        this.setupDepartmentList();\n      } else {\n        alert(\"Error returning department list\");\n      }\n    });\n  };\n\n  //Setup JSX element to show the department list using <option> tag\n  setupDepartmentList = () => {\n    let departmentList = this.state.departments.map(\n      (department, index, array) => {\n        return <option value={department._id}>{department.name}</option>;\n      }\n    );\n\n    this.setState({ departmentList });\n  };\n\n  componentDidMount() {\n    this.props.clearData();\n    this.setView();\n    this.getDepartmentList();\n  }\n\n  render() {\n    if (this.props.google) {\n      this.inputValues.name = this.props.data.name;\n      this.inputValues.email = this.props.data.email;\n    }\n\n    return (\n      <div>\n        {this.state.error}\n        <input\n          type=\"text\"\n          class=\"form-control\"\n          id=\"name\"\n          placeholder=\"Name\"\n          name=\"name\"\n          onChange={this.onValueChange}\n        />\n        <input\n          type=\"text\"\n          className=\"form-control mt-3\"\n          id=\"id-number\"\n          name=\"registerNumber\"\n          onChange={this.onValueChange}\n          placeholder=\"ID Number\"\n        />\n        <select\n          className=\"form-select mt-3\"\n          aria-label=\"Default select example\"\n          name=\"department\"\n          onChange={this.onValueChange}\n          id=\"department\"\n        >\n          <option selected value=\"\">\n            --SELECT DEPARTMENT--\n          </option>\n          {this.state.departmentList}\n        </select>\n        <input\n          type=\"email\"\n          className=\"form-control mt-3\"\n          id=\"email\"\n          name=\"email\"\n          onChange={this.onValueChange}\n          placeholder=\"Email\"\n        />\n        {this.state.emailValidation}\n      </div>\n    );\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Teacher);\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Essay/Essay.js",["433","434"],"import React, { Component } from \"react\";\nimport \"./Essay.css\";\n\nexport default class Essay extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"text-right\">{this.props.question.marks} Mark(s)</div>\n        {this.props.index ? this.props.index + \". \" : null}\n        {this.props.question.question}\n\n        {this.props.question.canvas ? (\n          <div className=\"questionCanvas\">\n            <img src={this.props.question.canvas}></img>\n          </div>\n        ) : null}\n\n        {this.props.question.image ? (\n          <div className=\"questionImage\">\n            <img src={this.props.question.image}></img>\n          </div>\n        ) : null}\n\n        {/* Display the exam wring system if the question is in examMode */}\n        {this.props.examMode ? (\n          <>\n            <br />\n            <hr />\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-sm-10\">\n                  <textarea\n                    placeholder=\"Your answer here\"\n                    name=\"essayQuestionAnswer\"\n                    rows=\"15\"\n                    onChange={(e) => {\n                      this.props.textChange(e.target.value);\n                    }}\n                  ></textarea>\n                </div>\n                <div className=\"col-sm-2\">\n                  <input\n                    type=\"button\"\n                    value=\"CANVAS\"\n                    className=\"btn btn-primary\"\n                    onClick={this.props.canvasClick}\n                  />\n                </div>\n              </div>\n            </div>\n          </>\n        ) : null}\n      </div>\n    );\n  }\n}\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Header/Header.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Text/Text.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Short/Short.js",["435","436"],"import React, { Component } from \"react\";\r\nimport \"./Short.css\";\r\n\r\nexport default class Short extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"text-right\">{this.props.question.marks} Mark(s)</div>\r\n        {this.props.index ? this.props.index + \". \" : null}\r\n        {this.props.question.question}\r\n        {this.props.question.canvas ? (\r\n          <div className=\"questionCanvas\">\r\n            <img src={this.props.question.canvas}></img>\r\n          </div>\r\n        ) : null}\r\n        {this.props.question.image ? (\r\n          <div className=\"questionImage\">\r\n            <img src={this.props.question.image}></img>\r\n          </div>\r\n        ) : null}\r\n        {/* Display the exam wring system if the question is in examMode */}\r\n        {this.props.examMode ? (\r\n          <>\r\n            <br />\r\n            <hr />\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Your answer here\"\r\n                    name=\"shortQuestionAnswer\"\r\n                    onChange={(e) => {\r\n                      this.props.textChange(e.target.value);\r\n                      this.forceUpdate();\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                  <input\r\n                    type=\"button\"\r\n                    value=\"CANVAS\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={this.props.canvasClick}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/Question/Mcq/Mcq.js",["437","438"],"import React, { Component } from \"react\";\r\nimport \"./Mcq.css\";\r\n\r\nexport default class Mcq extends Component {\r\n  render() {\r\n    let optionsList = this.props.question.options.map((option, index) => {\r\n      return (\r\n        <div class=\"form-check\" key={this.props.question.id + option.name}>\r\n          <input\r\n            class=\"form-check-input\"\r\n            type=\"radio\"\r\n            name=\"options\"\r\n            value={option.name}\r\n            checked={option.correct && !this.props.examMode ? true : undefined}\r\n            onChange={(e) => {\r\n              this.props.optionChange(e.target.value);\r\n            }}\r\n            disabled={!this.props.examMode}\r\n          />\r\n          <label class=\"form-check-label\" for=\"options\">\r\n            {option.name}\r\n          </label>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"text-right\">{this.props.question.marks} Mark(s)</div>\r\n        {this.props.index ? this.props.index + \". \" : null}\r\n        {this.props.question.question}\r\n\r\n        {this.props.question.canvas ? (\r\n          <div className=\"questionCanvas\">\r\n            <img src={this.props.question.canvas}></img>\r\n          </div>\r\n        ) : null}\r\n\r\n        {this.props.question.image ? (\r\n          <div className=\"questionImage\">\r\n            <img src={this.props.question.image}></img>\r\n          </div>\r\n        ) : null}\r\n\r\n        <div>{optionsList}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/ui-elements/Search/Search.js",[],"/mnt/media/WORKSPACE/PROJECT/yuvashiksha/src/components/teacher/previousExam/PreviousExam.js",[],{"ruleId":"439","replacedBy":"440"},{"ruleId":"441","replacedBy":"442"},{"ruleId":"443","severity":1,"message":"444","line":2,"column":25,"nodeType":"445","messageId":"446","endLine":2,"endColumn":33},{"ruleId":"443","severity":1,"message":"447","line":6,"column":8,"nodeType":"445","messageId":"446","endLine":6,"endColumn":15},{"ruleId":"448","severity":1,"message":"449","line":19,"column":24,"nodeType":"450","messageId":"451","endLine":19,"endColumn":26},{"ruleId":"443","severity":1,"message":"452","line":7,"column":10,"nodeType":"445","messageId":"446","endLine":7,"endColumn":14},{"ruleId":"443","severity":1,"message":"453","line":7,"column":16,"nodeType":"445","messageId":"446","endLine":7,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":30,"column":22,"nodeType":"450","messageId":"451","endLine":30,"endColumn":24},{"ruleId":"454","severity":1,"message":"455","line":45,"column":36,"nodeType":"456","messageId":"457","endLine":45,"endColumn":38},{"ruleId":"448","severity":1,"message":"449","line":19,"column":24,"nodeType":"450","messageId":"451","endLine":19,"endColumn":26},{"ruleId":"443","severity":1,"message":"453","line":7,"column":3,"nodeType":"445","messageId":"446","endLine":7,"endColumn":16},{"ruleId":"448","severity":1,"message":"449","line":19,"column":24,"nodeType":"450","messageId":"451","endLine":19,"endColumn":26},{"ruleId":"458","severity":1,"message":"459","line":65,"column":5,"nodeType":"460","messageId":"461","endLine":87,"endColumn":6},{"ruleId":"448","severity":1,"message":"449","line":88,"column":16,"nodeType":"450","messageId":"451","endLine":88,"endColumn":18},{"ruleId":"448","severity":1,"message":"449","line":130,"column":13,"nodeType":"450","messageId":"451","endLine":130,"endColumn":15},{"ruleId":"448","severity":1,"message":"449","line":146,"column":13,"nodeType":"450","messageId":"451","endLine":146,"endColumn":15},{"ruleId":"448","severity":1,"message":"449","line":146,"column":28,"nodeType":"450","messageId":"451","endLine":146,"endColumn":30},{"ruleId":"448","severity":1,"message":"449","line":149,"column":13,"nodeType":"450","messageId":"451","endLine":149,"endColumn":15},{"ruleId":"448","severity":1,"message":"449","line":52,"column":22,"nodeType":"450","messageId":"451","endLine":52,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":75,"column":14,"nodeType":"450","messageId":"451","endLine":75,"endColumn":16},{"ruleId":"462","severity":1,"message":"463","line":108,"column":15,"nodeType":"464","endLine":108,"endColumn":80},{"ruleId":"462","severity":1,"message":"463","line":111,"column":15,"nodeType":"464","endLine":115,"endColumn":16},{"ruleId":"462","severity":1,"message":"463","line":118,"column":15,"nodeType":"464","endLine":122,"endColumn":16},{"ruleId":"462","severity":1,"message":"463","line":125,"column":15,"nodeType":"464","endLine":129,"endColumn":16},{"ruleId":"462","severity":1,"message":"463","line":132,"column":15,"nodeType":"464","endLine":136,"endColumn":16},{"ruleId":"462","severity":1,"message":"463","line":139,"column":15,"nodeType":"464","endLine":143,"endColumn":16},{"ruleId":"443","severity":1,"message":"453","line":12,"column":10,"nodeType":"445","messageId":"446","endLine":12,"endColumn":23},{"ruleId":"443","severity":1,"message":"465","line":12,"column":25,"nodeType":"445","messageId":"446","endLine":12,"endColumn":30},{"ruleId":"462","severity":1,"message":"466","line":116,"column":17,"nodeType":"464","endLine":122,"endColumn":18},{"ruleId":"462","severity":1,"message":"466","line":125,"column":17,"nodeType":"464","endLine":131,"endColumn":18},{"ruleId":"467","severity":1,"message":"468","line":9,"column":7,"nodeType":"469","messageId":"470","endLine":9,"endColumn":13},{"ruleId":"448","severity":1,"message":"449","line":120,"column":22,"nodeType":"450","messageId":"451","endLine":120,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":187,"column":36,"nodeType":"450","messageId":"451","endLine":187,"endColumn":38},{"ruleId":"448","severity":1,"message":"449","line":188,"column":37,"nodeType":"450","messageId":"451","endLine":188,"endColumn":39},{"ruleId":"448","severity":1,"message":"449","line":266,"column":23,"nodeType":"450","messageId":"451","endLine":266,"endColumn":25},{"ruleId":"448","severity":1,"message":"449","line":268,"column":24,"nodeType":"450","messageId":"451","endLine":268,"endColumn":26},{"ruleId":"448","severity":1,"message":"449","line":274,"column":30,"nodeType":"450","messageId":"451","endLine":274,"endColumn":32},{"ruleId":"448","severity":1,"message":"449","line":276,"column":24,"nodeType":"450","messageId":"451","endLine":276,"endColumn":26},{"ruleId":"448","severity":1,"message":"471","line":288,"column":36,"nodeType":"450","messageId":"451","endLine":288,"endColumn":38},{"ruleId":"448","severity":1,"message":"449","line":310,"column":26,"nodeType":"450","messageId":"451","endLine":310,"endColumn":28},{"ruleId":"467","severity":1,"message":"468","line":8,"column":7,"nodeType":"469","messageId":"470","endLine":8,"endColumn":13},{"ruleId":"448","severity":1,"message":"471","line":18,"column":18,"nodeType":"450","messageId":"451","endLine":18,"endColumn":20},{"ruleId":"448","severity":1,"message":"471","line":18,"column":36,"nodeType":"450","messageId":"451","endLine":18,"endColumn":38},{"ruleId":"448","severity":1,"message":"449","line":24,"column":26,"nodeType":"450","messageId":"451","endLine":24,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":15,"column":14,"nodeType":"450","messageId":"451","endLine":15,"endColumn":16},{"ruleId":"443","severity":1,"message":"472","line":2,"column":10,"nodeType":"445","messageId":"446","endLine":2,"endColumn":19},{"ruleId":"443","severity":1,"message":"473","line":2,"column":21,"nodeType":"445","messageId":"446","endLine":2,"endColumn":24},{"ruleId":"443","severity":1,"message":"474","line":2,"column":26,"nodeType":"445","messageId":"446","endLine":2,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":25,"column":22,"nodeType":"450","messageId":"451","endLine":25,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":46,"column":20,"nodeType":"450","messageId":"451","endLine":46,"endColumn":22},{"ruleId":"448","severity":1,"message":"449","line":69,"column":26,"nodeType":"450","messageId":"451","endLine":69,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":100,"column":24,"nodeType":"450","messageId":"451","endLine":100,"endColumn":26},{"ruleId":"448","severity":1,"message":"449","line":51,"column":24,"nodeType":"450","messageId":"451","endLine":51,"endColumn":26},{"ruleId":"443","severity":1,"message":"444","line":3,"column":29,"nodeType":"445","messageId":"446","endLine":3,"endColumn":37},{"ruleId":"443","severity":1,"message":"475","line":67,"column":9,"nodeType":"445","messageId":"446","endLine":67,"endColumn":15},{"ruleId":"448","severity":1,"message":"449","line":122,"column":20,"nodeType":"450","messageId":"451","endLine":122,"endColumn":22},{"ruleId":"448","severity":1,"message":"449","line":136,"column":17,"nodeType":"450","messageId":"451","endLine":136,"endColumn":19},{"ruleId":"448","severity":1,"message":"471","line":171,"column":25,"nodeType":"450","messageId":"451","endLine":171,"endColumn":27},{"ruleId":"448","severity":1,"message":"471","line":171,"column":54,"nodeType":"450","messageId":"451","endLine":171,"endColumn":56},{"ruleId":"448","severity":1,"message":"449","line":181,"column":27,"nodeType":"450","messageId":"451","endLine":181,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":181,"column":55,"nodeType":"450","messageId":"451","endLine":181,"endColumn":57},{"ruleId":"448","severity":1,"message":"449","line":188,"column":27,"nodeType":"450","messageId":"451","endLine":188,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":193,"column":27,"nodeType":"450","messageId":"451","endLine":193,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":193,"column":55,"nodeType":"450","messageId":"451","endLine":193,"endColumn":57},{"ruleId":"448","severity":1,"message":"449","line":320,"column":24,"nodeType":"450","messageId":"451","endLine":320,"endColumn":26},{"ruleId":"448","severity":1,"message":"449","line":334,"column":66,"nodeType":"450","messageId":"451","endLine":334,"endColumn":68},{"ruleId":"448","severity":1,"message":"449","line":339,"column":34,"nodeType":"450","messageId":"451","endLine":339,"endColumn":36},{"ruleId":"448","severity":1,"message":"449","line":344,"column":41,"nodeType":"450","messageId":"451","endLine":344,"endColumn":43},{"ruleId":"448","severity":1,"message":"449","line":349,"column":41,"nodeType":"450","messageId":"451","endLine":349,"endColumn":43},{"ruleId":"448","severity":1,"message":"449","line":43,"column":20,"nodeType":"450","messageId":"451","endLine":43,"endColumn":22},{"ruleId":"448","severity":1,"message":"449","line":57,"column":17,"nodeType":"450","messageId":"451","endLine":57,"endColumn":19},{"ruleId":"448","severity":1,"message":"449","line":65,"column":22,"nodeType":"450","messageId":"451","endLine":65,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":90,"column":26,"nodeType":"450","messageId":"451","endLine":90,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":29,"column":23,"nodeType":"450","messageId":"451","endLine":29,"endColumn":25},{"ruleId":"448","severity":1,"message":"449","line":56,"column":26,"nodeType":"450","messageId":"451","endLine":56,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":126,"column":26,"nodeType":"450","messageId":"451","endLine":126,"endColumn":28},{"ruleId":"462","severity":1,"message":"466","line":238,"column":13,"nodeType":"464","endLine":243,"endColumn":14},{"ruleId":"448","severity":1,"message":"449","line":52,"column":23,"nodeType":"450","messageId":"451","endLine":52,"endColumn":25},{"ruleId":"448","severity":1,"message":"449","line":52,"column":53,"nodeType":"450","messageId":"451","endLine":52,"endColumn":55},{"ruleId":"448","severity":1,"message":"449","line":37,"column":22,"nodeType":"450","messageId":"451","endLine":37,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":58,"column":20,"nodeType":"450","messageId":"451","endLine":58,"endColumn":22},{"ruleId":"448","severity":1,"message":"449","line":81,"column":26,"nodeType":"450","messageId":"451","endLine":81,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":112,"column":24,"nodeType":"450","messageId":"451","endLine":112,"endColumn":26},{"ruleId":"448","severity":1,"message":"449","line":67,"column":35,"nodeType":"450","messageId":"451","endLine":67,"endColumn":37},{"ruleId":"448","severity":1,"message":"449","line":68,"column":35,"nodeType":"450","messageId":"451","endLine":68,"endColumn":37},{"ruleId":"448","severity":1,"message":"471","line":27,"column":25,"nodeType":"450","messageId":"451","endLine":27,"endColumn":27},{"ruleId":"448","severity":1,"message":"471","line":27,"column":54,"nodeType":"450","messageId":"451","endLine":27,"endColumn":56},{"ruleId":"448","severity":1,"message":"449","line":88,"column":26,"nodeType":"450","messageId":"451","endLine":88,"endColumn":28},{"ruleId":"443","severity":1,"message":"476","line":2,"column":22,"nodeType":"445","messageId":"446","endLine":2,"endColumn":33},{"ruleId":"448","severity":1,"message":"449","line":42,"column":24,"nodeType":"450","messageId":"451","endLine":42,"endColumn":26},{"ruleId":"448","severity":1,"message":"449","line":86,"column":35,"nodeType":"450","messageId":"451","endLine":86,"endColumn":37},{"ruleId":"448","severity":1,"message":"449","line":96,"column":35,"nodeType":"450","messageId":"451","endLine":96,"endColumn":37},{"ruleId":"443","severity":1,"message":"477","line":12,"column":18,"nodeType":"445","messageId":"446","endLine":12,"endColumn":23},{"ruleId":"448","severity":1,"message":"449","line":146,"column":29,"nodeType":"450","messageId":"451","endLine":146,"endColumn":31},{"ruleId":"448","severity":1,"message":"449","line":195,"column":27,"nodeType":"450","messageId":"451","endLine":195,"endColumn":29},{"ruleId":"478","severity":1,"message":"479","line":201,"column":5,"nodeType":"480","endLine":201,"endColumn":15},{"ruleId":"448","severity":1,"message":"449","line":211,"column":27,"nodeType":"450","messageId":"451","endLine":211,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":230,"column":27,"nodeType":"450","messageId":"451","endLine":230,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":252,"column":23,"nodeType":"450","messageId":"451","endLine":252,"endColumn":25},{"ruleId":"448","severity":1,"message":"449","line":260,"column":22,"nodeType":"450","messageId":"451","endLine":260,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":262,"column":29,"nodeType":"450","messageId":"451","endLine":262,"endColumn":31},{"ruleId":"448","severity":1,"message":"449","line":270,"column":29,"nodeType":"450","messageId":"451","endLine":270,"endColumn":31},{"ruleId":"448","severity":1,"message":"449","line":277,"column":29,"nodeType":"450","messageId":"451","endLine":277,"endColumn":31},{"ruleId":"448","severity":1,"message":"449","line":354,"column":29,"nodeType":"450","messageId":"451","endLine":354,"endColumn":31},{"ruleId":"448","severity":1,"message":"449","line":416,"column":27,"nodeType":"450","messageId":"451","endLine":416,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":444,"column":33,"nodeType":"450","messageId":"451","endLine":444,"endColumn":35},{"ruleId":"448","severity":1,"message":"449","line":598,"column":31,"nodeType":"450","messageId":"451","endLine":598,"endColumn":33},{"ruleId":"448","severity":1,"message":"449","line":688,"column":31,"nodeType":"450","messageId":"451","endLine":688,"endColumn":33},{"ruleId":"448","severity":1,"message":"449","line":751,"column":22,"nodeType":"450","messageId":"451","endLine":751,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":833,"column":25,"nodeType":"450","messageId":"451","endLine":833,"endColumn":27},{"ruleId":"448","severity":1,"message":"449","line":880,"column":26,"nodeType":"450","messageId":"451","endLine":880,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":906,"column":26,"nodeType":"450","messageId":"451","endLine":906,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":1431,"column":40,"nodeType":"450","messageId":"451","endLine":1431,"endColumn":42},{"ruleId":"443","severity":1,"message":"481","line":3,"column":28,"nodeType":"445","messageId":"446","endLine":3,"endColumn":32},{"ruleId":"448","severity":1,"message":"449","line":18,"column":22,"nodeType":"450","messageId":"451","endLine":18,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":39,"column":26,"nodeType":"450","messageId":"451","endLine":39,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":59,"column":26,"nodeType":"450","messageId":"451","endLine":59,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":18,"column":22,"nodeType":"450","messageId":"451","endLine":18,"endColumn":24},{"ruleId":"448","severity":1,"message":"471","line":25,"column":46,"nodeType":"450","messageId":"451","endLine":25,"endColumn":48},{"ruleId":"443","severity":1,"message":"482","line":4,"column":8,"nodeType":"445","messageId":"446","endLine":4,"endColumn":15},{"ruleId":"483","severity":1,"message":"484","line":11,"column":3,"nodeType":"485","messageId":"486","endLine":13,"endColumn":4},{"ruleId":"448","severity":1,"message":"471","line":25,"column":23,"nodeType":"450","messageId":"451","endLine":25,"endColumn":25},{"ruleId":"448","severity":1,"message":"471","line":25,"column":45,"nodeType":"450","messageId":"451","endLine":25,"endColumn":47},{"ruleId":"448","severity":1,"message":"449","line":20,"column":34,"nodeType":"450","messageId":"451","endLine":20,"endColumn":36},{"ruleId":"448","severity":1,"message":"449","line":22,"column":41,"nodeType":"450","messageId":"451","endLine":22,"endColumn":43},{"ruleId":"448","severity":1,"message":"449","line":33,"column":41,"nodeType":"450","messageId":"451","endLine":33,"endColumn":43},{"ruleId":"448","severity":1,"message":"449","line":45,"column":41,"nodeType":"450","messageId":"451","endLine":45,"endColumn":43},{"ruleId":"448","severity":1,"message":"449","line":57,"column":41,"nodeType":"450","messageId":"451","endLine":57,"endColumn":43},{"ruleId":"448","severity":1,"message":"449","line":21,"column":22,"nodeType":"450","messageId":"451","endLine":21,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":95,"column":26,"nodeType":"450","messageId":"451","endLine":95,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":116,"column":26,"nodeType":"450","messageId":"451","endLine":116,"endColumn":28},{"ruleId":"443","severity":1,"message":"477","line":2,"column":34,"nodeType":"445","messageId":"446","endLine":2,"endColumn":39},{"ruleId":"443","severity":1,"message":"487","line":4,"column":32,"nodeType":"445","messageId":"446","endLine":4,"endColumn":38},{"ruleId":"462","severity":1,"message":"466","line":119,"column":21,"nodeType":"464","endLine":124,"endColumn":22},{"ruleId":"448","severity":1,"message":"449","line":150,"column":19,"nodeType":"450","messageId":"451","endLine":150,"endColumn":21},{"ruleId":"448","severity":1,"message":"449","line":150,"column":38,"nodeType":"450","messageId":"451","endLine":150,"endColumn":40},{"ruleId":"448","severity":1,"message":"449","line":162,"column":26,"nodeType":"450","messageId":"451","endLine":162,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":181,"column":17,"nodeType":"450","messageId":"451","endLine":181,"endColumn":19},{"ruleId":"448","severity":1,"message":"449","line":181,"column":35,"nodeType":"450","messageId":"451","endLine":181,"endColumn":37},{"ruleId":"443","severity":1,"message":"488","line":8,"column":8,"nodeType":"445","messageId":"446","endLine":8,"endColumn":9},{"ruleId":"448","severity":1,"message":"449","line":61,"column":35,"nodeType":"450","messageId":"451","endLine":61,"endColumn":37},{"ruleId":"462","severity":1,"message":"466","line":109,"column":21,"nodeType":"464","endLine":114,"endColumn":22},{"ruleId":"448","severity":1,"message":"449","line":140,"column":24,"nodeType":"450","messageId":"451","endLine":140,"endColumn":26},{"ruleId":"448","severity":1,"message":"449","line":148,"column":26,"nodeType":"450","messageId":"451","endLine":148,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":166,"column":17,"nodeType":"450","messageId":"451","endLine":166,"endColumn":19},{"ruleId":"448","severity":1,"message":"449","line":26,"column":26,"nodeType":"450","messageId":"451","endLine":26,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":40,"column":28,"nodeType":"450","messageId":"451","endLine":40,"endColumn":30},{"ruleId":"448","severity":1,"message":"449","line":49,"column":28,"nodeType":"450","messageId":"451","endLine":49,"endColumn":30},{"ruleId":"448","severity":1,"message":"449","line":67,"column":28,"nodeType":"450","messageId":"451","endLine":67,"endColumn":30},{"ruleId":"448","severity":1,"message":"449","line":127,"column":42,"nodeType":"450","messageId":"451","endLine":127,"endColumn":44},{"ruleId":"448","severity":1,"message":"449","line":133,"column":42,"nodeType":"450","messageId":"451","endLine":133,"endColumn":44},{"ruleId":"448","severity":1,"message":"449","line":148,"column":22,"nodeType":"450","messageId":"451","endLine":148,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":26,"column":26,"nodeType":"450","messageId":"451","endLine":26,"endColumn":28},{"ruleId":"448","severity":1,"message":"449","line":40,"column":28,"nodeType":"450","messageId":"451","endLine":40,"endColumn":30},{"ruleId":"448","severity":1,"message":"449","line":49,"column":28,"nodeType":"450","messageId":"451","endLine":49,"endColumn":30},{"ruleId":"448","severity":1,"message":"449","line":67,"column":28,"nodeType":"450","messageId":"451","endLine":67,"endColumn":30},{"ruleId":"448","severity":1,"message":"449","line":130,"column":42,"nodeType":"450","messageId":"451","endLine":130,"endColumn":44},{"ruleId":"448","severity":1,"message":"449","line":136,"column":42,"nodeType":"450","messageId":"451","endLine":136,"endColumn":44},{"ruleId":"448","severity":1,"message":"449","line":153,"column":22,"nodeType":"450","messageId":"451","endLine":153,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":86,"column":27,"nodeType":"450","messageId":"451","endLine":86,"endColumn":29},{"ruleId":"448","severity":1,"message":"449","line":109,"column":22,"nodeType":"450","messageId":"451","endLine":109,"endColumn":24},{"ruleId":"448","severity":1,"message":"449","line":81,"column":22,"nodeType":"450","messageId":"451","endLine":81,"endColumn":24},{"ruleId":"489","severity":1,"message":"490","line":14,"column":13,"nodeType":"464","endLine":14,"endColumn":51},{"ruleId":"489","severity":1,"message":"490","line":20,"column":13,"nodeType":"464","endLine":20,"endColumn":50},{"ruleId":"489","severity":1,"message":"490","line":13,"column":13,"nodeType":"464","endLine":13,"endColumn":51},{"ruleId":"489","severity":1,"message":"490","line":18,"column":13,"nodeType":"464","endLine":18,"endColumn":50},{"ruleId":"489","severity":1,"message":"490","line":35,"column":13,"nodeType":"464","endLine":35,"endColumn":51},{"ruleId":"489","severity":1,"message":"490","line":41,"column":13,"nodeType":"464","endLine":41,"endColumn":50},"no-native-reassign",["491"],"no-negated-in-lhs",["492"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Student' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'BrowserRouter' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Route' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","Expected '!==' and instead saw '!='.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'stream' is assigned a value but never used.","'useLocation' is defined but never used.","'Modal' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Form' is defined but never used.","'Subject' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'FaPlus' is defined but never used.","'$' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]