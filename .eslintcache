[{"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\index.js":"1","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\App.js":"2","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\store\\store.js":"3","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\Student.js":"4","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\LoginRoute.js":"5","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\TeacherMain.js":"6","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\AdminMain.js":"7","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\Canvas\\Canvas.js":"8","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\StudentMain.js":"9","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\store\\reducers\\login.js":"10","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\store\\reducers\\adminReducer.js":"11","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\navBar\\NavBar.js":"12","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\Admin.js":"13","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\Login.js":"14","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\ListItem\\ListItem.js":"15","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\shared\\dailogBox.js":"16","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Teacher.js":"17","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\TabView\\TabView.js":"18","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\AdminLogin\\AdminLogin.js":"19","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\shared\\http.js":"20","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\components\\StudentProfile\\StudentProfile.js":"21","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\components\\examguidelines\\ExamGuidlines.js":"22","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\components\\startexam\\StartExam.js":"23","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\sigup\\signup.js":"24","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\verifyOtp\\verifyOtp.js":"25","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\sigup\\googleSignup\\GoogleSignup.js":"26","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\config.js":"27","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\shared\\parseCookie.js":"28","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\signin\\signin.js":"29","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\newExam\\NewExam.js":"30","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\setPassword\\SetPassword.js":"31","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\TeacherProfile\\TeacherProfile.js":"32","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Message\\Messagelist.js":"33","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Message\\Messagecontent.js":"34","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Institutionstructure\\Institutionstructure.js":"35","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\UserManagment\\UserMangamenet.js":"36","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Report\\Report.js":"37","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Home\\Home.js":"38","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\questionpaperpreview\\QuestionpaperPreview.js":"39","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\VerifyAccounts\\VerifyAccounts.js":"40","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\previousExam\\PreviousExam.js":"41","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Question.js":"42","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Institutionstructure\\Department.js":"43","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Message\\Message.js":"44","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Institutionstructure\\ClassBatch.js":"45","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Institutionstructure\\Subjects.js":"46","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\UserManagment\\Teachers.js":"47","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\TeacherProfile\\VerifyStudent.js":"48","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\sigup\\student\\student.js":"49","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\UserManagment\\Students.js":"50","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\sigup\\teacher\\teacher.js":"51","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Text\\Text.js":"52","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Short\\Short.js":"53","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Mcq\\Mcq.js":"54","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Header\\Header.js":"55","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Essay\\Essay.js":"56","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\Search\\Search.js":"57"},{"size":278,"mtime":1617428154591,"results":"58","hashOfConfig":"59"},{"size":1709,"mtime":1619592245647,"results":"60","hashOfConfig":"59"},{"size":284,"mtime":1617428160594,"results":"61","hashOfConfig":"59"},{"size":7590,"mtime":1618468366336,"results":"62","hashOfConfig":"59"},{"size":926,"mtime":1617428154528,"results":"63","hashOfConfig":"59"},{"size":1231,"mtime":1617428154573,"results":"64","hashOfConfig":"59"},{"size":941,"mtime":1617428154490,"results":"65","hashOfConfig":"59"},{"size":7793,"mtime":1617428154583,"results":"66","hashOfConfig":"59"},{"size":4690,"mtime":1618586297363,"results":"67","hashOfConfig":"59"},{"size":337,"mtime":1617428160594,"results":"68","hashOfConfig":"59"},{"size":244,"mtime":1617428160593,"results":"69","hashOfConfig":"59"},{"size":599,"mtime":1617428154589,"results":"70","hashOfConfig":"59"},{"size":5395,"mtime":1617428154488,"results":"71","hashOfConfig":"59"},{"size":5229,"mtime":1618586297361,"results":"72","hashOfConfig":"59"},{"size":647,"mtime":1618045717969,"results":"73","hashOfConfig":"59"},{"size":2173,"mtime":1619599173148,"results":"74","hashOfConfig":"59"},{"size":14356,"mtime":1619434288030,"results":"75","hashOfConfig":"59"},{"size":1567,"mtime":1617428154588,"results":"76","hashOfConfig":"59"},{"size":2160,"mtime":1617428154489,"results":"77","hashOfConfig":"59"},{"size":990,"mtime":1617428160487,"results":"78","hashOfConfig":"59"},{"size":8985,"mtime":1620111429936,"results":"79","hashOfConfig":"59"},{"size":4393,"mtime":1618380694496,"results":"80","hashOfConfig":"59"},{"size":18063,"mtime":1618586297366,"results":"81","hashOfConfig":"59"},{"size":2645,"mtime":1617428154538,"results":"82","hashOfConfig":"59"},{"size":4050,"mtime":1617428154544,"results":"83","hashOfConfig":"59"},{"size":3327,"mtime":1617428154536,"results":"84","hashOfConfig":"59"},{"size":52,"mtime":1617428154590,"results":"85","hashOfConfig":"59"},{"size":476,"mtime":1617428160500,"results":"86","hashOfConfig":"59"},{"size":7020,"mtime":1617428154534,"results":"87","hashOfConfig":"59"},{"size":42657,"mtime":1619602270298,"results":"88","hashOfConfig":"59"},{"size":3227,"mtime":1617428154531,"results":"89","hashOfConfig":"59"},{"size":9349,"mtime":1619437017813,"results":"90","hashOfConfig":"59"},{"size":1414,"mtime":1617428154498,"results":"91","hashOfConfig":"59"},{"size":2145,"mtime":1617428154497,"results":"92","hashOfConfig":"59"},{"size":919,"mtime":1617428154495,"results":"93","hashOfConfig":"59"},{"size":562,"mtime":1617428154503,"results":"94","hashOfConfig":"59"},{"size":2520,"mtime":1617428154499,"results":"95","hashOfConfig":"59"},{"size":2583,"mtime":1617428154492,"results":"96","hashOfConfig":"59"},{"size":5163,"mtime":1618045717955,"results":"97","hashOfConfig":"59"},{"size":3627,"mtime":1618045717899,"results":"98","hashOfConfig":"59"},{"size":2597,"mtime":1618586297402,"results":"99","hashOfConfig":"59"},{"size":2152,"mtime":1618045717934,"results":"100","hashOfConfig":"59"},{"size":7954,"mtime":1617428154495,"results":"101","hashOfConfig":"59"},{"size":1121,"mtime":1617428154496,"results":"102","hashOfConfig":"59"},{"size":8887,"mtime":1617428154492,"results":"103","hashOfConfig":"59"},{"size":3155,"mtime":1617428154495,"results":"104","hashOfConfig":"59"},{"size":5306,"mtime":1617428154502,"results":"105","hashOfConfig":"59"},{"size":4518,"mtime":1618045717952,"results":"106","hashOfConfig":"59"},{"size":6097,"mtime":1619285734119,"results":"107","hashOfConfig":"59"},{"size":5093,"mtime":1617428154501,"results":"108","hashOfConfig":"59"},{"size":4171,"mtime":1617428154542,"results":"109","hashOfConfig":"59"},{"size":165,"mtime":1617428154571,"results":"110","hashOfConfig":"59"},{"size":1753,"mtime":1618045717935,"results":"111","hashOfConfig":"59"},{"size":1485,"mtime":1618586297397,"results":"112","hashOfConfig":"59"},{"size":1014,"mtime":1618045717931,"results":"113","hashOfConfig":"59"},{"size":1727,"mtime":1618045717929,"results":"114","hashOfConfig":"59"},{"size":605,"mtime":1617428154586,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"1lm98vf",{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"118"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"118"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"118"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"118"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"118"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"118"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"118"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"118"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"118"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"118"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"118"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"118"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"118"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"118"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"118"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"118"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"118"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"118"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"118"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"118"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"118"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"118"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"118"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"118"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"118"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"118"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"118"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"118"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"118"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"118"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"118"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"118"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"118"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"118"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"118"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"118"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"272"},"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\index.js",[],["273","274"],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\App.js",["275","276","277"],"import { Provider } from \"react-redux\";\r\nimport { BrowserRouter, Redirect, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\n\r\nimport LoginRoute from \"./components/login/LoginRoute\";\r\nimport Student from \"./components/student/Student\";\r\nimport TeacherMain from \"./components/teacher/TeacherMain\";\r\nimport AdminMain from \"./components/admin/AdminMain\";\r\n\r\nimport { store } from \"./store/store\";\r\nimport React from \"react\";\r\n\r\nimport $ from \"jquery\";\r\nimport Canvas from \"./components/ui-elements/Canvas/Canvas\";\r\nimport StudentMain from \"./components/student/StudentMain\";\r\n\r\n\r\nclass App extends React.Component {\r\n  componentDidMount() {\r\n    //Replacing system default alert with custom alert\r\n    window.alert = (text) => {\r\n      $(\"body\").append(\r\n        `<div class=\"alert alert-info alert-dismissible\" role=\"alert\" id=\"systemAlert\">\r\n          <button\r\n            type=\"button\"\r\n            class=\"close\"\r\n            data-dismiss=\"alert\"\r\n            aria-label=\"Close\"\r\n          >\r\n            <span aria-hidden=\"true\">&times;</span>\r\n          </button>${text}\r\n        </div>`\r\n      );\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <BrowserRouter>\r\n        <Provider store={store}>\r\n          <div>\r\n            {/* Routes of the app */}\r\n            <Route path=\"/\" component={LoginRoute} />\r\n            <Route path=\"/student\" component={StudentMain} />\r\n            <Route path=\"/teacher\" component={TeacherMain} />\r\n            <Route path=\"/admin\" component={AdminMain} />\r\n\r\n            {/* //Test route for development purposes */}\r\n            <Route path=\"/test\"></Route>\r\n          </div>\r\n        </Provider>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\store\\store.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\Student.js",["278","279","280","281"],"import React, { Component } from \"react\";\r\nimport NavBar from \"../ui-elements/navBar/NavBar\";\r\nimport TabView from \"../ui-elements/TabView/TabView\";\r\nimport ExamGuidlines from \"./components/examguidelines/ExamGuidlines\";\r\nimport ListItem from \"../ui-elements/ListItem/ListItem\";\r\nimport StartExam from \"./components/startexam/StartExam\";\r\nimport { Link, BrowserRouter, Route, withRouter } from \"react-router-dom\";\r\nimport StudentProfile from \"./components/StudentProfile/StudentProfile\";\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\nimport \"./Student.css\";\r\nimport http from \"../../shared/http\";\r\nimport configuireDialogBox from \"../../shared/dailogBox\";\r\n\r\nclass Student extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      examData: [],\r\n      examList: [],\r\n      previousExamList: [],\r\n      selectedExam: null,\r\n      webcam: { webcam: \"webcam object here\" },\r\n      examListRefreshTimer: null,\r\n    };\r\n  }\r\n\r\n  //Get exam data from the server\r\n  getExamData = () => {\r\n    console.log(\"Refreshed\");\r\n    http(\"GET\", \"/student/exams\", {}, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ examData: res.data }, () => {\r\n          this.setExamData();\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  //Setup the list items for the exams\r\n  setExamData = () => {\r\n    let examList = [];\r\n    let previousExamList = [];\r\n\r\n    let currentTime = new Date();\r\n\r\n    this.state.examData.map((item) => {\r\n      let examDate = new Date(`${item.date},${item.to}`);\r\n      let startTime = new Date(`${item.date},${item.from}`);\r\n\r\n      if (currentTime.getTime() > examDate.getTime()) {\r\n        previousExamList.push(\r\n          <ListItem height=\"100px\" key={item._id}>\r\n            {{\r\n              left: (\r\n                <div id=\"leftListItem\">\r\n                  <p>Exam Name: {item.examName}</p>\r\n                  <p>Subject: {item.subject}</p>\r\n                  <p>Date: {item.date}</p>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div id=\"rightListItem\">\r\n                  <p>\r\n                    Time: {item.from} - {item.to}\r\n                  </p>\r\n                  <p>{item.marks} Marks</p>\r\n                </div>\r\n              ),\r\n            }}\r\n          </ListItem>\r\n        );\r\n      } else {\r\n        examList.push(\r\n          <ListItem\r\n            height=\"100px\"\r\n            key={item._id}\r\n            green={currentTime.getTime() > startTime.getTime() ? true : null}\r\n            onClick={() => this.openScheduledExam(item)}\r\n          >\r\n            {{\r\n              left: (\r\n                <div id=\"leftListItem\">\r\n                  <p>Exam Name: {item.examName}</p>\r\n                  <p>Subject: {item.subject}</p>\r\n                  <p>Date: {item.date}</p>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div id=\"rightListItem\">\r\n                  <p>\r\n                    Time: {item.from} - {item.to}\r\n                  </p>\r\n                  <p>{item.marks} Marks</p>\r\n                </div>\r\n              ),\r\n            }}\r\n          </ListItem>\r\n        );\r\n      }\r\n    });\r\n\r\n    //Changing the state\r\n    this.setState({ examList, previousExamList });\r\n  };\r\n\r\n  //Open the profile of the student account\r\n  openProfile = () => {\r\n    this.props.history.push(\"/student/profile\");\r\n  };\r\n\r\n  //Open the welcome dialog box\r\n  openWelcomDialog = () => {\r\n    window.$(\"#welcome\").modal(\"show\");\r\n  };\r\n\r\n  //Open the scheduled exam\r\n  openScheduledExam = (item) => {\r\n    this.setState({ selectedExam: item }, () => {\r\n      let startTime = new Date(`${item.date},${item.from}`);\r\n      let currentTime = new Date();\r\n      let stoptime = new Date(`${item.date},${item.to}`);\r\n\r\n      if (currentTime.getTime() > stoptime.getTime()) {\r\n        alert(\"Exam time ended! Cannot write exam\");\r\n        return;\r\n      }\r\n\r\n      if (currentTime.getTime() > startTime.getTime()) {\r\n        //Exam start time reached\r\n        this.openExamGuidlines();\r\n      } else {\r\n        window.$(\"#warning\").modal(\"show\");\r\n      }\r\n    });\r\n  };\r\n\r\n  //Open the exam guidlines page\r\n  openExamGuidlines = () => {\r\n    this.props.history.push(\"/student/guidelines\");\r\n  };\r\n\r\n  //Refesh exam list\r\n  refreshExamList = () => {\r\n    let timer = setInterval(this.getExamData, 1000 * 30); //Refresh every 30 sec\r\n    this.setState({ examListRefreshTimer: timer });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.openWelcomDialog();\r\n    this.getExamData();\r\n\r\n    //Refresh exam List\r\n    this.refreshExamList();\r\n\r\n    console.log(this.props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Route path=\"/student/profile\" exact>\r\n          <StudentProfile\r\n            user={this.props.user.user}\r\n            Class={this.props.user.Class}\r\n            batch={this.props.user.batch}\r\n            department={this.props.user.department}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/student/guidelines\" exact>\r\n          <ExamGuidlines\r\n            exam={this.state.selectedExam}\r\n            webcam={this.state.webcam}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/student/exam\">\r\n          <StartExam\r\n            exam={this.state.selectedExam}\r\n            webcam={this.state.webcam}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/student\" exact>\r\n          <div>\r\n            {/* Configure the welcome modal */}\r\n            {configuireDialogBox(\r\n              \"welcome\",\r\n              \"Welcome \" + this.props.user.user.name,\r\n              <>\r\n                You can start writing the exams which are displayed in{\" \"}\r\n                <span style={{ backgroundColor: \"lightgreen\" }}>\r\n                  LIGHT GREEN\r\n                </span>{\" \"}\r\n                color.\r\n                <br />\r\n                You an use the PREVIOUS EXAMS tab to view your previous exam\r\n                informations.\r\n              </>,\r\n              <input\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                value=\"GOT IT\"\r\n                data-toggle=\"modal\"\r\n                data-target=\"#welcome\"\r\n              />\r\n            )}\r\n            {/* Configure the dialog box to show warning about the exam start timne */}\r\n            {configuireDialogBox(\r\n              \"warning\",\r\n              \"Information\",\r\n              <>\r\n                Your exam is not yet started! Please check the examination time\r\n                and try again after some time\r\n              </>,\r\n              <input\r\n                type=\"button\"\r\n                className=\"btn btn-primary\"\r\n                value=\"OK\"\r\n                data-toggle=\"modal\"\r\n                data-target=\"#warning\"\r\n              />\r\n            )}\r\n            <NavBar>\r\n              {{\r\n                left: (\r\n                  <h5 id=\"profileText\" onClick={this.openProfile}>\r\n                    <FaUserCircle className=\"mr-3 ml-3\" size={40} />\r\n                    {this.props.user.user.name}\r\n                  </h5>\r\n                ),\r\n              }}\r\n            </NavBar>\r\n            <TabView>\r\n              {{\r\n                leftTab: <span>SCHEDULED EXAMS</span>,\r\n                rightTab: <span>PREVIOUS EXAMS</span>,\r\n                leftTabBody: <div id=\"leftTabBody\">{this.state.examList}</div>,\r\n                rightTabBody: (\r\n                  <div id=\"rightTabBody\">{this.state.previousExamList}</div>\r\n                ),\r\n              }}\r\n            </TabView>\r\n          </div>\r\n        </Route>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Student);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\LoginRoute.js",["282"],"/**\r\n * This is the router in the client side to navigate user in the browser without page refresh\r\n * THIS IS THE ROUTER ONLY FOR THE LOGIN MODULE\r\n */\r\nimport { Component } from \"react\";\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  withRouter,\r\n  Switch,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\n\r\nimport Login from \"./Login\";\r\n\r\nclass LoginRoute extends Component {\r\n  render() {\r\n    return (\r\n      /**\r\n       * DISPLAYING CORRESPONDING COMPONENTS IN DIFFERENT ROUTES\r\n       */\r\n      <Switch>\r\n        <Route path=\"/\" exact>\r\n          <Redirect to=\"/signin\" />\r\n        </Route>\r\n        <Route path=\"/signin\" exact>\r\n          <Login signin />\r\n        </Route>\r\n        <Route path=\"/signup\" exact>\r\n          <Login signup />\r\n        </Route>\r\n        <Route path=\"/signup/google\" exact>\r\n          <Login googleSignup />\r\n        </Route>\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(LoginRoute);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\TeacherMain.js",["283"],"import React, { Component } from \"react\";\r\nimport Teacher from \"./Teacher\";\r\nimport http from \"../../shared/http\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass TeacherMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { component: null };\r\n  }\r\n\r\n  checkAuthentication = () => {\r\n    http(\r\n      \"POST\",\r\n      \"/login/checkTeacher\",\r\n      null,\r\n      (res) => {\r\n        if (res.status == 200) {\r\n          this.setState({\r\n            component: (\r\n              <Teacher\r\n                user={res.data}\r\n                hod={res.data.hod}\r\n                mentor={res.data.mentor}\r\n              />\r\n            ),\r\n          });\r\n        } else {\r\n          alert(res.data);\r\n          this.setState({ component: null });\r\n          this.props.history.push(\"/\");\r\n        }\r\n      },\r\n      (err) => {\r\n        alert(\"Authentication Failed! Please login again\");\r\n        this.setState({ component: null });\r\n        this.props.history.push(\"/\");\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.checkAuthentication();\r\n  }\r\n\r\n  render() {\r\n    return <>{this.state.component ? this.state.component : null}</>;\r\n  }\r\n}\r\n\r\nexport default withRouter(TeacherMain);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\AdminMain.js",["284"],"import React, { Component } from \"react\";\r\nimport Admin from \"./Admin\";\r\nimport AdminLogin from \"./AdminLogin/AdminLogin\";\r\nimport http from \"../../shared/http\";\r\n\r\nexport default class AdminMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { component: null };\r\n  }\r\n\r\n  checkAuthentication = () => {\r\n    http(\r\n      \"POST\",\r\n      \"/login/checkAdmin\",\r\n      null,\r\n      (res) => {\r\n        if (res.status == 200) {\r\n          this.setState({ component: <Admin /> });\r\n        } else {\r\n          alert(res.data);\r\n          this.setState({ component: null });\r\n        }\r\n      },\r\n      (err) => {\r\n        alert(\"Authentication Failed! Please login again\");\r\n        this.setState({ component: null });\r\n      }\r\n    );\r\n  };\r\n  componentDidMount() {\r\n    this.checkAuthentication();\r\n  }\r\n\r\n  render() {\r\n    return <>{this.state.component ? this.state.component : <AdminLogin />}</>;\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\Canvas\\Canvas.js",["285","286","287","288","289","290"],"import React, { Component } from \"react\";\r\nimport NavBar from \"../navBar/NavBar\";\r\nimport \"./Canvas.css\";\r\n\r\nexport default class Canvas extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.canvas = false;\r\n    this.ctx = false;\r\n    this.flag = false;\r\n\r\n    this.prevX = 0;\r\n    this.currX = 0;\r\n    this.prevY = 0;\r\n    this.currY = 0;\r\n    this.dot_flag = false;\r\n\r\n    this.x = \"black\";\r\n    this.y = 2;\r\n  }\r\n\r\n  init = () => {\r\n    this.canvas = document.getElementById(\"can\");\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n    this.ctx.canvas.width = window.innerWidth;\r\n    this.ctx.canvas.height = window.innerHeight;\r\n    this.w = this.canvas.width;\r\n    this.h = this.canvas.height;\r\n\r\n    this.canvas.addEventListener(\r\n      \"mousemove\",\r\n      (e) => {\r\n        this.findxy(\"move\", e);\r\n      },\r\n      false\r\n    );\r\n\r\n    this.canvas.addEventListener(\r\n      \"mousedown\",\r\n      (e) => {\r\n        this.findxy(\"down\", e);\r\n      },\r\n      false\r\n    );\r\n\r\n    this.canvas.addEventListener(\r\n      \"mouseup\",\r\n      (e) => {\r\n        this.findxy(\"up\", e);\r\n      },\r\n      false\r\n    );\r\n\r\n    this.canvas.addEventListener(\r\n      \"mouseout\",\r\n      (e) => {\r\n        this.findxy(\"out\", e);\r\n      },\r\n      false\r\n    );\r\n  };\r\n\r\n  color = (obj) => {\r\n    switch (obj.id) {\r\n      case \"green\":\r\n        this.x = \"green\";\r\n        break;\r\n      case \"blue\":\r\n        this.x = \"blue\";\r\n        break;\r\n      case \"red\":\r\n        this.x = \"red\";\r\n        break;\r\n      case \"yellow\":\r\n        this.x = \"yellow\";\r\n        break;\r\n      case \"orange\":\r\n        this.x = \"orange\";\r\n        break;\r\n      case \"black\":\r\n        this.x = \"black\";\r\n        break;\r\n      case \"white\":\r\n        this.x = \"white\";\r\n        break;\r\n    }\r\n    if (this.x == \"white\") this.y = 14;\r\n    else this.y = 2;\r\n  };\r\n\r\n  draw = () => {\r\n    this.ctx.beginPath();\r\n    this.ctx.moveTo(this.prevX, this.prevY);\r\n    this.ctx.lineTo(this.currX, this.currY);\r\n    this.ctx.strokeStyle = this.x;\r\n    this.ctx.lineWidth = this.y;\r\n    this.ctx.stroke();\r\n    this.ctx.closePath();\r\n  };\r\n\r\n  erase = () => {\r\n    var m = window.confirm(\"Are you sure to clear?\");\r\n    if (m) {\r\n      this.ctx.clearRect(0, 0, this.w, this.h);\r\n    }\r\n  };\r\n\r\n  //Check if acanvas is empty\r\n  isCanvasBlank = (canvas) => {\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    const pixelBuffer = new Uint32Array(\r\n      context.getImageData(0, 0, canvas.width, canvas.height).data.buffer\r\n    );\r\n\r\n    return !pixelBuffer.some((color) => color !== 0);\r\n  };\r\n\r\n  save = () => {\r\n    var dataURL = this.canvas.toDataURL();\r\n    if (this.props.save) {\r\n      if (this.isCanvasBlank(this.canvas)) {\r\n        this.props.save(\"\");\r\n      } else this.props.save(dataURL);\r\n    }\r\n  };\r\n\r\n  findxy = (res, e) => {\r\n    if (res == \"down\") {\r\n      this.prevX = this.currX;\r\n      this.prevY = this.currY;\r\n      this.currX = e.clientX - this.canvas.getBoundingClientRect().left;\r\n      this.currY = e.clientY - this.canvas.getBoundingClientRect().top;\r\n\r\n      this.flag = true;\r\n      this.dot_flag = true;\r\n      if (this.dot_flag) {\r\n        this.ctx.beginPath();\r\n        this.ctx.fillStyle = this.x;\r\n        this.ctx.fillRect(this.currX, this.currY, 2, 2);\r\n        this.ctx.closePath();\r\n        this.dot_flag = false;\r\n      }\r\n    }\r\n    if (res == \"up\" || res == \"out\") {\r\n      this.flag = false;\r\n    }\r\n    if (res == \"move\") {\r\n      if (this.flag) {\r\n        this.prevX = this.currX;\r\n        this.prevY = this.currY;\r\n        this.currX = e.clientX - this.canvas.getBoundingClientRect().left;\r\n        this.currY = e.clientY - this.canvas.getBoundingClientRect().top;\r\n        this.draw();\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.init();\r\n\r\n    //Load previous image if exist\r\n    if (this.props.image) {\r\n      let ctx = this.canvas.getContext(\"2d\");\r\n\r\n      var image = new Image();\r\n      image.onload = function () {\r\n        ctx.drawImage(image, 0, 0);\r\n      };\r\n      image.src = this.props.image;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div style={{ zIndex: 1000000 }}>\r\n          <NavBar>\r\n            {{\r\n              left: <h4>CANVAS</h4>,\r\n              center: (\r\n                <div style={{ display: \"flex\" }}>\r\n                  <div className=\"mr-3\">\r\n                    <div>Choose Color</div>\r\n                    <div style={{ display: \"flex\" }}>\r\n                      <div\r\n                        id=\"green\"\r\n                        className=\"colorBox\"\r\n                        onClick={(e) => {\r\n                          this.color(e.target);\r\n                        }}\r\n                        style={{ backgroundColor: \"green\" }}\r\n                      ></div>\r\n                      <div\r\n                        style={{ backgroundColor: \"blue\" }}\r\n                        id=\"blue\"\r\n                        className=\"colorBox\"\r\n                        onClick={(e) => {\r\n                          this.color(e.target);\r\n                        }}\r\n                      ></div>\r\n                      <div\r\n                        style={{ backgroundColor: \"red\" }}\r\n                        id=\"red\"\r\n                        className=\"colorBox\"\r\n                        onClick={(e) => {\r\n                          this.color(e.target);\r\n                        }}\r\n                      ></div>\r\n                      <div\r\n                        id=\"yellow\"\r\n                        style={{ backgroundColor: \"yellow\" }}\r\n                        onClick={(e) => {\r\n                          this.color(e.target);\r\n                        }}\r\n                        className=\"colorBox\"\r\n                      ></div>\r\n                      <div\r\n                        id=\"orange\"\r\n                        style={{ backgroundColor: \"orange\" }}\r\n                        onClick={(e) => {\r\n                          this.color(e.target);\r\n                        }}\r\n                        className=\"colorBox\"\r\n                      ></div>\r\n                      <div\r\n                        id=\"black\"\r\n                        style={{ backgroundColor: \"black\" }}\r\n                        onClick={(e) => {\r\n                          this.color(e.target);\r\n                        }}\r\n                        className=\"colorBox\"\r\n                      ></div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div>\r\n                    <div>Eraser</div>\r\n                    <div\r\n                      id=\"white\"\r\n                      style={{ backgroundColor: \"white\" }}\r\n                      className=\"colorBox\"\r\n                      onClick={(e) => {\r\n                        this.color(e.target);\r\n                      }}\r\n                    ></div>\r\n                  </div>\r\n                  {/* <img\r\n                  id=\"canvasimg\"\r\n                /> */}\r\n                </div>\r\n              ),\r\n              right: (\r\n                <>\r\n                  <button\r\n                    className=\"btn btn-danger mr-3\"\r\n                    onClick={this.props.close}\r\n                  >\r\n                    CLOSE\r\n                  </button>\r\n\r\n                  <button\r\n                    type=\"button\"\r\n                    id=\"clr\"\r\n                    className=\"btn btn-secondary mr-3\"\r\n                    onClick={this.erase}\r\n                  >\r\n                    CLEAR\r\n                  </button>\r\n                  <button className=\"btn btn-success\" onClick={this.save}>\r\n                    SAVE\r\n                  </button>\r\n                </>\r\n              ),\r\n            }}\r\n          </NavBar>\r\n          <div id=\"canvasDiv\">\r\n            <canvas id=\"can\"></canvas>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\StudentMain.js",["291"],"import React, { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport http from \"../../shared/http\";\r\nimport Student from \"./Student\";\r\nimport { FaPowerOff } from \"react-icons/fa\";\r\nimport $ from \"jquery\";\r\n\r\nclass StudentMain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      component: null,\r\n      show: true,\r\n      text: \"PLEASE WAIT ...\",\r\n      textHint: \"\",\r\n      showCloseButton: false,\r\n    };\r\n  }\r\n\r\n  checkAuthentication = () => {\r\n    http(\r\n      \"POST\",\r\n      \"/login/checkStudent\",\r\n      null,\r\n      (res) => {\r\n        if (res.status == 200) {\r\n          this.setState({\r\n            component: <Student user={res.data} />,\r\n          });\r\n        } else {\r\n          alert(res.data);\r\n          this.setState({ component: null });\r\n          this.props.history.push(\"/\");\r\n        }\r\n      },\r\n      (err) => {\r\n        alert(\"Authentication Failed! Please login again\");\r\n        this.setState({ component: null });\r\n        this.props.history.push(\"/\");\r\n      }\r\n    );\r\n  };\r\n\r\n  //Check if running in kiosk mode or not\r\n  checkKiosk = () => {\r\n    if (\r\n      (window.screen.availHeight || window.screen.height - 30) <=\r\n      window.innerHeight\r\n    ) {\r\n      navigator.clipboard\r\n        .readText()\r\n        .then((text) => {\r\n          if (\r\n            text ===\r\n            \"hjafjbsfmnzcbfisfhbjkadbnjkfgouidh;OHIDYR985r89wyrwqfpawis8uy89uy9f8fc5ra8eu9565qafusiug238q478\"\r\n          ) {\r\n            this.setState({ show: true, showCloseButton: true });\r\n          } else {\r\n            this.setState({ text: \"OPEN YUVASHIKSHA USING THE LAUNCHER\" });\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.setState({\r\n            text: \"CANNOT START YUVASHIKSHA, 'CLIPBOARD' PERMISSION BLOCKED\",\r\n            textHint: \"(RESTART LAUNCHER AND ALLOW PERMISSION)\",\r\n            showCloseButton: true,\r\n          });\r\n        });\r\n    } else {\r\n      this.setState({ text: \"OPEN YUVASHIKSHA USING THE LAUNCHER\" });\r\n    }\r\n  };\r\n\r\n  //disable right click\r\n  preventRightClick = () => {\r\n    document.addEventListener(\"contextmenu\", (event) => event.preventDefault());\r\n  };\r\n\r\n  //Prevent COPY ,PASTE\r\n  preventCopyPaste = () => {\r\n    $(document).ready(() => {\r\n      // Disables ctrl+v, ctrl+x, ctrl+c.\r\n      $(document).on(\"cut copy paste\", function (e) {\r\n        alert(\"Cut, Copy, Paste are NOT allowed.\");\r\n        e.preventDefault();\r\n      });\r\n    });\r\n  };\r\n\r\n  //Prevent keys for security in KIOSK mode\r\n  preventKeys = () => {\r\n    $(document).ready(() => {\r\n      $(document).keydown((event) => {\r\n        let key = event.which;\r\n\r\n        //Disabling keys\r\n        if (\r\n          key === 17 ||\r\n          key === 18 ||\r\n          key === 91 ||\r\n          key === 92 ||\r\n          key === 93 ||\r\n          key === 112 ||\r\n          key === 113 ||\r\n          key === 114 ||\r\n          key === 115 ||\r\n          key === 116 ||\r\n          key === 117 ||\r\n          key === 118 ||\r\n          key === 119 ||\r\n          key === 120 ||\r\n          key === 121 ||\r\n          key === 122 ||\r\n          key === 123 ||\r\n          key === 44 ||\r\n          event.ctrlKey ||\r\n          event.altKey\r\n        ) {\r\n          event.preventDefault();\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    // this.checkKiosk();\r\n\r\n    //Disabling right click menu\r\n    this.preventRightClick();\r\n\r\n    //Prevent cut copy paste features\r\n    this.preventCopyPaste();\r\n\r\n    this.preventKeys();\r\n\r\n    this.checkAuthentication();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.state.show ? (\r\n          this.state.component ? (\r\n            this.state.component\r\n          ) : null\r\n        ) : (\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            style={{ height: \"100vh\", flexDirection: \"column\" }}\r\n          >\r\n            {/* EXIT BUTTON */}\r\n            {this.state.showCloseButton ? (\r\n              <div id=\"yuvashikshaExit\">\r\n                <button\r\n                  className=\"btn btn-danger\"\r\n                  title=\"Exit Yuvashiksha\"\r\n                  onClick={() => {\r\n                    if (window.confirm(\"Are you sure to exit Yuvashiksha?\"))\r\n                      navigator.clipboard.writeText(\"close-yuvashiksha\");\r\n                  }}\r\n                >\r\n                  <FaPowerOff />\r\n                </button>\r\n              </div>\r\n            ) : null}\r\n\r\n            <h2>{this.state.text}</h2>\r\n            {this.state.textHint ? <h5>{this.state.textHint}</h5> : null}\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(StudentMain);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\store\\reducers\\login.js",["292"],"export const loginReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"updateSignupData\":\r\n      return {\r\n        ...state,\r\n        signupData: { ...action.payload },\r\n        validSignupData: true,\r\n      };\r\n      break;\r\n    case \"clearSignupData\":\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\store\\reducers\\adminReducer.js",["293"],"export const adminReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"storeMessage\":\r\n      return {\r\n        ...state,\r\n        message: action.payload,\r\n      };\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\navBar\\NavBar.js",["294","295","296"],"import { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport \"./NavBar.css\";\r\n\r\nclass NavBar extends Component {\r\n  render() {\r\n    return (\r\n      <div id=\"navBar\">\r\n        <div\r\n          className=\"d-flex flex-row justify-content-between align-items-center\"\r\n          id=\"navBarContainer\"\r\n        >\r\n          <div id=\"left\">{this.props.children.left}</div>\r\n          <div id=\"center\">{this.props.children.center}</div>\r\n          <div id=\"right\">{this.props.children.right}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\Admin.js",["297","298","299","300","301","302","303","304"],"import { Component } from \"react\";\r\nimport $ from \"jquery\";\r\nimport \"./Admin.css\";\r\n\r\nimport NavBar from \"../ui-elements/navBar/NavBar\";\r\nimport { Switch, Route, withRouter, Redirect } from \"react-router-dom\";\r\n\r\nimport Home from \"./pages/Home/Home\";\r\nimport Institutionstructure from \"./pages/Institutionstructure/Institutionstructure\";\r\nimport Messagelist from \"./pages/Message/Messagelist\";\r\nimport Report from \"./pages/Report/Report\";\r\nimport UserMangamenet from \"./pages/UserManagment/UserMangamenet\";\r\nimport VerifyAccount from \"./pages/VerifyAccounts/VerifyAccounts\";\r\nimport Messagecontent from \"./pages/Message/Messagecontent\";\r\n\r\nimport http from \"../../shared/http\";\r\n\r\nimport { Button } from \"react-bootstrap\";\r\nimport { FaPlus } from \"react-icons/fa\";\r\n\r\nclass Admin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeItem: $(\"#adminSidebar .active\").attr(\"name\"),\r\n    };\r\n  }\r\n\r\n  changePage = (event) => {\r\n    //Get active item\r\n    let activeItem = $(\"#adminSidebar .active\");\r\n    //Clicked tab\r\n    let clickedItem = $(event.target);\r\n\r\n    //Remove \"active\" class from the active item\r\n    activeItem.removeClass(\"active\");\r\n\r\n    //Add active class to the clicked item\r\n    clickedItem.addClass(\"active\");\r\n\r\n    //Changing the browser Route\r\n    this.props.history.push(\"/admin/\" + clickedItem.attr(\"name\"));\r\n\r\n    //Setting the states correctly\r\n    this.setState({ activeItem: clickedItem.attr(\"name\") });\r\n  };\r\n\r\n  logout = () => {\r\n    http(\"GET\", \"/login/logout\", {}, (res) => {\r\n      alert(res.data);\r\n      if (res.status == 200) {\r\n        window.location.href = \"http://localhost:3000/\";\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    $(\r\n      \".list-group-item[name=\" +\r\n        this.props.history.location.pathname.split(\"/\")[2] +\r\n        \"]\"\r\n    ).addClass(\"active\");\r\n\r\n    this.setState({ activeItem: $(\"#adminSidebar .active\").attr(\"name\") });\r\n  }\r\n\r\n  render() {\r\n    //Target modal to open when InstitutionStructure + button clicked\r\n    let targetModal = \"#adddept\";\r\n\r\n    //Check if the path is in the /class inside /Institutionstructure\r\n    let path = this.props.history.location.pathname.split(\"/\")[3];\r\n\r\n    if (path == \"class\") {\r\n      targetModal = \"#addclass\";\r\n    }\r\n\r\n    //The content of the right side of the navBar\r\n    let navBarRight = {\r\n      home: (\r\n        <Button variant=\"danger\" className=\"mr-4\" onClick={this.logout}>\r\n          Logout\r\n        </Button>\r\n      ),\r\n      institutionStructure: (\r\n        <Button className=\"mr-4\" data-toggle=\"modal\" data-target={targetModal}>\r\n          <FaPlus />\r\n        </Button>\r\n      ),\r\n      message: null,\r\n      report: null,\r\n      verifyAccount: null,\r\n      userManagement: null,\r\n    };\r\n\r\n    return (\r\n      <div className=\"root\">\r\n        <NavBar>\r\n          {{\r\n            left: <h3>ADMIN</h3>,\r\n            right: navBarRight[this.state.activeItem],\r\n          }}\r\n        </NavBar>\r\n        <div id=\"adminBody\">\r\n          <div id=\"adminSidebar\">\r\n            <div class=\"list-group\">\r\n              <a class=\"list-group-item\" onClick={this.changePage} name=\"home\">\r\n                Home\r\n              </a>\r\n              <a\r\n                class=\"list-group-item\"\r\n                onClick={this.changePage}\r\n                name=\"institutionStructure\"\r\n              >\r\n                Institution Structure\r\n              </a>\r\n              <a\r\n                class=\"list-group-item\"\r\n                onClick={this.changePage}\r\n                name=\"message\"\r\n              >\r\n                Messages\r\n              </a>\r\n              <a\r\n                class=\"list-group-item\"\r\n                onClick={this.changePage}\r\n                name=\"report\"\r\n              >\r\n                Report\r\n              </a>\r\n              <a\r\n                class=\"list-group-item\"\r\n                onClick={this.changePage}\r\n                name=\"verifyAccount\"\r\n              >\r\n                Verify Account\r\n              </a>\r\n              <a\r\n                class=\"list-group-item\"\r\n                onClick={this.changePage}\r\n                name=\"userManagement\"\r\n              >\r\n                User Management\r\n              </a>\r\n            </div>\r\n          </div>\r\n          <div id=\"adminContent\">\r\n            <Switch>\r\n              <Route\r\n                path=\"/admin/message/messagecontent\"\r\n                exact\r\n                component={Messagecontent}\r\n              />\r\n              <Route path=\"/admin/home\" exact>\r\n                <Home />\r\n              </Route>\r\n\r\n              <Route path=\"/admin/institutionstructure\">\r\n                <Institutionstructure />\r\n              </Route>\r\n\r\n              <Route path=\"/admin/message\" exact>\r\n                <Messagelist />\r\n              </Route>\r\n\r\n              <Route path=\"/admin/report\" exact>\r\n                <Report />\r\n              </Route>\r\n\r\n              <Route path=\"/admin/usermanagement\" exact>\r\n                <UserMangamenet />\r\n              </Route>\r\n\r\n              <Route path=\"/admin/verifyaccount\" exact>\r\n                <VerifyAccount />\r\n              </Route>\r\n              <Route path=\"/admin\">\r\n                <Redirect to=\"/admin/home\" />\r\n              </Route>\r\n            </Switch>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Admin);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\Login.js",["305","306","307","308"],"/**\r\n * MAIN SIGNIN/SIGNUP COMPONENT\r\n */\r\nimport { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./login.css\";\r\n\r\nimport Signin from \"./signin/signin\";\r\nimport Signup from \"./sigup/signup\";\r\nimport VerifyOtp from \"./verifyOtp/verifyOtp\";\r\nimport SetPassword from \"./setPassword/SetPassword\";\r\nimport { BrowserRouter, Route, withRouter } from \"react-router-dom\";\r\nimport GoogleSignup from \"./sigup/googleSignup/GoogleSignup\";\r\nimport { FaPowerOff } from \"react-icons/fa\";\r\n\r\n//DISPATH ACTIONS TO CHANGE REDUX STORE DATA (USED FOR SIGNUP PROCEDURE)\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateData: (payload) => dispatch({ type: \"updateSignupData\", payload }),\r\n    clearData: () => dispatch({ type: \"clearSignupData\" }),\r\n  };\r\n};\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      signin: true, //IF SIGNIN TAB ACTIVE\r\n      signup: false, //IF SIGNUP TAB ACTIVE\r\n\r\n      googleSignup: false, //IF GOOGLE SIGNUP WINDOW VISIBLE\r\n      showVerifyOtp: false, //IF OTP VERIFICATION SCREEN IS VISIBLE (DURING SIGNUP)\r\n      showSetPassword: false, //IF PASSWORD ENTRY SCREEN IS VISIBLE (DURING SIGNUP)\r\n      showCloseButton: false,\r\n    };\r\n  }\r\n\r\n  changeTabToSignup = () => {\r\n    this.setState({\r\n      signin: false,\r\n      signup: true,\r\n\r\n      googleSignup: false,\r\n      showVerifyOtp: false,\r\n      showSetPassword: false,\r\n    });\r\n\r\n    this.props.history.push(\"/signup\");\r\n  };\r\n\r\n  changeTabToSignin = () => {\r\n    this.setState({\r\n      signin: true,\r\n      signup: false,\r\n\r\n      googleSignup: false,\r\n      showVerifyOtp: false,\r\n      showSetPassword: false,\r\n    });\r\n    this.props.history.push(\"/signin\");\r\n  };\r\n\r\n  showVerifyOtp = () => {\r\n    this.setState({ showVerifyOtp: true, signin: false, signup: false });\r\n  };\r\n\r\n  otpVerified = () => {\r\n    this.setState({\r\n      showVerifyOtp: false,\r\n      signin: false,\r\n      signup: false,\r\n      googleSignup: false,\r\n      showSetPassword: true,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * INITIALLY SETTING THE VIEW OF THE COMPONENT BASED ON THE RECIEVED PROPS\r\n   * PROPS CAN BE EITHER: signin, signup or googleSignup\r\n   */\r\n  setView = () => {\r\n    if (this.props.signin) {\r\n      this.changeTabToSignin();\r\n    } else if (this.props.signup) {\r\n      this.changeTabToSignup();\r\n    } else if (this.props.googleSignup) {\r\n      this.setState({\r\n        signin: false,\r\n        signup: false,\r\n        showSetPassword: false,\r\n        showVerifyOtp: false,\r\n        googleSignup: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  checkShowCloseButton = () => {\r\n    if (\r\n      (window.screen.availHeight || window.screen.height - 30) <=\r\n      window.innerHeight\r\n    ) {\r\n      this.setState({ showCloseButton: true });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    //Setting initial view of the component base on the props\r\n    this.setView();\r\n\r\n    this.checkShowCloseButton();\r\n  }\r\n\r\n  render() {\r\n    //CSS Style to apply for the active tab SIGNIN or SIGNUP\r\n    let style = {\r\n      \"background-color\": \"rgb(37, 35, 34)\",\r\n      color: \"white\",\r\n    };\r\n\r\n    return (\r\n      <div id=\"loginBody\">\r\n        {/* EXIT BUTTON */}\r\n        {this.state.showCloseButton ? (\r\n          <div id=\"yuvashikshaExit\">\r\n            <button\r\n              className=\"btn btn-danger\"\r\n              title=\"Exit Yuvashiksha\"\r\n              onClick={() => {\r\n                if (window.confirm(\"Are you sure to exit Yuvashiksha?\"))\r\n                  navigator.clipboard.writeText(\"close-yuvashiksha\");\r\n              }}\r\n            >\r\n              <FaPowerOff />\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n\r\n        <div\r\n          className=\"d-flex align-items-center justify-content-center\"\r\n          style={{ height: \"100vh\" }}\r\n        >\r\n          <div className=\"card\" id=\"login-card\" style={{ width: \"25rem\" }}>\r\n            <div className=\"card-body\">\r\n              <nav class=\"nav nav-pills nav-fill\">\r\n                <a\r\n                  className=\"nav-item nav-link active\"\r\n                  href=\"#\"\r\n                  id=\"signin-tab\"\r\n                  onClick={this.changeTabToSignin}\r\n                  style={this.state.signin ? style : null}\r\n                >\r\n                  SIGN IN\r\n                </a>\r\n                <a\r\n                  className=\"nav-item nav-link\"\r\n                  href=\"#\"\r\n                  id=\"signup-tab\"\r\n                  onClick={this.changeTabToSignup}\r\n                  style={this.state.signin ? null : style}\r\n                >\r\n                  SIGN UP\r\n                </a>\r\n              </nav>\r\n              {this.state.signin ? <Signin /> : null}\r\n              {this.state.signup ? (\r\n                <Signup otpSent={this.showVerifyOtp} />\r\n              ) : null}\r\n              {this.state.showVerifyOtp ? (\r\n                <VerifyOtp otpVerified={this.otpVerified} />\r\n              ) : null}\r\n              {this.state.showSetPassword ? <SetPassword /> : null}\r\n              {this.state.googleSignup ? <GoogleSignup /> : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(Login));\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\ListItem\\ListItem.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\shared\\dailogBox.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Teacher.js",["309","310","311","312","313","314","315","316","317"],"import { Component } from \"react\";\r\nimport \"./Teacher.css\";\r\n\r\nimport NavBar from \"../ui-elements/navBar/NavBar\";\r\nimport TabView from \"../ui-elements/TabView/TabView\";\r\nimport ListItem from \"../ui-elements/ListItem/ListItem\";\r\nimport NewExam from \"./newExam/NewExam\";\r\nimport PreviousExam from \"./previousExam/PreviousExam\";\r\nimport TeacherProfile from \"./TeacherProfile/TeacherProfile\";\r\nimport { FaUserCircle } from \"react-icons/fa\";\r\nimport { Route, withRouter } from \"react-router-dom\";\r\nimport http from \"../../shared/http\";\r\nimport React from \"react\";\r\nimport QuestionPaperPreview from \"./questionpaperpreview/QuestionpaperPreview\";\r\n\r\nclass Teacher extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      examData: [],\r\n      examList: [],\r\n      previousExamList: [],\r\n      classes: [],\r\n      classOptions: null,\r\n      batchOptions: null,\r\n      teacherSelect: null,\r\n      showEmpty: true,\r\n      editExam: null,\r\n      teacherData: {},\r\n      restrictedExam: false,\r\n      teacherSelectDisabled: true,\r\n      selectedExam: null,\r\n    };\r\n\r\n    this.userRole = \"teacher\";\r\n  }\r\n\r\n  //Creating ref objects\r\n  batchRef = React.createRef();\r\n  classRef = React.createRef();\r\n  teacherRef = React.createRef();\r\n\r\n  //Set list view of the exams\r\n  setExamData = () => {\r\n    let currentTime = new Date();\r\n    let previousExamList = [];\r\n    let examList = [];\r\n\r\n    for (let item of this.state.examData) {\r\n      let examDate = new Date(`${item.date},${item.to}`);\r\n\r\n      let newItem = (\r\n        <ListItem\r\n          height=\"100px\"\r\n          key={item._id}\r\n          onClick={() => {\r\n            this.examListClickListener(item._id);\r\n          }}\r\n        >\r\n          {{\r\n            left: (\r\n              <div id=\"leftListItem\">\r\n                <p>Exam Name: {item.examName}</p>\r\n                <p>Subject: {item.subject}</p>\r\n                <p>Date: {item.date}</p>\r\n              </div>\r\n            ),\r\n            right: (\r\n              <div id=\"rightListItem\">\r\n                <p>\r\n                  Time: {item.from} - {item.to}\r\n                </p>\r\n                <p>{item.totalMarks} Marks</p>\r\n              </div>\r\n            ),\r\n          }}\r\n        </ListItem>\r\n      );\r\n\r\n      if (currentTime.getTime() > examDate.getTime()) {\r\n        previousExamList.push(newItem);\r\n      } else {\r\n        examList.push(newItem);\r\n      }\r\n    }\r\n    this.setState({\r\n      previousExamList,\r\n      examList,\r\n    });\r\n  };\r\n\r\n  newExam = () => {\r\n    this.props.history.push(\"/teacher/newexam\");\r\n  };\r\n\r\n  //Opens the teacher profile view\r\n  openProfile = () => {\r\n    this.props.history.push(\"/teacher/profile\");\r\n  };\r\n\r\n  //Get exam data from server\r\n  getExamData = () => {\r\n    http(\r\n      \"POST\",\r\n      \"/teacher/getexams\",\r\n      {\r\n        Class: this.classRef.current.value,\r\n        batch: this.batchRef.current.value,\r\n      },\r\n      (res) => {\r\n        this.setState({ examData: res.data }, this.setExamData);\r\n      }\r\n    );\r\n  };\r\n\r\n  //Get class informations\r\n  getClasses = () => {\r\n    http(\"GET\", \"/teacher/getclasses\", {}, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ classes: res.data }, () => {\r\n          // this.getTeacherData();\r\n          this.setupClassOptions();\r\n        });\r\n      } else {\r\n        //Error found\r\n        alert(res.data);\r\n      }\r\n    });\r\n  };\r\n\r\n  //Setup the options for the <select> for classes\r\n  setupClassOptions = () => {\r\n    //Options JSX\r\n    let options = [];\r\n\r\n    options = Object.keys(this.state.classes).map((key, array) => {\r\n      return (\r\n        <option key={Date.now() + key} value={key}>\r\n          {key}\r\n        </option>\r\n      );\r\n    });\r\n\r\n    //Setting class list options to display\r\n    this.setState({ classOptions: options });\r\n  };\r\n\r\n  //Setup the options for the <select> for batches based on the selected Class\r\n  setupBatchOptions = () => {\r\n    //Currently selected class\r\n    let Class = this.classRef.current.value;\r\n\r\n    if (!Class) return;\r\n\r\n    //Getting batches of the selected class\r\n    let batches = this.state.classes[Class].batches;\r\n\r\n    let options = batches.map((batch, index, array) => {\r\n      return (\r\n        <option key={Date.now() + batch} value={batch}>\r\n          {batch}\r\n        </option>\r\n      );\r\n    });\r\n\r\n    //Setting options as state to diaplay it in screen\r\n    this.setState({ batchOptions: options });\r\n  };\r\n\r\n  //onChange handler for class <select>\r\n  classChanged = (event) => {\r\n    this.batchRef.current.value = \"\";\r\n    this.setState({ teacherSelectDisabled: true }, () =>\r\n      this.setUpTeacherSelect()\r\n    );\r\n\r\n    this.setupBatchOptions();\r\n\r\n    this.checkClassSelected();\r\n  };\r\n\r\n  //onChange Listener for Batch <select>\r\n  batchChanged = (event) => {\r\n    if (\r\n      !this.props.mentor ||\r\n      (this.classRef.current.value == this.props.mentor.name &&\r\n        this.batchRef.current.value == this.props.mentor.batch)\r\n    ) {\r\n      this.setState({ teacherSelectDisabled: false }, () =>\r\n        this.setUpTeacherSelect()\r\n      );\r\n    } else {\r\n      this.setState({ teacherSelectDisabled: true }, () =>\r\n        this.setUpTeacherSelect()\r\n      );\r\n    }\r\n\r\n    this.checkClassSelected();\r\n  };\r\n\r\n  //Check if both class and batch is selected or not\r\n  checkClassSelected = () => {\r\n    if (\r\n      this.classRef.current &&\r\n      this.classRef.current.value &&\r\n      this.batchRef.current.value &&\r\n      this.teacherRef.current &&\r\n      this.teacherRef.current.value\r\n    ) {\r\n      this.setState({ showEmpty: false });\r\n      this.getTeacherExams();\r\n    } else if (\r\n      this.classRef.current &&\r\n      this.classRef.current.value &&\r\n      this.batchRef.current.value\r\n    ) {\r\n      this.setState({ showEmpty: false });\r\n      this.getExamData();\r\n    } else {\r\n      this.setState({ showEmpty: true });\r\n    }\r\n  };\r\n\r\n  //When an exam list item is clicked\r\n  examListClickListener = (examId) => {\r\n    let examItem;\r\n\r\n    //Get exam data of the selected list item\r\n    for (let exam of this.state.examData) {\r\n      if (exam._id === examId) {\r\n        examItem = exam;\r\n      }\r\n    }\r\n\r\n    //Checking previous or scheduled exam\r\n    let examDate = new Date(`${examItem.date},${examItem.to}`);\r\n    let currentTime = new Date();\r\n\r\n    if (currentTime.getTime() > examDate.getTime()) {\r\n      this.openPreviousExam(examItem);\r\n    } else {\r\n      this.openEditExam(examItem);\r\n    }\r\n  };\r\n\r\n  //Open edit exam page\r\n  openEditExam = (examData) => {\r\n    let newState = { editExam: examData };\r\n\r\n    //If Exam editing is not permitted\r\n    if (this.teacherRef.current && this.teacherRef.current.value) {\r\n      //HOD or MENTOR data exam is currently selected\r\n      newState.restrictedExam = true;\r\n    } else {\r\n      newState.restrictedExam = false;\r\n    }\r\n\r\n    this.setState(newState, () => {\r\n      this.props.history.push(\"/teacher/previewexam\");\r\n    });\r\n  };\r\n\r\n  //Get the data of other teachers in case of MENTOR or HOD user\r\n  getTeacherData = () => {\r\n    if (this.userRole == \"hod\") {\r\n      http(\"GET\", \"/teacher/hod\", {}, (res) => {\r\n        if (res.status == 200)\r\n          this.setState({ teacherData: res.data }, () => {\r\n            this.setUpTeacherSelect();\r\n          });\r\n        else alert(\"Teachers data not found\");\r\n      });\r\n    } else if (this.userRole == \"mentor\") {\r\n      http(\"GET\", \"/teacher/mentor\", {}, (res) => {\r\n        if (res.status == 200)\r\n          this.setState({ teacherData: res.data }, () => {\r\n            this.setUpTeacherSelect();\r\n          });\r\n        else alert(\"Teachers data not found\");\r\n      });\r\n    }\r\n  };\r\n\r\n  //Return the JSX for <option> for teacher select in Case of HOD or MENTOR user\r\n  getTeacherOptions = () => {\r\n    return Object.keys(this.state.teacherData).map((key, array) => {\r\n      if (this.props.user.user._id != key)\r\n        return (\r\n          <option key={Date.now() + key} value={key}>\r\n            {this.state.teacherData[key].name}\r\n          </option>\r\n        );\r\n      else return null;\r\n    });\r\n  };\r\n\r\n  //Teacher select change listener\r\n  getTeacherExams = () => {\r\n    let teacher = this.teacherRef.current.value;\r\n    let Class = this.classRef.current.value;\r\n    let batch = this.batchRef.current.value;\r\n\r\n    if (teacher && Class && batch) {\r\n      http(\r\n        \"POST\",\r\n        \"/teacher/getexams/hod\",\r\n        { Class, batch, teacher },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            this.setState({ examData: res.data }, () => {\r\n              this.setExamData();\r\n            });\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  //Check HOD or MENTOR\r\n  checkUserRole = () => {\r\n    if (this.props.hod) this.userRole = \"hod\";\r\n    else if (this.props.mentor) this.userRole = \"mentor\";\r\n  };\r\n\r\n  //Setup HOD or MENTOR TEacher select\r\n  setUpTeacherSelect = () => {\r\n    //Checking HOD or MENTOR priveillege of thee user\r\n    let hodOrMentor = null;\r\n\r\n    if (this.props.hod) {\r\n      hodOrMentor = (\r\n        <div className=\"col-sm-2\" id=\"teacher-select\">\r\n          <select\r\n            className=\"form-select mt-2\"\r\n            name=\"teacher\"\r\n            id=\"teacher\"\r\n            onChange={this.checkClassSelected}\r\n            ref={this.teacherRef}\r\n          >\r\n            <option value=\"\">--TEACHER--</option>\r\n            {this.getTeacherOptions()}\r\n          </select>\r\n        </div>\r\n      );\r\n    } else if (this.props.mentor) {\r\n      hodOrMentor = (\r\n        <div className=\"col-sm-2\" id=\"teacher-select\">\r\n          <select\r\n            className=\"form-select mt-1\"\r\n            name=\"teacher\"\r\n            id=\"teacher\"\r\n            ref={this.teacherRef}\r\n            onChange={this.checkClassSelected}\r\n            disabled={this.state.teacherSelectDisabled}\r\n          >\r\n            <option value=\"\">--TEACHER--</option>\r\n            {this.getTeacherOptions()}\r\n          </select>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    this.setState({ teacherSelect: hodOrMentor });\r\n  };\r\n\r\n  //When an previos exam is clicked\r\n  openPreviousExam = (exam) => {\r\n    // if (exam.teacher == this.props.user.user._id) {\r\n    this.setState({ selectedExam: exam }, () => {\r\n      this.props.history.push(\"/teacher/previousexam\");\r\n    });\r\n    // } else {\r\n    //   alert(\"You cannot evaluate this exam\");\r\n    //   console.log(exam.teacher, this.props.user.user._id);\r\n    // }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getTeacherData();\r\n    this.checkClassSelected();\r\n    this.getClasses();\r\n\r\n    console.log(this.props);\r\n  }\r\n\r\n  render() {\r\n    this.checkUserRole();\r\n    return (\r\n      <div>\r\n        <Route path=\"/teacher\" exact>\r\n          <NavBar>\r\n            {{\r\n              left: (\r\n                <h5 id=\"profileText\" onClick={this.openProfile}>\r\n                  <FaUserCircle className=\"mr-3 ml-3\" size={40} />\r\n                  {this.props.user.user.name}\r\n                </h5>\r\n              ),\r\n              right: (\r\n                <div className=\"container\" id=\"NavBarRight\">\r\n                  <div className=\"row\">\r\n                    <div\r\n                      className=\"col-sm-4 align-self-center\"\r\n                      id=\"NavBarInfoText\"\r\n                    >\r\n                      <p>Select Class and Batch : </p>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                      <select\r\n                        className=\"form-select mt-1\"\r\n                        name=\"class\"\r\n                        ref={this.classRef}\r\n                        id=\"class\"\r\n                        onChange={this.classChanged}\r\n                      >\r\n                        <option value=\"\">--CLASS--</option>\r\n                        {this.state.classOptions}\r\n                      </select>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                      <select\r\n                        className=\"form-select mt-1\"\r\n                        name=\"batch\"\r\n                        ref={this.batchRef}\r\n                        id=\"batch\"\r\n                        onChange={this.batchChanged}\r\n                      >\r\n                        <option value=\"\">--BATCH--</option>\r\n                        {this.state.batchOptions}\r\n                      </select>\r\n                    </div>\r\n\r\n                    {this.state.teacherSelect}\r\n                  </div>\r\n                </div>\r\n              ),\r\n            }}\r\n          </NavBar>\r\n          {/* Check if the BATCH and Class are selected or not */}\r\n          {this.state.showEmpty ||\r\n          this.batchRef.current == null ||\r\n          this.batchRef.current.value == null ? (\r\n            <div\r\n              id=\"emptyScreen\"\r\n              className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n              <h4>PLEASE SELECT A CLASS AND BATCH</h4>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              <TabView>\r\n                {{\r\n                  leftTab: <span>SCHEDULED EXAMS</span>,\r\n                  rightTab: <span>PREVIOUS EXAMS</span>,\r\n                  leftTabBody: (\r\n                    <div id=\"leftTabBody\">{this.state.examList}</div>\r\n                  ),\r\n                  rightTabBody: (\r\n                    <div id=\"rightTabBody\">{this.state.previousExamList}</div>\r\n                  ),\r\n                }}\r\n              </TabView>\r\n            </>\r\n          )}\r\n          <div id=\"new-exam\" onClick={this.newExam}>\r\n            <div id=\"floatButtonText\">+</div>\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/teacher/newexam\">\r\n          <NewExam />\r\n        </Route>\r\n        <Route path=\"/teacher/previousexam\">\r\n          <PreviousExam exam={this.state.selectedExam} />\r\n        </Route>\r\n        <Route path=\"/teacher/previewexam\">\r\n          {this.state.editExam ? (\r\n            <QuestionPaperPreview\r\n              exam={this.state.editExam}\r\n              Class={this.classRef.current ? this.classRef.current.value : null}\r\n              batch={this.classRef.current ? this.batchRef.current.value : null}\r\n              restricted={this.state.restrictedExam}\r\n            />\r\n          ) : null}\r\n        </Route>\r\n        <Route path=\"/teacher/profile\">\r\n          <TeacherProfile user={this.props.user} />\r\n        </Route>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Teacher);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\TabView\\TabView.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\AdminLogin\\AdminLogin.js",["318","319","320"],"import React, { Component } from \"react\";\r\nimport \"./AdminLogin.css\";\r\nimport http from \"../../../shared/http\";\r\n\r\nclass AdminLogin extends Component {\r\n  //Creating ref for the input fields\r\n  username = React.createRef();\r\n  password = React.createRef();\r\n\r\n  //Login button Click listener\r\n  login = (e) => {\r\n    e.preventDefault();\r\n\r\n    //Getting form values\r\n    let username = this.username.current.value;\r\n    let password = this.password.current.value;\r\n\r\n    if (password != \"\" && username != \"\") {\r\n      http(\r\n        \"POST\",\r\n        \"/login/admin\",\r\n        { username, password, adminLogin: true },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Login Success\");\r\n            //Refresh the page\r\n            window.location.href = \"http://localhost:3000/admin/home\";\r\n          } else {\r\n            alert(res.data);\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      alert(\"Please fill all data\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div\r\n          className=\"container col-md-3 mt-5 p-3\"\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            border: \"2px solid grey\",\r\n            borderRadius: \"10px\",\r\n          }}\r\n        >\r\n          <form>\r\n            <div class=\"form-group\">\r\n              <h4>ADMIN LOGIN</h4>\r\n              <label for=\"username\">Username</label>\r\n              <input\r\n                ref={this.username}\r\n                type=\"email\"\r\n                class=\"form-control\"\r\n                id=\"username\"\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </div>\r\n            <div class=\"form-group\">\r\n              <label for=\"password\">Password</label>\r\n              <input\r\n                ref={this.password}\r\n                type=\"password\"\r\n                class=\"form-control\"\r\n                id=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            </div>\r\n            <button type=\"submit\" class=\" btn-success\" onClick={this.login}>\r\n              LOGIN\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AdminLogin;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\shared\\http.js",["321"],"import axios from \"axios\";\r\nimport { serverDomain } from \"../config\";\r\nimport parseCookie from \"./parseCookie\";\r\n\r\nlet http = (\r\n  method = \"GET\",\r\n  url = \"/\",\r\n  body = null,\r\n  callback = null,\r\n  errorCallback = null\r\n) => {\r\n  //Variable for storing response from server\r\n  let responseFromServer;\r\n\r\n  if (method == \"POST\") {\r\n    body = { ...body, cookies: parseCookie() };\r\n  }\r\n\r\n  axios({\r\n    method: method,\r\n    url: serverDomain + url,\r\n    data: body,\r\n    withCredentials: true,\r\n  })\r\n    .then((response) => {\r\n      console.log(`${method} request send to ${serverDomain + url}`);\r\n      console.log(\"Response from server: \", response);\r\n      responseFromServer = response;\r\n\r\n      if (callback) callback(response);\r\n    })\r\n    .catch((err) => {\r\n      alert(\"Error occured during http request. \\n Check console for log data\");\r\n      console.log(err);\r\n      if (errorCallback) errorCallback(err);\r\n    });\r\n\r\n  return responseFromServer;\r\n};\r\n\r\nexport default http;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\components\\StudentProfile\\StudentProfile.js",["322","323","324","325"],"import React, { Component } from \"react\";\r\nimport NavBar from \"../../../ui-elements/navBar/NavBar\";\r\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport http from \"../../../../shared/http\";\r\nimport \"./StudentProfile.css\";\r\nimport configuireDialogBox from \"../../../../shared/dailogBox\";\r\n\r\nexport class StudentProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { otpDisabled: true };\r\n  }\r\n\r\n  //Creating necessary reference object\r\n  newEmailRef = React.createRef();\r\n  otpRef = React.createRef();\r\n  passwordRef = React.createRef();\r\n  confirmRef = React.createRef();\r\n\r\n  //Logout user\r\n  logout = () => {\r\n    http(\"GET\", \"/login/logout\", {}, (res) => {\r\n      alert(res.data);\r\n      if (res.status == 200) {\r\n        window.location.href = \"http://localhost:3000/\";\r\n      }\r\n    });\r\n  };\r\n\r\n  //email validation\r\n  validateEmail = (email) => {\r\n    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  //Save changes to user account\r\n  saveUserAccount = () => {\r\n    let password = this.passwordRef.current.value;\r\n    let confirm = this.confirmRef.current.value;\r\n\r\n    if (password) {\r\n      if (password == confirm) {\r\n        http(\"POST\", \"/student/profile/save\", { password }, (res) => {\r\n          alert(res.data);\r\n        });\r\n      } else {\r\n        alert(\"Passwords does not match\");\r\n      }\r\n    } else {\r\n      alert(\"Enter new Password!\");\r\n    }\r\n  };\r\n\r\n  //When click GET OTP button in change email modal\r\n  getOtpClickListener = () => {\r\n    let newEmail = this.newEmailRef.current.value;\r\n\r\n    if (newEmail && this.validateEmail(newEmail)) {\r\n      http(\r\n        \"POST\",\r\n        \"/register/changeemail/sendotp\",\r\n        { email: newEmail },\r\n        (res) => {\r\n          alert(res.data);\r\n          if (res.status == 200) {\r\n            this.otpSentSuccess();\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      alert(\"New Email is not valid\");\r\n    }\r\n  };\r\n\r\n  //Called when OTP is send successfully\r\n  otpSentSuccess = () => {\r\n    this.setState({ otpDisabled: false });\r\n  };\r\n\r\n  //Reset the modal to change email\r\n  resetModal = () => {\r\n    this.newEmailRef.current.value = \"\";\r\n\r\n    this.setState({ otpDisabled: true });\r\n  };\r\n\r\n  //Verify the OTP\r\n  verifyOtp = () => {\r\n    let otp = this.otpRef.current.value;\r\n    let email = this.newEmailRef.current.value;\r\n\r\n    if (otp) {\r\n      http(\"POST\", \"/register/changeemail/verify\", { otp, email }, (res) => {\r\n        alert(res.data);\r\n\r\n        if (res.status == 200) {\r\n          window.$(\"#change-email\").modal(\"toggle\");\r\n        }\r\n      });\r\n    } else {\r\n      alert(\"Please enter OTP\");\r\n    }\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Configure the change email modal */}\r\n        {configuireDialogBox(\r\n          \"change-email\",\r\n          \"Change Email\",\r\n          <>\r\n            <div>\r\n              Email:\r\n              <br />\r\n              <input\r\n                type=\"text\"\r\n                name=\"new-email\"\r\n                placeholder=\"New Email\"\r\n                id=\"new-email\"\r\n                ref={this.newEmailRef}\r\n                disabled={!this.state.otpDisabled}\r\n              ></input>\r\n              <br />\r\n              <div className=\"text-right\">\r\n                <input\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary mt-3\"\r\n                  value=\"GET OTP\"\r\n                  onClick={this.getOtpClickListener}\r\n                />\r\n              </div>\r\n              OTP:\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Enter OTP\"\r\n                name=\"otp\"\r\n                id=\"otp\"\r\n                disabled={this.state.otpDisabled}\r\n                ref={this.otpRef}\r\n              />\r\n            </div>\r\n          </>,\r\n          <>\r\n            <input\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              value=\"VERIFY\"\r\n              disabled={this.state.otpDisabled}\r\n              onClick={this.verifyOtp}\r\n            />\r\n          </>\r\n        )}\r\n        <NavBar>\r\n          {{\r\n            left: (\r\n              <h5>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  className=\"btn btn-primary mr-3\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    window.history.back();\r\n                  }}\r\n                >\r\n                  {\"<\"}\r\n                </Button>\r\n                {this.props.user.name}\r\n              </h5>\r\n            ),\r\n            right: (\r\n              <h5>\r\n                <Button\r\n                  className=\"logoutBtn\"\r\n                  onClick={this.logout}\r\n                >\r\n                  LOGOUT\r\n                </Button>\r\n              </h5>\r\n            ),\r\n          }}\r\n        </NavBar>\r\n        <div\r\n          id=\"studentProfileBody\"\r\n          className=\"d-flex align-items-center justify-content-center\"\r\n        >\r\n          {/* <img src=\"...\" alt=\"...\" class=\"rounded-circle mt-5\"></img> */}\r\n\r\n          <Form className=\"col-sm-6\">\r\n            <center className=\"mb-3\">\r\n              <h5>ACCOUNT DETAILS</h5>\r\n            </center>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"4\">\r\n                Email\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  disabled\r\n                  value={this.props.user.email}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <div className=\"text-right\">\r\n              <input\r\n                type=\"button\"\r\n                value=\"CHANGE EMAIL\"\r\n                id=\"changeBtn\"\r\n                className=\"btn btn-primary mb-2\"\r\n                data-toggle=\"modal\"\r\n                data-target=\"#change-email\"\r\n                onClick={this.resetModal}\r\n              />\r\n            </div>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"4\">\r\n                Admission Number\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  value={this.props.user.registerNumber}\r\n                  disabled\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"4\">\r\n                Class\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control type=\"text\" value={this.props.Class} disabled />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"4\">\r\n                Batch\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control type=\"text\" value={this.props.batch} disabled />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"4\">\r\n                Department\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  value={this.props.department}\r\n                  disabled\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"4\">\r\n                Parent's Email\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  value={this.props.user.parentEmail}\r\n                  disabled\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <center className=\"mb-3\">\r\n              <h5>CHANGE PASSWORD</h5>\r\n            </center>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"4\">\r\n                New Password\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  ref={this.passwordRef}\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <Form.Group as={Row}>\r\n              <Form.Label column sm=\"4\">\r\n                Confirm Password\r\n              </Form.Label>\r\n              <Col sm=\"8\">\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  ref={this.confirmRef}\r\n                  placeholder=\"Confirm\"\r\n                />\r\n              </Col>\r\n            </Form.Group>\r\n            <p className=\"ml-2 text-right\">\r\n              <Button\r\n                className=\"ml-7\"\r\n                variant=\"primary\"\r\n                onClick={this.saveUserAccount}\r\n              >\r\n                SAVE PASSWORD\r\n              </Button>\r\n            </p>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StudentProfile;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\components\\examguidelines\\ExamGuidlines.js",["326"],"import React, { Component } from \"react\";\r\nimport NavBar from \"../../../ui-elements/navBar/NavBar\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./examguidliness.css\";\r\nimport http from \"../../../../shared/http\";\r\n\r\nclass ExamGuidlines extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  //Check if all props are correclty available\r\n  checkProps = () => {\r\n    if (!this.props.exam) {\r\n      alert(\"Reloading the page will return you to the homepage\");\r\n      this.props.history.push(\"/student\");\r\n    }\r\n  };\r\n\r\n  //Prevent user page refresh\r\n  preventPageRefresh = () => {\r\n    window.onbeforeunload = function () {\r\n      alert(\"Reloading the page will return you to the homepage\");\r\n\r\n      return \"Reloading the page will stop the current examination. Are you sure ?\";\r\n    };\r\n  };\r\n\r\n  //When clicking the start exam button\r\n  startExam = () => {\r\n    if (\r\n      window.confirm(\r\n        \"Are you sure to start the examination? \\n(Make sure you have a webcam connected to your device)\"\r\n      )\r\n    ) {\r\n      //Check if the student already finished the exam\r\n      this.checkCompleted();\r\n    }\r\n  };\r\n\r\n  //Check if exam completed\r\n  checkCompleted = () => {\r\n    http(\r\n      \"POST\",\r\n      \"/student/checkcompleted\",\r\n      { exam: this.props.exam._id },\r\n      (res) => {\r\n        if (res.status == 200) {\r\n          this.props.history.push(\"/student/exam/checkcamera\");\r\n        } else {\r\n          alert(\"You already completed this exam!\");\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.preventPageRefresh();\r\n    console.log(this.props);\r\n  }\r\n\r\n  render() {\r\n    //Check if all props available\r\n    this.checkProps();\r\n\r\n    return (\r\n      <>\r\n        <NavBar>\r\n          {{\r\n            left: (\r\n              <h5>\r\n                <div id=\"navBarTitleContainer\">\r\n                  <Button\r\n                    variant=\"primary\"\r\n                    className=\"btn btn-primary mr-3\"\r\n                    size=\"sm\"\r\n                    onClick={() => {\r\n                      window.history.back();\r\n                    }}\r\n                  >\r\n                    {\"<\"}\r\n                  </Button>\r\n                  EXAM GUIDELINES\r\n                </div>\r\n              </h5>\r\n            ),\r\n          }}\r\n        </NavBar>\r\n        <div id=\"examguidelines\">\r\n          <div className=\"col-sm-8 offset-sm-2\" id=\"guidlinesContainer\">\r\n            <h3 className=\"text-center ml-4\">EXAM GUIDELINES</h3>\r\n            <br />\r\n            <div>\r\n              <h6>\r\n                EXAM NAME: {this.props.exam ? this.props.exam.examName : null}\r\n                <br />\r\n                SUBJECT: {this.props.exam ? this.props.exam.subject : null}\r\n              </h6>\r\n            </div>\r\n            <ul className=\"mt-3\">\r\n              <li className=\"mt-3\">\r\n                Participants must have an active internet connction throughout\r\n                the exam\r\n              </li>\r\n              <li className=\"mt-3\">\r\n                You must allow the permission to access camera and microphone\r\n              </li>\r\n              <li className=\"mt-3\">\r\n                Participants are under the survillance. Any kind of malpractice\r\n                detected by the system will lead to disqualification of your\r\n                exam\r\n              </li>\r\n              <li className=\"mt-3\">\r\n                Participants must stay in the examination window till the exam\r\n                is finished.\r\n              </li>\r\n              <li className=\"mt-3\">\r\n                Participants must be seated in a good lighting condition\r\n              </li>\r\n              <li className=\"mt-3\">\r\n                Participants must NOT use any kind of communication devices\r\n                during examination.\r\n              </li>\r\n              <li className=\"mt-3\">\r\n                <b>Do NOT refresh the page during the examination</b>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"text-right mr-3\">\r\n            <Button\r\n              className=\"text-right\"\r\n              variant=\"success\"\r\n              onClick={this.startExam}\r\n            >\r\n              START EXAM\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(ExamGuidlines);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\student\\components\\startexam\\StartExam.js",["327","328","329","330","331","332","333","334","335","336","337","338","339","340","341"],"import React, { Component } from \"react\";\r\nimport NavBar from \"../../../ui-elements/navBar/NavBar\";\r\nimport { withRouter, Route, Redirect } from \"react-router-dom\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { FaRegCheckCircle } from \"react-icons/fa\";\r\nimport \"./startexam.css\";\r\nimport $ from \"jquery\";\r\nimport Question from \"../../../teacher/Question/Question\";\r\nimport Canvas from \"../../../ui-elements/Canvas/Canvas\";\r\nimport http from \"../../../../shared/http\";\r\n\r\n//For camera purposes\r\nlet imageCapture = null;\r\nlet stream = null;\r\n\r\nclass StartExam extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      time: {},\r\n      seconds: 0,\r\n      showCanvas: false,\r\n      canvasQuestion: null,\r\n      answers: {},\r\n      images: [],\r\n      completed: false,\r\n    };\r\n\r\n    //For time left functionality\r\n    this.timer = 0;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n\r\n    //For the qestion Paper header\r\n    this.timeDuration = 0;\r\n\r\n    this.timeOutId = null;\r\n\r\n    this.capturedImage = \"initial\";\r\n  }\r\n\r\n  //Check if all props are correctly available\r\n  checkProps = () => {\r\n    if (!this.props.exam) {\r\n      alert(\"Reloading the page will return you to the homepage\");\r\n      window.history.back();\r\n    }\r\n  };\r\n\r\n  //Prevent user page refresh\r\n  preventPageRefresh = () => {\r\n    window.onbeforeunload = function () {\r\n      alert(\"Reloading the page will return you to the homepage\");\r\n\r\n      return \"Reloading the page will stop the current examination. Are you sure ?\";\r\n    };\r\n  };\r\n\r\n  //Get user camera privillage\r\n  getMediaStream = async () => {\r\n    let flag = false;\r\n\r\n    await window.navigator.mediaDevices\r\n      .getUserMedia({ video: true })\r\n      .then(function (mediaStream) {\r\n        stream = mediaStream;\r\n        let mediaStreamTrack = mediaStream.getVideoTracks()[0];\r\n        imageCapture = new ImageCapture(mediaStreamTrack);\r\n\r\n        flag = true;\r\n      })\r\n      .catch((error) => {\r\n        alert(\"Camera not accessible\");\r\n        console.log(\"Error getting camera : \" + error);\r\n        flag = false;\r\n      });\r\n\r\n    return flag;\r\n  };\r\n\r\n  //Take photo with camera\r\n  takePhoto = async () => {\r\n    return await imageCapture\r\n      .takePhoto()\r\n      .then(\r\n        (blob) =>\r\n          new Promise((resolve, reject) => {\r\n            var reader = new FileReader();\r\n\r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = () => {\r\n              resolve(reader.result);\r\n            };\r\n\r\n            // window.URL.revokeObjectURL(url);\r\n          })\r\n      )\r\n      .catch((err) => {\r\n        console.log(\"Error capture photo  : \" + err);\r\n      });\r\n  };\r\n\r\n  secondsToTime(secs) {\r\n    let hours = Math.floor(secs / (60 * 60));\r\n\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let obj = {\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds,\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.timer == 0 && this.state.seconds > 0) {\r\n      this.timer = setInterval(this.countDown, 1000);\r\n    }\r\n  }\r\n\r\n  countDown() {\r\n    // Remove one second, set state so a re-render happens.\r\n    let seconds = this.state.seconds - 1;\r\n    this.setState(\r\n      {\r\n        time: this.secondsToTime(seconds),\r\n        seconds: seconds,\r\n      },\r\n      () => {\r\n        // Check if we're at zero.\r\n        if (seconds <= 0) {\r\n          clearInterval(this.timer);\r\n          this.examTimeOut();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  //Set the inital setup for the timer\r\n  setUpTimer = () => {\r\n    if (this.props.exam) {\r\n      //Setting the inital value of the timer\r\n      let currentTime = new Date();\r\n      let examFinishTime = new Date(\r\n        `${this.props.exam ? this.props.exam.date : \"\"},${\r\n          this.props.exam ? this.props.exam.to : \"\"\r\n        }`\r\n      );\r\n\r\n      let timeDiffrence = examFinishTime.getTime() - currentTime.getTime();\r\n\r\n      this.setState({ seconds: timeDiffrence / 1000 }, () => {\r\n        //Counting time left initial value setup\r\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n        this.setState({ time: timeLeftVar });\r\n      });\r\n    }\r\n  };\r\n\r\n  //Parse the questions to display it\r\n  parseQuestions = () => {\r\n    let questionNumber = 0;\r\n\r\n    if (!this.props.exam) return;\r\n\r\n    return this.props.exam.questionPaper.map((question, index) => {\r\n      //Count the question Number\r\n      if (question.type != \"header\" && question.type != \"text\") {\r\n        questionNumber++;\r\n      }\r\n\r\n      return (\r\n        <Question\r\n          question={question}\r\n          index={questionNumber}\r\n          key={question.id}\r\n          canvasClick={\r\n            question.type == \"short\" || question.type == \"essay\"\r\n              ? () => {\r\n                  this.openCanvas(question);\r\n                }\r\n              : null\r\n          }\r\n          optionChange={\r\n            question.type == \"mcq\"\r\n              ? (value) => this.mcqOptionChanged(question, value)\r\n              : null\r\n          }\r\n          textChange={\r\n            question.type == \"short\" || question.type == \"essay\"\r\n              ? (value) => {\r\n                  this.textChange(question, value);\r\n                }\r\n              : null\r\n          }\r\n          examMode //Indicate that the question is in the startExam component\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  //Convert milliseconds to time format string\r\n  msToTime = (s) => {\r\n    // Pad to 2 or 3 digits, default is 2\r\n    function pad(n, z) {\r\n      z = z || 2;\r\n      return (\"00\" + n).slice(-z);\r\n    }\r\n\r\n    var ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    var secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    var mins = s % 60;\r\n    var hrs = (s - mins) / 60;\r\n\r\n    return pad(hrs) + \":\" + pad(mins) + \":\" + pad(secs);\r\n  };\r\n\r\n  //Calculate time duration of the exam\r\n  calculateTimeDuration = () => {\r\n    if (!this.props.exam) return;\r\n\r\n    let to = new Date(`${this.props.exam.date},${this.props.exam.to}`);\r\n    let from = new Date(`${this.props.exam.date},${this.props.exam.from}`);\r\n\r\n    let differenceInMilliSeconds = to.getTime() - from.getTime();\r\n\r\n    this.timeDuration = this.msToTime(differenceInMilliSeconds);\r\n  };\r\n\r\n  //Open the canvas\r\n  openCanvas = (question) => {\r\n    this.setState({ canvasQuestion: question, showCanvas: true });\r\n  };\r\n\r\n  //Close canvas\r\n  closeCanvas = () => {\r\n    this.setState({ showCanvas: false, canvasQuestion: null });\r\n  };\r\n\r\n  //Save Canvas\r\n  saveCanvas = (image) => {\r\n    //Saving image to the answers array\r\n    let answers = { ...this.state.answers };\r\n\r\n    if (answers[this.state.canvasQuestion.id])\r\n      answers[this.state.canvasQuestion.id].canvas = image;\r\n    else answers[this.state.canvasQuestion.id] = { canvas: image };\r\n\r\n    this.setState({ answers, showCanvas: false, canvasQuestion: null }, () => {\r\n      if (this.timeOutId) {\r\n        clearTimeout(this.timeOutId);\r\n      }\r\n\r\n      this.uploadAnswers();\r\n    });\r\n  };\r\n\r\n  //When the options of the MCQ changes\r\n  mcqOptionChanged = (question, value) => {\r\n    let answers = { ...this.state.answers };\r\n\r\n    if (answers[question.id]) answers[question.id].answer = value;\r\n    else answers[question.id] = { answer: value };\r\n\r\n    this.setState({ answers }, () => {\r\n      if (this.timeOutId) {\r\n        clearTimeout(this.timeOutId);\r\n      }\r\n\r\n      this.timeOutId = setTimeout(this.uploadAnswers, 2000);\r\n    });\r\n  };\r\n\r\n  //When the text of the SHORT , ESSAY question value changes\r\n  textChange = (question, value) => {\r\n    let answers = { ...this.state.answers };\r\n\r\n    if (answers[question.id]) answers[question.id].answer = value;\r\n    else answers[question.id] = { answer: value };\r\n\r\n    this.setState({ answers }, () => {\r\n      if (this.timeOutId) {\r\n        clearTimeout(this.timeOutId);\r\n      }\r\n\r\n      this.timeOutId = setTimeout(this.uploadAnswers, 2000);\r\n    });\r\n  };\r\n\r\n  //save changes to the db\r\n  uploadAnswers = () => {\r\n    http(\r\n      \"POST\",\r\n      \"/student/saveanswers\",\r\n      {\r\n        exam: this.props.exam._id,\r\n        answers: this.state.answers,\r\n        completed: this.state.completed,\r\n      },\r\n      (res) => {\r\n        console.log(res.data);\r\n      }\r\n    );\r\n  };\r\n\r\n  //Check if the user data already present in the db, if true then restore data\r\n  restoreExamData = () => {\r\n    if (!this.props.exam) return;\r\n\r\n    http(\r\n      \"POST\",\r\n      \"/student/restoreexam\",\r\n      { exam: this.props.exam._id },\r\n      (res) => {\r\n        if (res.status == 200) {\r\n          this.setState(\r\n            {\r\n              answers: res.data.answers,\r\n              images: res.data.images,\r\n            },\r\n            () => {\r\n              //Change the value of the input fields with the restore exam data\r\n              let answers = this.state.answers;\r\n              let questionType = null;\r\n\r\n              for (let i in answers) {\r\n                //Getting the type of question\r\n                for (let question in this.props.exam.questionPaper) {\r\n                  if (this.props.exam.questionPaper[question].id == i) {\r\n                    questionType = this.props.exam.questionPaper[question].type;\r\n                  }\r\n                }\r\n\r\n                if (questionType == \"mcq\") {\r\n                  //Selecting the previosly selected option\r\n                  window\r\n                    .$(`#${i} input[value=\"${answers[i].answer}\"]`)\r\n                    .attr(\"checked\", \"true\");\r\n                } else if (questionType == \"short\") {\r\n                  //Changing the value of the text field\r\n                  window\r\n                    .$(`#${i} input[type=\"text\"]`)\r\n                    .attr(\"value\", answers[i].answer);\r\n                } else if (questionType == \"essay\") {\r\n                  //Changing the value of the textarea\r\n                  $(`#${i} textarea`).html(answers[i].answer);\r\n                }\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  //Check the camera of the user\r\n  checkCamera = () => {\r\n    this.getMediaStream().then((result) => {\r\n      if (result) {\r\n        //Camera access granted\r\n        this.props.history.push(\"/student/exam\");\r\n        this.setUpFocusListeners();\r\n\r\n        this.randomImageCapture();\r\n      } else {\r\n        //Camera access failed\r\n        this.props.history.push(\"/student\");\r\n      }\r\n    });\r\n  };\r\n\r\n  //Get random number in a particular range\r\n  getRandomInt = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  };\r\n\r\n  //random image capture and save into the images state\r\n  randomImageCapture = () => {\r\n    //Time gap to capture next image\r\n    let nextCall = this.getRandomInt(60 * 5, 60 * 10); //Time between 5 - 10 minutes (in seconds)\r\n\r\n    this.takePhoto().then((image) => {\r\n      //Saving changes to db\r\n      this.uploadImage(image);\r\n\r\n      //Setting the next photo capture\r\n      setTimeout(this.randomImageCapture, nextCall * 1000);\r\n    });\r\n  };\r\n\r\n  //Upload image to the db\r\n  uploadImage = (image) => {\r\n    http(\r\n      \"POST\",\r\n      \"/student/uploadimage\",\r\n      { image, exam: this.props.exam._id },\r\n      (res) => {\r\n        if (res.status == 200) {\r\n          let newImages = [...this.state.images];\r\n          newImages.push(res.data.image);\r\n\r\n          this.setState({ images: newImages }, () => {\r\n            if (this.timeOutId) {\r\n              clearTimeout(this.timeOutId);\r\n            }\r\n\r\n            this.uploadAnswers();\r\n          });\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  //type the value of the equation picker into the textfields\r\n  typeEquation = (event) => {\r\n    let equationSelected = event.target.innerHTML;\r\n\r\n    if (this.lastfocusedInput) this.lastfocusedInput.value += equationSelected;\r\n  };\r\n\r\n  //used for knowing the last selected input field\r\n  setUpFocusListeners = () => {\r\n    let inputElements = window.$(\"input[type=text], textarea\");\r\n\r\n    inputElements.on(\"focus\", (event) => {\r\n      this.lastfocusedInput = event.target;\r\n    });\r\n  };\r\n\r\n  //Called when click the finish button in the exam page\r\n  finishExam = () => {\r\n    if (\r\n      window.confirm(\"You have some more time, Are you sure to finish exam ? \")\r\n    ) {\r\n      //Turn off camera\r\n      const tracks = stream.getTracks();\r\n\r\n      tracks.forEach(function (track) {\r\n        track.stop();\r\n      });\r\n\r\n      this.setState({ completed: true }, () => {\r\n        this.uploadAnswers();\r\n\r\n        alert(\"Exam Completed successfully\");\r\n        this.props.history.push(\"/student\");\r\n      });\r\n    }\r\n  };\r\n\r\n  //Called when exam time completes\r\n  examTimeOut = () => {\r\n    this.setState({ completed: true }, () => {\r\n      this.uploadAnswers();\r\n\r\n      //Turn off camera\r\n      const tracks = stream.getTracks();\r\n\r\n      tracks.forEach(function (track) {\r\n        track.stop();\r\n      });\r\n\r\n      alert(\"Exam time out! Exam data save successfully\");\r\n      this.props.history.push(\"/student\");\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.preventPageRefresh();\r\n\r\n    this.setUpTimer();\r\n\r\n    this.restoreExamData();\r\n\r\n    this.checkCamera();\r\n\r\n    console.log(this.props);\r\n  }\r\n\r\n  render() {\r\n    //Check the props availability\r\n    this.checkProps();\r\n\r\n    //Starting the couter of time left\r\n    this.startTimer();\r\n\r\n    //Calculate time duration of the exam\r\n    this.calculateTimeDuration();\r\n\r\n    return (\r\n      <div>\r\n        <Route path=\"/student/exam\" exact>\r\n          {/**SHOW CANVAS */}\r\n          {this.state.showCanvas ? (\r\n            <Canvas\r\n              close={this.closeCanvas}\r\n              save={this.saveCanvas}\r\n              image={\r\n                this.state.answers[this.state.canvasQuestion.id]\r\n                  ? this.state.answers[this.state.canvasQuestion.id].canvas\r\n                  : undefined\r\n              }\r\n            />\r\n          ) : null}\r\n          <NavBar>\r\n            {{\r\n              left: (\r\n                <div>\r\n                  Time left:{\" \"}\r\n                  <h5>\r\n                    {this.state.time.h}h {this.state.time.m}m{\" \"}\r\n                    {this.state.time.s}s\r\n                  </h5>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div>\r\n                  <Button className=\"btn btn-success\" onClick={this.finishExam}>\r\n                    <FaRegCheckCircle size={28} />\r\n                  </Button>\r\n                </div>\r\n              ),\r\n            }}\r\n          </NavBar>\r\n          <div id=\"equationsBar\">\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              π\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              Δ\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              ∞\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              ∑\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              φ\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              μ\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              σ\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              λ\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              Ø\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              ^\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              ε\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              ∫\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              θ\r\n            </div>\r\n            <div\r\n              className=\"equationItem text-center\"\r\n              onClick={this.typeEquation}\r\n            >\r\n              Ω\r\n            </div>\r\n          </div>\r\n          <div id=\"examBody\">\r\n            {this.props.exam ? (\r\n              <Question\r\n                question={{\r\n                  type: \"header\",\r\n                  examName: this.props.exam.examName,\r\n                  subject: this.props.exam.subject,\r\n                  date: this.props.exam.date,\r\n                  Class: this.props.Class,\r\n                  batch: this.props.batch,\r\n                  marks: this.props.exam.totalMarks,\r\n                  time: this.timeDuration,\r\n                }}\r\n              />\r\n            ) : null}\r\n\r\n            {this.parseQuestions()}\r\n          </div>\r\n        </Route>\r\n        <Route path=\"/student/exam/checkcamera\" exact>\r\n          <div\r\n            className=\"d-flex align-items-center justify-content-center\"\r\n            id=\"check-camera\"\r\n          >\r\n            <h5>CHECKING YOUR WEBCAM ...</h5>\r\n          </div>\r\n        </Route>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(StartExam);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\sigup\\signup.js",["342","343"],"import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./signup.css\";\r\n\r\nimport Student from \"./student/student\";\r\nimport Teacher from \"./teacher/teacher\";\r\n\r\nimport http from \"../../../shared/http\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    signupData: state.login.signupData,\r\n    validSignupData: state.login.validSignupData,\r\n  };\r\n};\r\nclass Signup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      accountType: \"student\",\r\n    };\r\n  }\r\n\r\n  selectAccountType = (event) => {\r\n    this.setState({ accountType: event.target.value });\r\n  };\r\n\r\n  verifyEmail = () => {\r\n    if (this.props.validSignupData) {\r\n      http(\"POST\", \"/register\", this.props.signupData, (res) => {\r\n        if (res.status === 200) {\r\n          this.props.otpSent();\r\n        } else {\r\n          alert(res.data);\r\n\r\n          //TEST DATA\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  googleSignup = () => {\r\n    document.location.href = \"http://localhost:4000/register/google\";\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label for=\"account-type\">Select Account Type</label>\r\n          <br />\r\n          <select\r\n            className=\"form-select\"\r\n            aria-label=\"Default select example\"\r\n            id=\"account-type\"\r\n            onChange={this.selectAccountType}\r\n          >\r\n            <option value=\"student\" selected>\r\n              Student\r\n            </option>\r\n            <option value=\"teacher\">Teacher</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Enter your details</label>\r\n          {this.state.accountType == \"student\" ? <Student /> : null}\r\n          {this.state.accountType == \"teacher\" ? <Teacher /> : null}\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            id=\"login-btn\"\r\n            onClick={this.verifyEmail}\r\n            disabled={!this.props.validSignupData}\r\n          >\r\n            VERIFY EMAIL\r\n          </button>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            id=\"google-login-btn\"\r\n            onClick={this.googleSignup}\r\n          >\r\n            SIGN UP WITH GOOGLE\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Signup));\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\verifyOtp\\verifyOtp.js",["344","345","346","347"],"import { Component } from \"react\";\r\nimport \"./verifyOtp.css\";\r\n\r\nimport http from \"../../../shared/http\";\r\nclass VerifyOtp extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: {},\r\n      seconds: 60 * 5,\r\n      resendEnable: false,\r\n      otp: \"\",\r\n      otpError: null,\r\n    };\r\n    this.timer = 0;\r\n    this.startTimer = this.startTimer.bind(this);\r\n    this.countDown = this.countDown.bind(this);\r\n  }\r\n\r\n  secondsToTime(secs) {\r\n    let hours = Math.floor(secs / (60 * 60));\r\n\r\n    let divisor_for_minutes = secs % (60 * 60);\r\n    let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n    let divisor_for_seconds = divisor_for_minutes % 60;\r\n    let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n    let obj = {\r\n      h: hours,\r\n      m: minutes,\r\n      s: seconds,\r\n    };\r\n    return obj;\r\n  }\r\n\r\n  componentDidMount() {\r\n    let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n    this.setState({ time: timeLeftVar });\r\n  }\r\n\r\n  startTimer() {\r\n    if (this.timer == 0 && this.state.seconds > 0) {\r\n      this.timer = setInterval(this.countDown, 1000);\r\n    }\r\n  }\r\n\r\n  countDown() {\r\n    // Remove one second, set state so a re-render happens.\r\n    let seconds = this.state.seconds - 1;\r\n    this.setState({\r\n      time: this.secondsToTime(seconds),\r\n      seconds: seconds,\r\n    });\r\n\r\n    // Check if we're at zero.\r\n    if (seconds == 0) {\r\n      clearInterval(this.timer);\r\n      this.setState({ resendEnable: true });\r\n    }\r\n  }\r\n\r\n  resendOtp = () => {\r\n    http(\"POST\", \"/register/resendotp\", {}, (res) => {\r\n      if (res.status == 200) {\r\n        console.log(\"OTP resend\");\r\n      } else {\r\n        alert(\r\n          `Error ${res.status} during otp resend\\nError message logged in console.`\r\n        );\r\n        console.log(res);\r\n      }\r\n    });\r\n  };\r\n\r\n  showAlert = () => {};\r\n\r\n  proceed = () => {\r\n    if (this.state.otp.length > 0) {\r\n      this.setState({ otpError: null });\r\n\r\n      http(\r\n        \"POST\",\r\n        \"/register/otp\",\r\n        {\r\n          otp: this.state.otp,\r\n        },\r\n        (res) => {\r\n          console.log(\"OTP Sent to server\");\r\n          if (res.status == 203) {\r\n            console.log(res.data);\r\n            alert(\"OTP Not verified: \" + res.data);\r\n          } else {\r\n            console.log(\"OTP verification Success\");\r\n            this.props.otpVerified();\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      this.setState({ otpError: <p>Please enter OTP</p> });\r\n    }\r\n  };\r\n\r\n  otpChange = (event) => {\r\n    if (this.state.otp.length > 0) {\r\n      this.setState({ otpError: null });\r\n    }\r\n    this.setState({ otp: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    this.startTimer();\r\n\r\n    return (\r\n      <form>\r\n        <center>\r\n          <p id=\"info-text\">An OTP has been sent to your email</p>\r\n        </center>\r\n        <div className=\"form-group\">\r\n          <label for=\"otp\">Enter OTP</label>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            name=\"otp\"\r\n            id=\"otp\"\r\n            placeholder=\"OTP\"\r\n            className=\"form-control mt-3\"\r\n            value={this.state.otp}\r\n            onChange={this.otpChange}\r\n          />\r\n          {this.state.otpError}\r\n          <p>\r\n            Resend OTP: {this.state.time.m}:{this.state.time.s}\r\n          </p>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            id=\"resend-otp\"\r\n            disabled={!this.state.resendEnable}\r\n            onClick={this.resendOtp}\r\n          >\r\n            RESEND OTP\r\n          </button>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            id=\"proceed\"\r\n            onClick={this.proceed}\r\n          >\r\n            PROCEED\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VerifyOtp;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\sigup\\googleSignup\\GoogleSignup.js",["348","349","350","351"],"import { Component } from \"react\";\r\nimport { withRouter, useLocation } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./GoogleSignup.css\";\r\n\r\nimport Student from \"../student/student\";\r\nimport Teacher from \"../teacher/teacher\";\r\n\r\nimport http from \"../../../../shared/http\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    signupData: state.login.signupData,\r\n    validSignupData: state.login.validSignupData,\r\n  };\r\n};\r\n\r\nlet GOOGLE_DATA = {};\r\n\r\nclass Signup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      accountType: \"student\",\r\n      googleData: {},\r\n    };\r\n  }\r\n\r\n  query = null;\r\n\r\n  selectAccountType = (event) => {\r\n    this.setState({ accountType: event.target.value });\r\n  };\r\n\r\n  finishSignup = () => {\r\n    console.log(this.props.signupData, GOOGLE_DATA);\r\n    http(\r\n      \"POST\",\r\n      \"/register/googlesignup\",\r\n      { ...this.props.signupData, ...GOOGLE_DATA },\r\n      (res) => {\r\n        if (res.status == 200) {\r\n          alert(\"Signup Completed\");\r\n          document.location.href = \"http://localhost:3000/signin\";\r\n        } else {\r\n          alert(res.data);\r\n        }\r\n      }\r\n    );\r\n  };\r\n\r\n  useQuery = () => {\r\n    let query = new URLSearchParams(this.props.location.search);\r\n    return query;\r\n  };\r\n\r\n  getGoogleData = () => {\r\n    this.query = this.useQuery();\r\n\r\n    if (this.query.get(\"name\")) GOOGLE_DATA.name = this.query.get(\"name\");\r\n    if (this.query.get(\"email\")) GOOGLE_DATA.email = this.query.get(\"email\");\r\n    if (this.query.get(\"id\")) GOOGLE_DATA.googleId = this.query.get(\"id\");\r\n  };\r\n\r\n  render() {\r\n    this.getGoogleData();\r\n    return (\r\n      <form>\r\n        <div className=\"form-group\">\r\n          <label for=\"account-type\">Select Account Type</label>\r\n          <br />\r\n          <select\r\n            className=\"form-select\"\r\n            aria-label=\"Default select example\"\r\n            id=\"account-type\"\r\n            onChange={this.selectAccountType}\r\n          >\r\n            <option value=\"student\" selected>\r\n              Student\r\n            </option>\r\n            <option value=\"teacher\">Teacher</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label>Enter your details</label>\r\n          {this.state.accountType == \"student\" ? (\r\n            <Student\r\n              google\r\n              data={{\r\n                name: GOOGLE_DATA.name,\r\n                email: GOOGLE_DATA.email,\r\n                id: GOOGLE_DATA.id,\r\n              }}\r\n            />\r\n          ) : null}\r\n          {this.state.accountType == \"teacher\" ? (\r\n            <Teacher\r\n              google\r\n              data={{\r\n                name: GOOGLE_DATA.name,\r\n                email: GOOGLE_DATA.email,\r\n                id: GOOGLE_DATA.id,\r\n              }}\r\n            />\r\n          ) : null}\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            id=\"login-btn\"\r\n            onClick={this.finishSignup}\r\n            disabled={!this.props.validSignupData}\r\n          >\r\n            FINISH\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps)(Signup));\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\config.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\shared\\parseCookie.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\signin\\signin.js",["352","353","354","355"],"/**\r\n * CONTENT OF THE SIGNIN TAB\r\n */\r\n\r\nimport { Component } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./signin.css\";\r\n\r\nimport http from \"../../../shared/http\";\r\nimport configureDialogBox from \"../../../shared/dailogBox\";\r\n\r\nclass Signin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      username: \"\", //USERNAME entered in the login form\r\n      password: \"\", //PASSWORD entered in the login form\r\n      erroMessage: null, //Error messsage if any (These are displayed bottom side of the login form)\r\n      reportEmail: \"\", //Email id of the user (REPORT form)\r\n      reportContent: \"\", //Content of the report (REPORT from)\r\n      reportError: null,\r\n    };\r\n  }\r\n\r\n  showPassword = () => {\r\n    let password = document.getElementById(\"password\");\r\n\r\n    if (password.type == \"password\") {\r\n      password.type = \"text\";\r\n    } else {\r\n      password.type = \"password\";\r\n    }\r\n  };\r\n\r\n  //Setting form data into the component state\r\n  inputChange = (event) => {\r\n    let newState = {};\r\n    newState[event.target.name] = event.target.value;\r\n\r\n    this.setState(newState);\r\n  };\r\n\r\n  /**\r\n   * When LOGIN button clicked\r\n   */\r\n\r\n  login = () => {\r\n    if (this.state.username.length > 0 && this.state.password.length > 0) {\r\n      this.setState({ erroMessage: null });\r\n      http(\r\n        \"POST\",\r\n        \"/login\",\r\n        { username: this.state.username, password: this.state.password },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Login Successful\");\r\n\r\n            if (res.data.accountType === \"teacher\") {\r\n              document.location.href = \"http://localhost:3000/teacher\";\r\n            } else if (res.data.accountType === \"student\") {\r\n              document.location.href = \"http://localhost:3000/student\";\r\n            }\r\n          } else {\r\n            this.setState({\r\n              erroMessage: <p>{res.data}</p>,\r\n            });\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      this.setState({ erroMessage: <p>Please fill all fields</p> });\r\n    }\r\n  };\r\n\r\n  // When googleSignin button clicked\r\n  googleSignin = () => {\r\n    document.location.href = \"http://localhost:4000/register/google\";\r\n  };\r\n\r\n  //Validate Email ID\r\n  validateEmail = (email) => {\r\n    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  reportFormChange = (e) => {\r\n    let newState = {};\r\n\r\n    newState[e.target.name] = e.target.value;\r\n    this.setState(newState);\r\n\r\n    this.validateReportForm();\r\n  };\r\n\r\n  validateReportForm = () => {\r\n    if (this.validateEmail(this.state.reportEmail)) {\r\n      if (this.state.reportContent === \"\") {\r\n        this.setState({ reportError: \"Content is empty\" });\r\n        return false;\r\n      } else {\r\n        this.setState({ reportError: null });\r\n        return true;\r\n      }\r\n    } else {\r\n      this.setState({ reportError: \"Email not valid\" });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  //When clicking Send in report form\r\n  sendReport = (e) => {\r\n    e.preventDefault();\r\n    if (this.validateReportForm()) {\r\n      http(\r\n        \"POST\",\r\n        \"/login/report\",\r\n        {\r\n          email: this.state.reportEmail,\r\n          message: this.state.reportContent,\r\n        },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Report sent successfully\");\r\n          } else {\r\n            alert(res.data);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        {/* Configuring The reportModal */}\r\n        {configureDialogBox(\r\n          \"reportModal\",\r\n          \"Report an Issue\",\r\n          <>\r\n            <form>\r\n              <label className=\"black\" for=\"email\">\r\n                Enter your email:{\" \"}\r\n              </label>\r\n              <input\r\n                onChange={this.reportFormChange}\r\n                type=\"email\"\r\n                name=\"reportEmail\"\r\n                id=\"email\"\r\n                className=\"m-3\"\r\n                value={this.state.reportEmail}\r\n              ></input>\r\n              <br />\r\n\r\n              <label className=\"black\" for=\"content\">\r\n                Enter content:{\" \"}\r\n              </label>\r\n              <textarea\r\n                onChange={this.reportFormChange}\r\n                rows=\"10\"\r\n                name=\"reportContent\"\r\n                id=\"content\"\r\n                className=\"m-3\"\r\n              ></textarea>\r\n            </form>\r\n            {this.state.reportError ? <p>{this.state.reportError}</p> : null}\r\n          </>,\r\n          <>\r\n            <button className=\"btn btn-primary\" onClick={this.sendReport}>\r\n              Send\r\n            </button>\r\n          </>\r\n        )}\r\n\r\n        <div className=\"form-group\">\r\n          <label for=\"username\">Username</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            id=\"username\"\r\n            name=\"username\"\r\n            value={this.state.username}\r\n            onChange={this.inputChange}\r\n            placeholder=\"Username\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label for=\"password\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            class=\"form-control\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            value={this.state.password}\r\n            onChange={this.inputChange}\r\n            placeholder=\"Password\"\r\n          />\r\n        </div>\r\n        {this.state.erroMessage}\r\n        <div className=\"form-check\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            id=\"showPassword\"\r\n            name=\"showPassword\"\r\n            onClick={this.showPassword}\r\n          />\r\n          <label className=\"form-check-label\" for=\"showPassword\">\r\n            Show Password\r\n          </label>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            id=\"login-btn\"\r\n            onClick={this.login}\r\n          >\r\n            LOGIN\r\n          </button>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-danger\"\r\n            id=\"google-login-btn\"\r\n            onClick={this.googleSignin}\r\n          >\r\n            SIGN IN WITH GOOGLE\r\n          </button>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <p style={{ \"margin-top\": \"8px\", color: \"white\" }}>\r\n            Need help?{\" \"}\r\n            <a\r\n              href=\"#\"\r\n              data-toggle=\"modal\"\r\n              data-target=\"#reportModal\"\r\n              style={{ color: \"white\" }}\r\n            >\r\n              Report\r\n            </a>\r\n          </p>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Signin);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\newExam\\NewExam.js",["356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376"],"import React, { Component } from \"react\";\r\nimport NavBar from \"../../ui-elements/navBar/NavBar\";\r\nimport \"./NewExam.css\";\r\nimport {\r\n  BsFillCaretDownFill,\r\n  BsFillCaretUpFill,\r\n  BsPencil,\r\n  BsDash,\r\n  BsCheck,\r\n  BsPlus,\r\n} from \"react-icons/bs\";\r\nimport { Button, Modal, Form, Row, Col, Dropdown } from \"react-bootstrap\";\r\nimport configureDialogBox from \"../../../shared/dailogBox\";\r\nimport $ from \"jquery\";\r\nimport http from \"../../../shared/http\";\r\nimport Question from \"../Question/Question\";\r\nimport Canvas from \"../../ui-elements/Canvas/Canvas\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nclass NewExam extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions: [\r\n        {\r\n          id: 1,\r\n          type: \"text\",\r\n          text: \"YOU CAN INSERT SOME INFORMATION TEXT LIKE THIS\",\r\n        },\r\n        {\r\n          id: 2,\r\n          type: \"mcq\",\r\n          question: \"YOUR MULTIPLE CHOICE QUESTION HERE\",\r\n          marks: 1,\r\n          image: null,\r\n          canvas: null,\r\n          options: [\r\n            {\r\n              name: \"OPTION 1\",\r\n              correct: true,\r\n            },\r\n            {\r\n              name: \"OPTION 2\",\r\n              correct: false,\r\n            },\r\n            {\r\n              name: \"OPTION 3\",\r\n              correct: false,\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          id: 3,\r\n          type: \"short\",\r\n          marks: 2,\r\n          question: \"YOUR SHORT ANSWER TYPE QUESTION HERE\",\r\n          image: null,\r\n          canvas: null,\r\n        },\r\n        {\r\n          id: 4,\r\n          type: \"essay\",\r\n          question: \"YOUR ESSAY TYPE QUESTION HERE\",\r\n          marks: 10,\r\n          canvas: null,\r\n          image: null,\r\n        },\r\n      ],\r\n      selectedQuestion: null,\r\n      editSelected: false,\r\n      mcqModalOptions: [],\r\n      image: \"\",\r\n      canvas: \"\",\r\n      showCanvas: false,\r\n      lastOpenModal: null,\r\n      classList: {},\r\n      classOptions: null,\r\n      batchOptions: null,\r\n    };\r\n  }\r\n\r\n  //Creating required refs\r\n  newTextRef = React.createRef();\r\n\r\n  mcqQuestionRef = React.createRef();\r\n  mcqMarksRef = React.createRef();\r\n  mcqNewOption = React.createRef();\r\n\r\n  shortMarksRef = React.createRef();\r\n  shortQuestionRef = React.createRef();\r\n\r\n  essayMarksRef = React.createRef();\r\n  essayQuestionRef = React.createRef();\r\n\r\n  //When scheduling exam\r\n  examNameRef = React.createRef();\r\n  subjectRef = React.createRef();\r\n  timeFromRef = React.createRef();\r\n  timeToRef = React.createRef();\r\n  dateRef = React.createRef();\r\n  marksRef = React.createRef();\r\n  classRef = React.createRef();\r\n  batchRef = React.createRef();\r\n\r\n  //This is used when editiong an existing exam that is already scheduled\r\n  setUpProps = () => {\r\n    if (this.props.exam) {\r\n      this.classRef.current.value = this.props.Class;\r\n      this.setState({ questions: this.props.exam.questionPaper }, () => {\r\n        this.examNameRef.current.value = this.props.exam.examName;\r\n        this.subjectRef.current.value = this.props.exam.subject;\r\n        this.timeFromRef.current.value = this.props.exam.from;\r\n        this.timeToRef.current.value = this.props.exam.to;\r\n        this.dateRef.current.value = this.props.exam.date;\r\n        this.marksRef.current.value = this.props.exam.totalMarks;\r\n      });\r\n    }\r\n  };\r\n\r\n  //Add a new Text into questions\r\n  addNewText = () => {\r\n    let text = this.newTextRef.current.value;\r\n\r\n    if (text) {\r\n      this.setState({\r\n        questions: [\r\n          ...this.state.questions,\r\n          { type: \"text\", id: Date.now(), text },\r\n        ],\r\n      });\r\n      window.$(\"#textModal\").modal(\"toggle\");\r\n    } else {\r\n      alert(\"Please enter some text\");\r\n    }\r\n  };\r\n\r\n  //Edit an existing Text\r\n  editText = () => {\r\n    let text = this.newTextRef.current.value;\r\n    let questions = [...this.state.questions];\r\n\r\n    if (text) {\r\n      //Getting the the question that is selected\r\n      let i = 0;\r\n      for (i in questions) {\r\n        if (questions[i].id == this.state.selectedQuestion) {\r\n          questions.splice(i, 1);\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      questions.splice(i, 0, { type: \"text\", text, id: Date.now() });\r\n\r\n      this.setState({\r\n        questions: [...questions],\r\n        editSelected: false,\r\n        selectedQuestion: null,\r\n      });\r\n      window.$(\"#textModal\").modal(\"toggle\");\r\n    } else {\r\n      alert(\"Please enter some text\");\r\n    }\r\n  };\r\n\r\n  //Parse the questions to display it\r\n  parseQuestions = () => {\r\n    return this.state.questions.map((question, index) => {\r\n      return (\r\n        <Question\r\n          question={question}\r\n          click={this.selectQuestion}\r\n          key={question.id}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  //select a particular question (Called inside <Question/>)\r\n  selectQuestion = (event) => {\r\n    let questionElement = null;\r\n\r\n    //SELECTING PARENT QUESTION ELEMENT\r\n    for (let element of event.nativeEvent.path) {\r\n      if ($(element).hasClass(\"question\")) questionElement = element;\r\n    }\r\n\r\n    this.setState({ selectedQuestion: questionElement.id });\r\n  };\r\n\r\n  //Remove question from array\r\n  removeQuestion = () => {\r\n    let questions = [...this.state.questions];\r\n    for (let i in questions) {\r\n      if (questions[i].id == this.state.selectedQuestion) {\r\n        questions.splice(i, 1);\r\n        this.setState({ questions });\r\n      }\r\n    }\r\n    this.forceUpdate();\r\n    this.state.selectedQuestion = null;\r\n    $(\"#questionsList .active\").removeClass(\"active\");\r\n  };\r\n\r\n  //Change order -1\r\n  questionDown = () => {\r\n    let questions = [...this.state.questions];\r\n    const max = questions.length - 1;\r\n\r\n    for (let i in questions) {\r\n      if (questions[i].id == this.state.selectedQuestion) {\r\n        if (i >= max) {\r\n          alert(\"This is the last question, Cannot move down\");\r\n        } else {\r\n          //Swapping down\r\n          questions.splice(parseInt(i) + 1, 0, questions.splice(i, 1)[0]);\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ questions });\r\n  };\r\n\r\n  //Change order +1\r\n  questionUp = () => {\r\n    let questions = [...this.state.questions];\r\n\r\n    for (let i in questions) {\r\n      if (questions[i].id == this.state.selectedQuestion) {\r\n        if (i <= 0) {\r\n          alert(\"This is the first question, Cannot move up\");\r\n        } else {\r\n          //Swapping up\r\n          questions.splice(parseInt(i) - 1, 0, questions.splice(i, 1)[0]);\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.setState({ questions });\r\n  };\r\n\r\n  //Edit currently selected Question\r\n  editSelectedQuestion = () => {\r\n    let selectedQuestion = null;\r\n    this.setState({ editSelected: true });\r\n\r\n    //Getting the type of the question that is selected\r\n    let questionType = \"\";\r\n    for (let question of this.state.questions) {\r\n      if (question.id == this.state.selectedQuestion) {\r\n        selectedQuestion = question;\r\n        questionType = question.type;\r\n      }\r\n    }\r\n\r\n    window.$(\"#\" + questionType + \"Modal\").modal(\"toggle\");\r\n\r\n    if (questionType == \"text\") {\r\n      this.newTextRef.current.value = selectedQuestion.text;\r\n    } else if (questionType == \"mcq\") {\r\n      this.mcqMarksRef.current.value = selectedQuestion.marks;\r\n      this.mcqQuestionRef.current.value = selectedQuestion.question;\r\n      this.setState({\r\n        mcqModalOptions: selectedQuestion.options,\r\n        image: selectedQuestion.image,\r\n        canvas: selectedQuestion.canvas,\r\n      });\r\n    } else if (questionType == \"short\") {\r\n      this.shortMarksRef.current.value = selectedQuestion.marks;\r\n      this.shortQuestionRef.current.value = selectedQuestion.question;\r\n      this.setState({\r\n        image: selectedQuestion.image,\r\n        canvas: selectedQuestion.canvas,\r\n      });\r\n    } else if (questionType == \"essay\") {\r\n      this.essayMarksRef.current.value = selectedQuestion.marks;\r\n      this.essayQuestionRef.current.value = selectedQuestion.question;\r\n      this.setState({\r\n        image: selectedQuestion.image,\r\n        canvas: selectedQuestion.canvas,\r\n      });\r\n    }\r\n  };\r\n\r\n  //Render options list in mcqModal\r\n  renderMcqModalOptions = () => {\r\n    return this.state.mcqModalOptions.map((option, index) => {\r\n      return (\r\n        <tr key={option.name}>\r\n          <td>\r\n            <input\r\n              className=\"ml-3\"\r\n              type=\"radio\"\r\n              name=\"mcqModalOptions\"\r\n              value={option.name}\r\n              checked={option.correct ? true : undefined}\r\n              onChange={(e) => {\r\n                this.mcqSelectCorrectOption();\r\n              }}\r\n            />\r\n          </td>\r\n\r\n          <td\r\n            onClick={(e) => {\r\n              this.removeMcqOption(e.target.getAttribute(\"name\"));\r\n            }}\r\n            name={option.name}\r\n          >\r\n            <label\r\n              name={option.name}\r\n              class=\"form-check-label\"\r\n              for=\"mcqModalOptions\"\r\n              onClick={(e) => {\r\n                e.stopPropagation();\r\n              }}\r\n            >\r\n              {option.name}\r\n            </label>\r\n          </td>\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n\r\n  //Add new option to mcq\r\n  addMcqOption = () => {\r\n    let newOption = this.mcqNewOption.current.value;\r\n\r\n    if (newOption) {\r\n      this.setState({\r\n        mcqModalOptions: [\r\n          ...this.state.mcqModalOptions,\r\n          { name: newOption, correct: false },\r\n        ],\r\n      });\r\n\r\n      //Reset form value\r\n      this.mcqNewOption.current.value = \"\";\r\n    } else {\r\n      alert(\"Enter option to add\");\r\n    }\r\n  };\r\n\r\n  //Remove option in mcq\r\n  removeMcqOption = (name) => {\r\n    let confirmation = window.confirm(\"Are you sure to remove option?\");\r\n\r\n    if (confirmation) {\r\n      let options = [...this.state.mcqModalOptions];\r\n\r\n      for (let i in options) {\r\n        if (options[i].name == name) {\r\n          options.splice(i, 1);\r\n        }\r\n      }\r\n\r\n      this.setState({ mcqModalOptions: [...options] });\r\n    }\r\n  };\r\n\r\n  //Add MCQ Question\r\n  addMcqQuestion = () => {\r\n    let question = this.mcqQuestionRef.current.value;\r\n    let marks = this.mcqMarksRef.current.value;\r\n    let options = [...this.state.mcqModalOptions];\r\n    let id = Date.now();\r\n    let type = \"mcq\";\r\n\r\n    if (question) {\r\n      if (marks) {\r\n        if (options.length > 0) {\r\n          //Validation success\r\n\r\n          //Adding new Question\r\n          this.setState({\r\n            questions: [\r\n              ...this.state.questions,\r\n              {\r\n                question,\r\n                marks,\r\n                options,\r\n                id,\r\n                type,\r\n                image: this.state.image,\r\n                canvas: this.state.canvas,\r\n              },\r\n            ],\r\n            mcqModalOptions: [],\r\n          });\r\n\r\n          this.mcqMarksRef.current.value = \"\";\r\n          this.mcqQuestionRef.current.value = \"\";\r\n          this.setState({ image: \"\", canvas: \"\", editCanvas: \"\" });\r\n\r\n          window.$(\"#mcqModal\").modal(\"hide\");\r\n        } else {\r\n          alert(\"No options inserted for the question\");\r\n        }\r\n      } else {\r\n        alert(\"Please enter marks\");\r\n      }\r\n    } else {\r\n      alert(\"Please enter question\");\r\n    }\r\n  };\r\n\r\n  //When selecting MCQ correct option\r\n  mcqSelectCorrectOption = () => {\r\n    let correctOption = window.$('input[name=\"mcqModalOptions\"]:checked').val();\r\n\r\n    let options = [...this.state.mcqModalOptions];\r\n\r\n    for (let i in options) {\r\n      if (options[i].name == correctOption) {\r\n        options[i].correct = true;\r\n      } else {\r\n        options[i].correct = false;\r\n      }\r\n    }\r\n\r\n    this.setState({ mcqModalOptions: [...options] });\r\n  };\r\n\r\n  //Edit an existing MCQ\r\n  editMcq = () => {\r\n    let question = this.mcqQuestionRef.current.value;\r\n    let marks = this.mcqMarksRef.current.value;\r\n    let options = [...this.state.mcqModalOptions];\r\n    let id = Date.now();\r\n    let type = \"mcq\";\r\n\r\n    let questions = [...this.state.questions];\r\n\r\n    if (question) {\r\n      if (marks) {\r\n        if (options.length > 0) {\r\n          //Validation success\r\n\r\n          //Editing Question\r\n          let i = 0;\r\n          for (i in questions) {\r\n            if (questions[i].id == this.state.selectedQuestion) {\r\n              questions.splice(i, 1);\r\n\r\n              break;\r\n            }\r\n          }\r\n\r\n          questions.splice(i, 0, {\r\n            question,\r\n            marks,\r\n            options,\r\n            id,\r\n            type,\r\n            image: this.state.image,\r\n            canvas: this.state.canvas,\r\n          });\r\n\r\n          this.setState({\r\n            questions: [...questions],\r\n            mcqModalOptions: [],\r\n            editSelected: false,\r\n            selectedQuestion: null,\r\n            image: \"\",\r\n            canvas: \"\",\r\n            editCanvas: \"\",\r\n          });\r\n          window.$(\"#mcqModal\").modal(\"toggle\");\r\n\r\n          this.mcqMarksRef.current.value = \"\";\r\n          this.mcqQuestionRef.current.value = \"\";\r\n        } else {\r\n          alert(\"No options inserted for the question\");\r\n        }\r\n      } else {\r\n        alert(\"Please enter marks\");\r\n      }\r\n    } else {\r\n      alert(\"Please enter question\");\r\n    }\r\n  };\r\n\r\n  //File upload\r\n  uploadFile = () => {\r\n    let imageFile = document.getElementById(\"imageUpload\").files[0];\r\n    let formData = new FormData();\r\n\r\n    if (!imageFile) {\r\n      return alert(\"Please select an image\");\r\n    }\r\n\r\n    formData.append(\"image\", imageFile);\r\n\r\n    $.ajax({\r\n      url: \"http://localhost:4000/upload\",\r\n      cache: false,\r\n      contentType: false,\r\n      processData: false,\r\n      data: formData,\r\n      type: \"POST\",\r\n      success: (response) => {\r\n        this.setState({ image: response });\r\n        window.$(\"#uploadImage\").modal(\"hide\");\r\n      },\r\n      error: function (error) {\r\n        alert(\"File upload error. Check file type and size\");\r\n      },\r\n    });\r\n  };\r\n\r\n  //Clear uploaded image\r\n  clearUpload = () => {\r\n    this.setState({ image: \"\" });\r\n    window.$(\"#uploadImage\").modal(\"hide\");\r\n  };\r\n\r\n  //Open canvas\r\n  openCanvas = () => {\r\n    this.setState({\r\n      showCanvas: true,\r\n      lastOpenModal: window.$(\".modal.show\"),\r\n    });\r\n\r\n    window.$(\".modal\").modal(\"hide\");\r\n  };\r\n\r\n  //Close canvas\r\n  closeCanvas = () => {\r\n    this.state.lastOpenModal.modal(\"show\");\r\n\r\n    this.setState({ showCanvas: false, lastOpenModal: null });\r\n  };\r\n\r\n  //Save Canvas\r\n  saveCanvas = (image) => {\r\n    this.state.lastOpenModal.modal(\"show\");\r\n\r\n    this.setState({ showCanvas: false, canvas: image, lastOpenModal: null });\r\n  };\r\n\r\n  //Add a new Short question\r\n  addShort = () => {\r\n    let question = this.shortQuestionRef.current.value;\r\n    let marks = this.shortMarksRef.current.value;\r\n    let id = Date.now();\r\n    let type = \"short\";\r\n\r\n    if (question) {\r\n      if (marks) {\r\n        //Validation success\r\n\r\n        //Adding new Question\r\n        this.setState({\r\n          questions: [\r\n            ...this.state.questions,\r\n            {\r\n              question,\r\n              marks,\r\n              id,\r\n              type,\r\n              image: this.state.image,\r\n              canvas: this.state.canvas,\r\n            },\r\n          ],\r\n        });\r\n\r\n        this.shortQuestionRef.current.value = \"\";\r\n        this.shortMarksRef.current.value = \"\";\r\n        this.setState({ image: \"\", canvas: \"\", editCanvas: \"\" });\r\n\r\n        window.$(\"#shortModal\").modal(\"hide\");\r\n      } else {\r\n        alert(\"Please enter marks\");\r\n      }\r\n    } else {\r\n      alert(\"Please enter question\");\r\n    }\r\n  };\r\n\r\n  //Edit existing short question\r\n  editShort = () => {\r\n    let question = this.shortQuestionRef.current.value;\r\n    let marks = this.shortMarksRef.current.value;\r\n    let id = Date.now();\r\n    let type = \"short\";\r\n\r\n    let questions = [...this.state.questions];\r\n\r\n    if (question) {\r\n      if (marks) {\r\n        //Validation success\r\n\r\n        //Editing Question\r\n        let i = 0;\r\n        for (i in questions) {\r\n          if (questions[i].id == this.state.selectedQuestion) {\r\n            questions.splice(i, 1);\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        questions.splice(i, 0, {\r\n          question,\r\n          marks,\r\n          id,\r\n          type,\r\n          image: this.state.image,\r\n          canvas: this.state.canvas,\r\n        });\r\n\r\n        this.setState({\r\n          questions: [...questions],\r\n          editSelected: false,\r\n          selectedQuestion: null,\r\n          image: \"\",\r\n          canvas: \"\",\r\n        });\r\n        window.$(\"#shortModal\").modal(\"toggle\");\r\n\r\n        this.shortMarksRef.current.value = \"\";\r\n        this.shortQuestionRef.current.value = \"\";\r\n      } else {\r\n        alert(\"Please enter marks\");\r\n      }\r\n    } else {\r\n      alert(\"Please enter question\");\r\n    }\r\n  };\r\n\r\n  //Add a new Essay question\r\n  addEssay = () => {\r\n    let question = this.essayQuestionRef.current.value;\r\n    let marks = this.essayMarksRef.current.value;\r\n    let id = Date.now();\r\n    let type = \"essay\";\r\n\r\n    if (question) {\r\n      if (marks) {\r\n        //Validation success\r\n\r\n        //Adding new Question\r\n        this.setState({\r\n          questions: [\r\n            ...this.state.questions,\r\n            {\r\n              question,\r\n              marks,\r\n              id,\r\n              type,\r\n              image: this.state.image,\r\n              canvas: this.state.canvas,\r\n            },\r\n          ],\r\n        });\r\n\r\n        this.essayMarksRef.current.value = \"\";\r\n        this.essayQuestionRef.current.value = \"\";\r\n        this.setState({ image: \"\", canvas: \"\" });\r\n\r\n        window.$(\"#essayModal\").modal(\"hide\");\r\n      } else {\r\n        alert(\"Please enter marks\");\r\n      }\r\n    } else {\r\n      alert(\"Please enter question\");\r\n    }\r\n  };\r\n\r\n  //Edit existing essay question\r\n  editEssay = () => {\r\n    let question = this.essayQuestionRef.current.value;\r\n    let marks = this.essayMarksRef.current.value;\r\n    let id = Date.now();\r\n    let type = \"essay\";\r\n\r\n    let questions = [...this.state.questions];\r\n\r\n    if (question) {\r\n      if (marks) {\r\n        //Validation success\r\n\r\n        //Editing Question\r\n        let i = 0;\r\n        for (i in questions) {\r\n          if (questions[i].id == this.state.selectedQuestion) {\r\n            questions.splice(i, 1);\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        questions.splice(i, 0, {\r\n          question,\r\n          marks,\r\n          id,\r\n          type,\r\n          image: this.state.image,\r\n          canvas: this.state.canvas,\r\n        });\r\n\r\n        this.setState({\r\n          questions: [...questions],\r\n          editSelected: false,\r\n          selectedQuestion: null,\r\n          image: \"\",\r\n          canvas: \"\",\r\n        });\r\n        window.$(\"#essayModal\").modal(\"toggle\");\r\n\r\n        this.essayMarksRef.current.value = \"\";\r\n        this.essayQuestionRef.current.value = \"\";\r\n      } else {\r\n        alert(\"Please enter marks\");\r\n      }\r\n    } else {\r\n      alert(\"Please enter question\");\r\n    }\r\n  };\r\n\r\n  //Open the schedule exam modal\r\n  openScheduleExam = () => {\r\n    //Checking if editExam mode or not\r\n    if (this.props.exam) {\r\n      this.classRef.current.value = this.props.Class;\r\n      this.batchRef.current.value = this.props.batch;\r\n    }\r\n\r\n    if (this.state.questions.length > 0) {\r\n      let marks = 0;\r\n\r\n      //Setting total marks automatically\r\n      for (let question of this.state.questions) {\r\n        if (question.marks) {\r\n          marks += parseInt(question.marks);\r\n        }\r\n      }\r\n\r\n      this.marksRef.current.value = marks;\r\n      window.$(\"#scheduleexam\").modal(\"toggle\");\r\n    } else {\r\n      alert(\"Please insert atleast one question\");\r\n    }\r\n  };\r\n\r\n  //Get Class data from the database (SCHEDULE EXAM)\r\n  getClasses = () => {\r\n    http(\"GET\", \"/login/getclasses\", {}, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ classList: res.data }, () => {\r\n          this.setupClassOptions();\r\n          this.setUpProps();\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  //Setup the options for the <select> for classes (SCHEDULE EXAM)\r\n  setupClassOptions = () => {\r\n    //Options JSX\r\n    let options = [];\r\n\r\n    options = Object.keys(this.state.classList).map((key, array) => {\r\n      return (\r\n        <>\r\n          <option value={key}>{key}</option>\r\n        </>\r\n      );\r\n    });\r\n\r\n    //Setting class list options to display\r\n    this.setState({ classOptions: options }, () => {\r\n      this.setUpProps();\r\n      this.setupBatchOptions();\r\n    });\r\n  };\r\n\r\n  //Setup the options for the <select> for batches based on the selected Class (SCHEDULE EXAM)\r\n  setupBatchOptions = () => {\r\n    //Currently selected class\r\n    let Class = this.classRef.current.value;\r\n\r\n    if (!Class) return;\r\n\r\n    //Getting batches of the selected class\r\n    let batches = this.state.classList[Class].batches;\r\n\r\n    let options = batches.map((batch, index, array) => {\r\n      return (\r\n        <>\r\n          <option value={batch}>{batch}</option>\r\n        </>\r\n      );\r\n    });\r\n\r\n    //Setting options as state to diaplay it in screen\r\n    this.setState({ batchOptions: options });\r\n  };\r\n\r\n  //Schedule a new Exam\r\n  scheduleExam = () => {\r\n    let examName = this.examNameRef.current.value;\r\n    let subject = this.subjectRef.current.value;\r\n    let timeFrom = this.timeFromRef.current.value;\r\n    let timeTo = this.timeToRef.current.value;\r\n    let date = this.dateRef.current.value;\r\n    let marks = this.marksRef.current.value;\r\n    let Class = this.classRef.current.value;\r\n    let batch = this.batchRef.current.value;\r\n\r\n    if (!examName) {\r\n      return alert(\"Please Enter exam name\");\r\n    }\r\n\r\n    if (!subject) {\r\n      return alert(\"Please Enter subject name\");\r\n    }\r\n\r\n    if (!timeFrom) {\r\n      return alert(\"Please Enter exam start time\");\r\n    }\r\n\r\n    if (!timeTo) {\r\n      return alert(\"Please Enter exam end time\");\r\n    }\r\n\r\n    if (!date) {\r\n      return alert(\"Please Enter date of exam\");\r\n    }\r\n\r\n    if (!marks || marks == 0) {\r\n      return alert(\"Invalid total marks\");\r\n    }\r\n\r\n    if (!Class || !batch) {\r\n      return alert(\"Class or batch data incorrect\");\r\n    }\r\n\r\n    //Validate time\r\n    let timeFromObject = new Date(\"1970-01-01 \" + timeFrom);\r\n    let timeToObject = new Date(\"1970-01-01 \" + timeTo);\r\n\r\n    if (timeFromObject.getTime() >= timeToObject.getTime()) {\r\n      return alert(\"Invalid time!\");\r\n    }\r\n\r\n    //Validate date\r\n    let dateObject = new Date(date + \" \" + timeFrom);\r\n    let now = new Date();\r\n\r\n    if (dateObject.getTime() <= now.getTime()) {\r\n      return alert(\"Invalid date\");\r\n    }\r\n\r\n    //VALIDATION SUCCESS\r\n\r\n    if (this.props.exam) {\r\n      //EDIT MODE==EDIT EXISTING EXAM\r\n      console.log(this.props.exam);\r\n      http(\r\n        \"POST\",\r\n        \"/teacher/editexam\",\r\n        {\r\n          examName,\r\n          subject,\r\n          timeFrom,\r\n          timeTo,\r\n          date,\r\n          marks,\r\n          Class,\r\n          batch,\r\n          questions: this.state.questions,\r\n          id: this.props.exam._id,\r\n        },\r\n        (res) => {\r\n          alert(res.data);\r\n\r\n          if (res.status == 200) {\r\n            window.$(\".modal.show\").modal(\"hide\");\r\n            this.props.history.push(\"/teacher\");\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      //CREATE NEW EXAM\r\n      //Send data to server\r\n      http(\r\n        \"POST\",\r\n        \"/teacher/newexam\",\r\n        {\r\n          examName,\r\n          subject,\r\n          timeFrom,\r\n          timeTo,\r\n          date,\r\n          marks,\r\n          Class,\r\n          batch,\r\n          questions: this.state.questions,\r\n        },\r\n        (res) => {\r\n          alert(res.data);\r\n\r\n          if (res.status == 200) {\r\n            window.$(\".modal.show\").modal(\"hide\");\r\n            this.props.history.push(\"/teacher\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getClasses();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/**SHOW CANVAS */}\r\n        {this.state.showCanvas ? (\r\n          <Canvas\r\n            close={this.closeCanvas}\r\n            save={this.saveCanvas}\r\n            image={this.state.editSelected ? this.state.canvas : undefined}\r\n          />\r\n        ) : null}\r\n        {/* Configuring The scheduleexam */}\r\n        {configureDialogBox(\r\n          \"scheduleexam\",\r\n          \"SCHEDULE EXAM\",\r\n          <>\r\n            <Row>\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">EXAM NAME</Form.Label>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  ref={this.examNameRef}\r\n                  className=\"text-box\"\r\n                  type=\"text\"\r\n                  placeholder=\"Exam name\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-2\">\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">SUBJECT</Form.Label>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  ref={this.subjectRef}\r\n                  className=\"text-box\"\r\n                  type=\"text\"\r\n                  placeholder=\"Subject\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-2\">\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">TIME</Form.Label>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">From</Form.Label>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  ref={this.timeFromRef}\r\n                  className=\"text-box\"\r\n                  type=\"time\"\r\n                  placeholder=\"FROM\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">To</Form.Label>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  ref={this.timeToRef}\r\n                  className=\"text-box\"\r\n                  type=\"time\"\r\n                  placeholder=\"TO\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-2\">\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">DATE</Form.Label>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  ref={this.dateRef}\r\n                  className=\"text-box\"\r\n                  type=\"date\"\r\n                  placeholder=\"Date\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-2\">\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">TOTAL MARKS</Form.Label>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  ref={this.marksRef}\r\n                  className=\"text-box\"\r\n                  type=\"number\"\r\n                  placeholder=\"Marks\"\r\n                  disabled\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row className=\"mt-2\">\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">CLASS</Form.Label>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  ref={this.classRef}\r\n                  \r\n                  as=\"select\"\r\n                  className=\"my-1 mr-sm-2 text-box\"\r\n                  id=\"inlineFormCustomSelectPref\"\r\n                  onChange={() => {\r\n                    //Setup batch details based on the selected class\r\n                    this.setupBatchOptions();\r\n                  }}\r\n                  custom\r\n                >\r\n                  <option value=\"\" selected>\r\n                    --CLASS--\r\n                  </option>\r\n                  {this.state.classOptions}\r\n                </Form.Control>\r\n              </Col>\r\n              <Col>\r\n                <Form.Label className=\"text-dark\">BATCH</Form.Label>\r\n              </Col>\r\n              <Col>\r\n                <Form.Control\r\n                  ref={this.batchRef}\r\n                  as=\"select\"\r\n                  className=\"mr-1 mr-sm-2 text-box\"\r\n                  id=\"inlineFormCustomSelectPref\"\r\n                  custom\r\n                >\r\n                  <option value=\"\" selected>\r\n                    --BATCH--\r\n                  </option>\r\n                  {this.state.batchOptions}\r\n                </Form.Control>\r\n              </Col>\r\n            </Row>\r\n          </>,\r\n          <>\r\n            <button\r\n              className=\"create-btn\"\r\n              onClick={this.scheduleExam}\r\n            >\r\n              {this.props.exam ? \"EDIT EXAM\" : \"CREATE EXAM\"}\r\n            </button>\r\n          </>\r\n        )}\r\n        {/* Configuring The add text */}\r\n        {configureDialogBox(\r\n          \"textModal\",\r\n          this.state.editSelected ? \"EDIT TEXT\" : \"ADD TEXT\",\r\n          <>\r\n            <form>\r\n              <label className=\"black\" for=\"text\">\r\n                Enter text:{\" \"}\r\n              </label>\r\n              <textarea\r\n                rows=\"10\"\r\n                name=\"text\"\r\n                id=\"text\"\r\n                className=\"m-3\"\r\n                ref={this.newTextRef}\r\n              ></textarea>\r\n            </form>\r\n          </>,\r\n          <>\r\n            <button\r\n              className=\"create-btn\"\r\n              onClick={\r\n                this.state.editSelected ? this.editText : this.addNewText\r\n              }\r\n            >\r\n              OK\r\n            </button>\r\n          </>\r\n        )}\r\n        {/* Configuring The add mcq */}\r\n        {configureDialogBox(\r\n          \"mcqModal\",\r\n          this.state.editSelected\r\n            ? \"EDIT MULTIPLE CHOICE QUESTION\"\r\n            : \"ADD MULTIPLE CHOICE QUESTION\",\r\n          <>\r\n            <form className=\"mcq-form\">\r\n              <label className=\"black\" for=\"mcq\">\r\n                Enter Question:{\" \"}\r\n              </label>\r\n              <textarea\r\n                name=\"mcq\"\r\n                ref={this.mcqQuestionRef}\r\n                id=\"mcq\"\r\n                className=\"  mr-3 form-control from-control-lg\"\r\n              ></textarea>\r\n              <br />\r\n              <label className=\"black\" for=\"mcq\">\r\n                Mark:{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"mark\"\r\n                id=\"mark\"\r\n                ref={this.mcqMarksRef}\r\n                className=\"ml-3 \"\r\n              ></input>\r\n              <br />\r\n              <div className=\"mcqOptionsContainer\">\r\n                <table>\r\n                  <tr>\r\n                    <td>Correct</td>\r\n                    <td>Choice</td>\r\n                  </tr>\r\n                  {this.renderMcqModalOptions()}\r\n                  <tr>\r\n                    <td></td>\r\n                    <td>\r\n                      <input\r\n                        type=\"text\"\r\n                        name=\"mcqNewOption\"\r\n                        placeholder=\"New Option\"\r\n                        ref={this.mcqNewOption}\r\n                      ></input>\r\n                    </td>\r\n                  </tr>\r\n                </table>\r\n              </div>\r\n            </form>\r\n          </>,\r\n          <>\r\n            <button className=\"create-btn\" onClick={this.addMcqOption}>\r\n              Add option\r\n            </button>\r\n            <button className=\"create-btn\" onClick={this.openCanvas}>\r\n              Canvas{\" \"}\r\n            </button>\r\n            <button\r\n              className=\"create-btn\"\r\n              onClick={() => {\r\n                window.$(\"#uploadImage\").modal(\"show\");\r\n              }}\r\n            >\r\n              Upload\r\n            </button>\r\n            <button\r\n              className=\"create-btn\"\r\n              onClick={\r\n                this.state.editSelected ? this.editMcq : this.addMcqQuestion\r\n              }\r\n            >\r\n              OK\r\n            </button>\r\n          </>\r\n        )}\r\n        {/* Configuring The add SHORT */}\r\n        {configureDialogBox(\r\n          \"shortModal\",\r\n          this.state.editSelected\r\n            ? \"EDIT SHORT ANSWER QUESTION\"\r\n            : \"ADD SHORT ANSWER QUESTION\",\r\n          <>\r\n            <form>\r\n              <label className=\"black mr-3\" for=\"mcq\">\r\n                Enter Question:\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"short\"\r\n                id=\"short\"\r\n                ref={this.shortQuestionRef}\r\n                className=\"mr-3 form-control from-control-lg\"\r\n              ></input>\r\n              <br />\r\n              <label className=\"black\" for=\"mcq\">\r\n                Mark:\r\n              </label>\r\n              <input\r\n                type=\"number\"\r\n                name=\"mark\"\r\n                id=\"mark\"\r\n                ref={this.shortMarksRef}\r\n                className=\"ml-3 \"\r\n              ></input>\r\n              <br />\r\n            </form>\r\n          </>,\r\n          <>\r\n            <button className=\"create-btn\" onClick={this.openCanvas}>\r\n              Canvas{\" \"}\r\n            </button>\r\n            <button\r\n              className=\"create-btn\"\r\n              onClick={() => {\r\n                window.$(\"#uploadImage\").modal(\"show\");\r\n              }}\r\n            >\r\n              Upload\r\n            </button>\r\n            <button\r\n              className=\"create-btn\"\r\n              onClick={this.state.editSelected ? this.editShort : this.addShort}\r\n            >\r\n              OK\r\n            </button>\r\n          </>\r\n        )}\r\n        {/* Configuring The add SHORT */}\r\n        {configureDialogBox(\r\n          \"essayModal\",\r\n          this.state.editSelected\r\n            ? \"EDIT ESSAY QUESTION\"\r\n            : \"ADD ESSAY QUESTION\",\r\n          <>\r\n            <form>\r\n              <label className=\"black mr-3\" for=\"mcq\">\r\n                Enter Question:\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"short\"\r\n                id=\"short\"\r\n                ref={this.essayQuestionRef}\r\n                className=\"mr-3 form-control from-control-lg\"\r\n              ></input>\r\n              <br />\r\n              <label className=\"black\" for=\"mcq\">\r\n                Mark:\r\n              </label>\r\n              <input\r\n                ref={this.essayMarksRef}\r\n                type=\"number\"\r\n                name=\"mark\"\r\n                id=\"mark\"\r\n                className=\"ml-3 \"\r\n              ></input>\r\n              <br />\r\n            </form>\r\n          </>,\r\n          <>\r\n            <button className=\"create-btn\" onClick={this.openCanvas}>\r\n              Canvas\r\n            </button>\r\n            <button\r\n              className=\"create-btn\"\r\n              onClick={() => {\r\n                window.$(\"#uploadImage\").modal(\"show\");\r\n              }}\r\n            >\r\n              Upload\r\n            </button>\r\n            <button\r\n              className=\"create-btn\"\r\n              onClick={this.state.editSelected ? this.editEssay : this.addEssay}\r\n            >\r\n              OK\r\n            </button>\r\n          </>\r\n        )}\r\n        <div>\r\n          {configureDialogBox(\r\n            \"uploadImage\",\r\n            \"Upload Image\",\r\n            <>\r\n              <form\r\n                // action=\"http://localhost:4000/upload\"\r\n                enctype=\"multipart/form-data\"\r\n                // method=\"post\"\r\n              >\r\n                <p>MAX FILE SIZE (5MB)</p>\r\n                <p>Only .jpg, .jpeg, .png files supported</p>\r\n                <input type=\"file\" id=\"imageUpload\" name=\"image\" />\r\n                <input\r\n                  type=\"button\"\r\n                  value=\"UPLOAD\"\r\n                  className=\"btn btn-primary\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    this.uploadFile();\r\n                  }}\r\n                />\r\n                <input\r\n                  type=\"button\"\r\n                  value=\"CLEAR\"\r\n                  className=\"btn btn-danger ml-1\"\r\n                  onClick={(e) => {\r\n                    e.preventDefault();\r\n                    this.clearUpload();\r\n                  }}\r\n                />\r\n              </form>\r\n            </>\r\n          )}\r\n        </div>\r\n        <NavBar>\r\n          {{\r\n            left: (\r\n              <div>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  className=\"btn btn-primary mr-3\"\r\n                  id=\"navBack\"\r\n                  size=\"sm\"\r\n                  data-bs-toggle=\"tooltip\" \r\n                  data-bs-placement=\"bottom\" \r\n                  title=\"Go back\"\r\n                  onClick={() => {\r\n                    this.props.history.push(\"/teacher\");\r\n                  }}\r\n                >\r\n                  {\"<\"}\r\n                </Button>\r\n                <h5>\r\n                  {this.props.exam\r\n                    ? \"EDIT QUESTION PAPER\"\r\n                    : \"CREATE QUESTION PAPER\"}\r\n                </h5>\r\n              </div>\r\n            ),\r\n            right: (\r\n              <div>\r\n                <Row>\r\n                  <Col>\r\n                    {\" \"}\r\n                    <button\r\n                      className=\"btn btn-light \"\r\n                      id=\"navBarDown\"\r\n                      data-bs-toggle=\"tooltip\" \r\n                      data-bs-placement=\"bottom\" \r\n                      title=\"Move question to bottom\"\r\n                      disabled={this.state.selectedQuestion ? undefined : true}\r\n                      onClick={this.questionDown}\r\n                    >\r\n                      <BsFillCaretDownFill />\r\n                    </button>\r\n                  </Col>\r\n                  <Col>\r\n                    <button\r\n                      className=\"btn btn-light ml-3 \"\r\n                      id=\"navBarUp\"\r\n                      data-bs-toggle=\"tooltip\" \r\n                      data-bs-placement=\"bottom\" \r\n                      title=\"Move Question to top\"\r\n                      disabled={this.state.selectedQuestion ? undefined : true}\r\n                      onClick={this.questionUp}\r\n                    >\r\n                      <BsFillCaretUpFill />\r\n                    </button>\r\n                  </Col>\r\n                  <Col>\r\n                    <button\r\n                      className=\"btn btn-light ml-3 \"\r\n                      id=\"navBarEdit\"\r\n                      data-bs-toggle=\"tooltip\" \r\n                      data-bs-placement=\"bottom\" \r\n                      title=\"Edit Question\"\r\n                      disabled={this.state.selectedQuestion ? undefined : true}\r\n                      onClick={this.editSelectedQuestion}\r\n                    >\r\n                      <BsPencil />\r\n                    </button>\r\n                  </Col>\r\n                  <Col>\r\n                    <button\r\n                      className=\"btn btn-light ml-3 \"\r\n                      id=\"navBarDelete\"\r\n                      data-bs-toggle=\"tooltip\" \r\n                      data-bs-placement=\"bottom\" \r\n                      title=\"Delete Question\"\r\n                      disabled={this.state.selectedQuestion ? undefined : true}\r\n                      onClick={this.removeQuestion}\r\n                    >\r\n                      <BsDash />\r\n                    </button>\r\n                  </Col>\r\n                  <Col>\r\n                    <Dropdown>\r\n                      <Dropdown.Toggle variant=\"light\" id=\"dropdown-basic\"\r\n                      data-bs-toggle=\"tooltip\" \r\n                      data-bs-placement=\"bottom\" \r\n                      title=\"Add Question\">\r\n                        <BsPlus />\r\n                      </Dropdown.Toggle>\r\n\r\n                      <Dropdown.Menu>\r\n                        <Dropdown.Item\r\n                          data-toggle=\"modal\"\r\n                          data-target=\"#textModal\"\r\n                          onClick={() => {\r\n                            this.setState({ editSelected: false, image: \"\" });\r\n                          }}\r\n                        >\r\n                          Text\r\n                        </Dropdown.Item>\r\n                        <div class=\"dropdown-divider\"></div>\r\n                        <Dropdown.Item\r\n                          data-toggle=\"modal\"\r\n                          data-target=\"#mcqModal\"\r\n                          onClick={() => {\r\n                            this.setState({ editSelected: false, image: \"\" });\r\n                          }}\r\n                        >\r\n                          Multiple Choice question\r\n                        </Dropdown.Item>\r\n                        <div class=\"dropdown-divider\"></div>\r\n                        <Dropdown.Item\r\n                          data-toggle=\"modal\"\r\n                          data-target=\"#shortModal\"\r\n                          onClick={() => {\r\n                            this.setState({ editSelected: false, image: \"\" });\r\n                          }}\r\n                        >\r\n                          Short answer\r\n                        </Dropdown.Item>\r\n                        <div class=\"dropdown-divider\"></div>\r\n                        <Dropdown.Item\r\n                          data-toggle=\"modal\"\r\n                          data-target=\"#essayModal\"\r\n                          onClick={() => {\r\n                            this.setState({ editSelected: false, image: \"\" });\r\n                          }}\r\n                        >\r\n                          Essay Question\r\n                        </Dropdown.Item>\r\n                      </Dropdown.Menu>\r\n                    </Dropdown>\r\n                  </Col>\r\n                  <Button\r\n                    className=\"btn btn-success ml-3\"\r\n                    id=\"navSuccess\"\r\n                    data-bs-toggle=\"tooltip\" \r\n                    data-bs-placement=\"bottom\" \r\n                    title=\"Finish\"\r\n                    onClick={this.openScheduleExam}\r\n                  >\r\n                    <BsCheck />\r\n                  </Button>\r\n                </Row>\r\n              </div>\r\n            ),\r\n          }}\r\n        </NavBar>\r\n        <div id=\"newExamBody\">\r\n          {this.state.questions.length == 0 ? (\r\n            <div\r\n              id=\"emptyQuestion\"\r\n              className=\"d-flex align-items-center justify-content-center\"\r\n            >\r\n              <p>NO QUESTIONS INSERTED</p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"list-group\" id=\"questionsList\">\r\n              {this.parseQuestions()}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(NewExam);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\setPassword\\SetPassword.js",["377","378"],"import { Component } from \"react\";\r\nimport \"./SetPassword.css\";\r\n\r\nimport http from \"../../../shared/http\";\r\nclass SetPassword extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      password: \"\",\r\n      confirm: \"\",\r\n      errorMessage: null,\r\n    };\r\n  }\r\n\r\n  validatePassword = () => {\r\n    if (this.state.password.length > 0 && this.state.confirm.length > 0) {\r\n      if (this.state.password === this.state.confirm) {\r\n        console.log(\"Password Validation Success\");\r\n        this.setState({ errorMessage: null });\r\n\r\n        http(\r\n          \"POST\",\r\n          \"/register/finish\",\r\n          { password: this.state.password },\r\n          (res) => {\r\n            if (res.status === 200) {\r\n              alert(\"Signup Completed\");\r\n              window.location.href = \"http://localhost:3000/signin\";\r\n            } else {\r\n              alert(\"Error: \" + res.data);\r\n            }\r\n          }\r\n        );\r\n      } else {\r\n        this.setState({ errorMessage: <p>Passwords do not match</p> });\r\n      }\r\n    } else {\r\n      this.setState({ errorMessage: \"No password entered\" });\r\n    }\r\n  };\r\n\r\n  onValueChange = (event) => {\r\n    let newSate = {};\r\n    newSate[event.target.name] = event.target.value;\r\n    this.setState(newSate);\r\n  };\r\n\r\n  showPassword = () => {\r\n    let password = document.getElementById(\"password\");\r\n    let confirm = document.getElementById(\"confirm\");\r\n\r\n    if (password.type == \"password\" && confirm.type == \"password\") {\r\n      password.type = \"text\";\r\n      confirm.type = \"text\";\r\n    } else {\r\n      password.type = \"password\";\r\n      confirm.type = \"password\";\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form>\r\n        <center>\r\n          <p id=\"info-text\">Setup a new Password</p>\r\n        </center>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            value={this.state.password}\r\n            onChange={this.onValueChange}\r\n            placeholder=\"Password\"\r\n            className=\"form-control mt-3\"\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            name=\"confirm\"\r\n            id=\"confirm\"\r\n            value={this.state.confirm}\r\n            onChange={this.onValueChange}\r\n            placeholder=\"Confirm Password\"\r\n            className=\"form-control mt-3\"\r\n          />\r\n          {this.state.errorMessage}\r\n          <br />\r\n          <div className=\"form-check\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"form-check-input\"\r\n              id=\"showPassword\"\r\n              name=\"showPassword\"\r\n              onClick={this.showPassword}\r\n            />\r\n            <label className=\"form-check-label\" for=\"showPassword\">\r\n              Show Password\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className=\"d-flex align-items-center justify-content-center\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-success\"\r\n            id=\"finish\"\r\n            onClick={this.validatePassword}\r\n          >\r\n            FINISH\r\n          </button>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SetPassword;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\TeacherProfile\\TeacherProfile.js",["379","380","381","382"],"import React, { Component } from \"react\";\r\nimport NavBar from \"../../ui-elements/navBar/NavBar\";\r\nimport { Button, Form, Row, Col } from \"react-bootstrap\";\r\nimport http from \"../../../shared/http\";\r\nimport configureDialogBox from \"../../../shared/dailogBox\";\r\nimport $ from \"jquery\";\r\n\r\nimport \"./TeacherProfile.css\";\r\nimport { Route, withRouter } from \"react-router-dom\";\r\nimport VerifyStudent from \"./VerifyStudent\";\r\n\r\nclass TeacherProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      otpDisabled: true,\r\n    };\r\n  }\r\n\r\n  //Creating required refs\r\n  emailRef = React.createRef();\r\n  passwordRef = React.createRef();\r\n  confirmRef = React.createRef();\r\n  newEmailRef = React.createRef();\r\n  otpRef = React.createRef();\r\n\r\n  //Set initial Value of the form\r\n  setFormaData = () => {\r\n    $(this.emailRef.current).attr(\"value\", this.props.user.user.email);\r\n  };\r\n\r\n  //Logout user\r\n  logout = () => {\r\n    http(\"GET\", \"/login/logout\", {}, (res) => {\r\n      alert(res.data);\r\n      if (res.status == 200) {\r\n        window.location.href = \"http://localhost:3000/\";\r\n      }\r\n    });\r\n  };\r\n\r\n  //email validation\r\n  validateEmail = (email) => {\r\n    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  //Save changes to user account\r\n  saveUserAccount = () => {\r\n    let password = this.passwordRef.current.value;\r\n    let confirm = this.confirmRef.current.value;\r\n\r\n    if (password) {\r\n      if (password == confirm) {\r\n        http(\"POST\", \"/teacher/profile/save\", { password }, (res) => {\r\n          alert(res.data);\r\n        });\r\n      } else {\r\n        alert(\"Passwords does not match\");\r\n      }\r\n    } else {\r\n      alert(\"Enter new Password!\");\r\n    }\r\n  };\r\n\r\n  //When click GET OTP button in change email modal\r\n  getOtpClickListener = () => {\r\n    let newEmail = this.newEmailRef.current.value;\r\n\r\n    if (newEmail && this.validateEmail(newEmail)) {\r\n      http(\r\n        \"POST\",\r\n        \"/register/changeemail/sendotp\",\r\n        { email: newEmail },\r\n        (res) => {\r\n          alert(res.data);\r\n          if (res.status == 200) {\r\n            this.otpSentSuccess();\r\n          }\r\n        }\r\n      );\r\n    } else {\r\n      alert(\"New Email is not valid\");\r\n    }\r\n  };\r\n\r\n  //Called when OTP is send successfully\r\n  otpSentSuccess = () => {\r\n    this.setState({ otpDisabled: false });\r\n  };\r\n\r\n  //Reset the modal to change email\r\n  resetModal = () => {\r\n    this.newEmailRef.current.value = \"\";\r\n\r\n    this.setState({ otpDisabled: true });\r\n  };\r\n\r\n  //Verify the OTP\r\n  verifyOtp = () => {\r\n    let otp = this.otpRef.current.value;\r\n    let email = this.newEmailRef.current.value;\r\n\r\n    if (otp) {\r\n      http(\"POST\", \"/register/changeemail/verify\", { otp, email }, (res) => {\r\n        alert(res.data);\r\n\r\n        if (res.status == 200) {\r\n          window.$(\"#change-email\").modal(\"toggle\");\r\n        }\r\n      });\r\n    } else {\r\n      alert(\"Please enter OTP\");\r\n    }\r\n  };\r\n\r\n  //Verify Students button click listener\r\n  verifyStudents = () => {\r\n    this.props.history.push(\"/teacher/profile/verifystudents\");\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setFormaData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Route path=\"/teacher/profile/verifystudents\">\r\n          <VerifyStudent />\r\n        </Route>\r\n        <Route path=\"/teacher/profile\" exact>\r\n          <div>\r\n            {/* Configure the change email modal */}\r\n            {configureDialogBox(\r\n              \"change-email\",\r\n              \"Change Email\",\r\n              <>\r\n                <div>\r\n                  Email:\r\n                  <br />\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"new-email\"\r\n                    placeholder=\"New Email\"\r\n                    id=\"new-email\"\r\n                    ref={this.newEmailRef}\r\n                    disabled={!this.state.otpDisabled}\r\n                  ></input>\r\n                  <br />\r\n                  <div className=\"text-right\">\r\n                    <input\r\n                      type=\"button\"\r\n                      className=\"btn btn-primary mt-3\"\r\n                      value=\"GET OTP\"\r\n                      onClick={this.getOtpClickListener}\r\n                    />\r\n                  </div>\r\n                  OTP:\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Enter OTP\"\r\n                    name=\"otp\"\r\n                    id=\"otp\"\r\n                    disabled={this.state.otpDisabled}\r\n                    ref={this.otpRef}\r\n                  />\r\n                </div>\r\n              </>,\r\n              <>\r\n                <input\r\n                  type=\"button\"\r\n                  className=\"btn btn-primary\"\r\n                  value=\"VERIFY\"\r\n                  disabled={this.state.otpDisabled}\r\n                  onClick={this.verifyOtp}\r\n                />\r\n              </>\r\n            )}\r\n            <NavBar>\r\n              {{\r\n                left: (\r\n                  <h5>\r\n                    <Button\r\n                      variant=\"primary\"\r\n                      className=\"btn btn-primary mr-3\"\r\n                      id=\"backBtn\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        window.history.back();\r\n                      }}\r\n                    >\r\n                      {\"<\"}\r\n                    </Button>\r\n                    <span id=\"username\">{this.props.user.user.name}</span>\r\n                  </h5>\r\n                ),\r\n                right: (\r\n                  <h5>\r\n                    <Row className=\"mt-2\">\r\n                      {this.props.user.mentor ? (\r\n                        <Col>\r\n                          <Button\r\n                            variant=\"primary\"\r\n                            ClassName=\"btn bg-light\"\r\n                            id=\"verifyStudentsBtn\"\r\n                            size=\"sm\"\r\n                            onClick={this.verifyStudents}\r\n                          >\r\n                            VERIFY STUDENTS\r\n                          </Button>\r\n                        </Col>\r\n                      ) : null}\r\n                      <Col>\r\n                        {\" \"}\r\n                        <Button\r\n                          variant=\"danger\"\r\n                          className=\"btn bg-danger\"\r\n                          id=\"logoutBtn\"\r\n                          size=\"md\"\r\n                          onClick={this.logout}\r\n                        >\r\n                          LOGOUT\r\n                        </Button>\r\n                      </Col>\r\n                    </Row>\r\n                  </h5>\r\n                ),\r\n              }}\r\n            </NavBar>\r\n            <div\r\n              className=\"d-flex align-items-center justify-content-center\"\r\n              id=\"userProfileBody\"\r\n            >\r\n              {/* <img src=\"...\" alt=\"...\" class=\"rounded-circle mt-5\"></img> */}\r\n\r\n              <Form className=\"col-sm-4\" id=\"userProfileForm\">\r\n                <Form.Group as={Row} controlId=\"formPlaintextEmail\">\r\n                  <Form.Label column sm=\"12\">\r\n                    Email\r\n                  </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      placeholder=\"Email\"\r\n                      disabled\r\n                      ref={this.emailRef}\r\n                    />\r\n                    <input\r\n                      type=\"button\"\r\n                      value=\"CHANGE\"\r\n                      id=\"changeBtn\"\r\n                      className=\"btn btn-primary mt-3\"\r\n                      data-toggle=\"modal\"\r\n                      data-target=\"#change-email\"\r\n                      onClick={this.resetModal}\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"formPlaintextPassword\">\r\n                  <Form.Label column sm=\"12\">\r\n                    New Password\r\n                  </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      ref={this.passwordRef}\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <Form.Group as={Row} controlId=\"formPlaintextPassword\">\r\n                  <Form.Label column sm=\"12\">\r\n                    Confirm Password\r\n                  </Form.Label>\r\n                  <Col sm=\"10\">\r\n                    <Form.Control\r\n                      type=\"password\"\r\n                      placeholder=\"Password\"\r\n                      ref={this.confirmRef}\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n                <p className=\"ml-2 text-right\">\r\n                  <Button\r\n                    className=\"ml-7\"\r\n                    id=\"saveBtn\"\r\n                    variant=\"primary\"\r\n                    onClick={this.saveUserAccount}\r\n                  >\r\n                    SAVE\r\n                  </Button>\r\n                </p>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n        </Route>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(TeacherProfile);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Message\\Messagelist.js",["383","384"],"import React from \"react\";\r\nimport Message from \"./Message\";\r\n\r\nimport http from \"../../../../shared/http\";\r\n\r\nclass Messagelist extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      messages: [],\r\n      replayedMessages: [],\r\n    };\r\n  }\r\n\r\n  //Get messages form server\r\n  getMessages = () => {\r\n    http(\"GET\", \"/admin/messages\", {}, (res) => {\r\n      if (res.status == 200) {\r\n        let replayedMessages = [];\r\n        let messages = [];\r\n\r\n        //Setting replayed messages\r\n        for (let message of res.data) {\r\n          console.log(message);\r\n          if (message.reply && message.reply != \"\") {\r\n            //Replayed message\r\n            replayedMessages.push(message);\r\n          } else {\r\n            //message not replayed\r\n            messages.push(message);\r\n          }\r\n        }\r\n        this.setState({ messages, replayedMessages });\r\n      } else alert(res.data);\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMessages();\r\n  }\r\n\r\n  render() {\r\n    let messages = this.state.messages.map((message) => {\r\n      return <Message message={message} />;\r\n    });\r\n\r\n    let replayed = this.state.replayedMessages.map((message) => {\r\n      return <Message message={message} replayed />;\r\n    });\r\n\r\n    return (\r\n      <>\r\n        <div>{messages}</div>\r\n        <div>{replayed}</div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Messagelist;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Message\\Messagecontent.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Institutionstructure\\Institutionstructure.js",["385"],"import React, { Component } from \"react\";\r\nimport Department from \"./Department\";\r\nimport ClassBatch from \"./ClassBatch\";\r\nimport Subject from \"./Subjects\";\r\n\r\nimport { Route, Switch, withRouter } from \"react-router-dom\";\r\n\r\nclass Institutionstructure extends Component {\r\n  //Change route to class\r\n  departmentSelected = (departmentId) => {\r\n    this.props.history.push(\r\n      \"/admin/institutionStructure/class/\" + departmentId\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: \"100%\" }}>\r\n        <Switch>\r\n          <Route path=\"/admin/institutionstructure/\" exact>\r\n            <Department departmentSelected={this.departmentSelected} />\r\n          </Route>\r\n\r\n          <Route path=\"/admin/institutionstructure/class/:departmentId\" exact>\r\n            <ClassBatch />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Institutionstructure);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\UserManagment\\UserMangamenet.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Report\\Report.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Home\\Home.js",["386","387","388"],"import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button, Row, Col, Form } from \"react-bootstrap\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\n\r\nimport http from \"../../../../shared/http\";\r\n\r\nimport \"./Home.css\";\r\n\r\nclass Home extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  //Creating ref to the form input\r\n  password = React.createRef();\r\n  confirm = React.createRef();\r\n\r\n  changePassword = () => {\r\n    //Getting the form values\r\n    let passwordValue = this.password.current.value;\r\n    let confirmValue = this.confirm.current.value;\r\n\r\n    //Validating password\r\n    if (passwordValue != \"\" && confirmValue != \"\") {\r\n      if (passwordValue === confirmValue)\r\n        http(\r\n          \"POST\",\r\n          \"/admin/changepassword\",\r\n          { password: passwordValue },\r\n          (res) => {\r\n            if (res.status === 200) {\r\n              alert(\"Password changed successfully\");\r\n            } else {\r\n              alert(res.data);\r\n            }\r\n          }\r\n        );\r\n      else alert(\"Password does not match\");\r\n    } else {\r\n      alert(\"Please fill all data\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container mt-5\">\r\n          <Jumbotron className=\"bg-secondary\" id=\"changePasswordDiv\">\r\n            <h1 className=\"text-light\">Change password</h1>\r\n            <Form>\r\n              <Form.Group as={Row} controlId=\"formPlaintextPassword\">\r\n                <Form.Label column>New Password</Form.Label>\r\n                <Col sm=\"10\">\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    ref={this.password}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n              <Form.Group as={Row} controlId=\"formPlaintextPassword\">\r\n                <Form.Label column>Confirm Password</Form.Label>\r\n                <Col sm=\"10\">\r\n                  <Form.Control\r\n                    type=\"password\"\r\n                    placeholder=\"Confirm\"\r\n                    ref={this.confirm}\r\n                  />\r\n                </Col>\r\n              </Form.Group>\r\n            </Form>\r\n\r\n            <p className=\"ml-2 text-right\">\r\n              <Button\r\n                className=\"ml-7\"\r\n                variant=\"primary\"\r\n                onClick={this.changePassword}\r\n              >\r\n                Save\r\n              </Button>\r\n            </p>\r\n          </Jumbotron>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\questionpaperpreview\\QuestionpaperPreview.js",["389","390","391"],"import React, { Component } from \"react\";\r\nimport \"./QuestionPaperPreview.css\";\r\n\r\nimport NavBar from \"../../ui-elements/navBar/NavBar\";\r\nimport { BsPencil, BsDash } from \"react-icons/bs\";\r\nimport { Row, Col, Button } from \"react-bootstrap\";\r\nimport Question from \"../Question/Question\";\r\nimport { Route, withRouter, Switch } from \"react-router-dom\";\r\nimport NewExam from \"../newExam/NewExam\";\r\nimport http from \"../../../shared/http\";\r\n\r\nclass QuestionPaperPreview extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this.timeDuration = 0;\r\n  }\r\n\r\n  //Parse the questions to display it\r\n  parseQuestions = () => {\r\n    let questionNumber = 0;\r\n\r\n    return this.props.exam.questionPaper.map((question, index) => {\r\n      //Count the question Number\r\n      if (question.type != \"header\" && question.type != \"text\") {\r\n        questionNumber++;\r\n      }\r\n\r\n      return (\r\n        <Question\r\n          question={question}\r\n          index={questionNumber}\r\n          key={question.id}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  //Convert milliseconds to time format string\r\n  msToTime = (s) => {\r\n    // Pad to 2 or 3 digits, default is 2\r\n    function pad(n, z) {\r\n      z = z || 2;\r\n      return (\"00\" + n).slice(-z);\r\n    }\r\n\r\n    var ms = s % 1000;\r\n    s = (s - ms) / 1000;\r\n    var secs = s % 60;\r\n    s = (s - secs) / 60;\r\n    var mins = s % 60;\r\n    var hrs = (s - mins) / 60;\r\n\r\n    return pad(hrs) + \":\" + pad(mins) + \":\" + pad(secs);\r\n  };\r\n\r\n  //Calculate time duration of the exam\r\n  calculateTimeDuration = () => {\r\n    let to = new Date(`${this.props.exam.date},${this.props.exam.to}`);\r\n    let from = new Date(`${this.props.exam.date},${this.props.exam.from}`);\r\n\r\n    let differenceInMilliSeconds = to.getTime() - from.getTime();\r\n\r\n    this.timeDuration = this.msToTime(differenceInMilliSeconds);\r\n  };\r\n\r\n  //Open edit exam page\r\n  openEditExam = () => {\r\n    console.log(this.props);\r\n    this.Class = this.props.Class;\r\n    this.batch = this.props.batch;\r\n\r\n    this.props.history.push(\"/teacher/previewexam/editexam\");\r\n  };\r\n\r\n  //Remove exam from server\r\n  removeExam = () => {\r\n    if (window.confirm(\"Are you sure to remove exam?\")) {\r\n      http(\r\n        \"POST\",\r\n        \"/teacher/removeexam\",\r\n        { id: this.props.exam._id },\r\n        (res) => {\r\n          alert(res.data);\r\n\r\n          if (res.status == 200) {\r\n            this.props.history.push(\"/teacher\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    //Calculate time duration of the exam\r\n    this.calculateTimeDuration();\r\n\r\n    return (\r\n      <>\r\n        <Switch>\r\n          <Route path=\"/teacher/previewexam/editexam\">\r\n            <NewExam\r\n              exam={this.props.exam}\r\n              Class={this.Class}\r\n              batch={this.batch}\r\n            />\r\n          </Route>\r\n          <Route path=\"/teacher/previewexam\" exact>\r\n            <div>\r\n              <NavBar>\r\n                {{\r\n                  left: (\r\n                    <div>\r\n                      <Button\r\n                        variant=\"primary\"\r\n                        className=\"btn btn-primary mr-3\"\r\n                        size=\"sm\"\r\n                        onClick={() => {\r\n                          window.history.back();\r\n                        }}\r\n                      >\r\n                        {\"<\"}\r\n                      </Button>\r\n                      <h5>PREVIEW QUESTION PAPER</h5>\r\n                    </div>\r\n                  ),\r\n                  right: !this.props.restricted ? (\r\n                    <h5>\r\n                      <Row>\r\n                        <Col>\r\n                          <Button\r\n                            className=\"btn btn-light ml-3 \"\r\n                            onClick={this.openEditExam}\r\n                          >\r\n                            <BsPencil />\r\n                          </Button>\r\n                        </Col>\r\n                        <Col>\r\n                          <Button\r\n                            className=\"btn btn-light ml-3 \"\r\n                            onClick={this.removeExam}\r\n                          >\r\n                            <BsDash />\r\n                          </Button>\r\n                        </Col>\r\n                      </Row>\r\n                    </h5>\r\n                  ) : null,\r\n                }}\r\n              </NavBar>\r\n              {/* Body of the question paper */}\r\n              <div id=\"previewExamBody\">\r\n                <Question\r\n                  question={{\r\n                    type: \"header\",\r\n                    examName: this.props.exam.examName,\r\n                    subject: this.props.exam.subject,\r\n                    date: this.props.exam.date,\r\n                    Class: this.props.Class,\r\n                    batch: this.props.batch,\r\n                    marks: this.props.exam.totalMarks,\r\n                    time: this.timeDuration,\r\n                  }}\r\n                />\r\n                {this.parseQuestions()}\r\n              </div>\r\n            </div>\r\n          </Route>\r\n        </Switch>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(QuestionPaperPreview);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\VerifyAccounts\\VerifyAccounts.js",["392","393","394","395"],"import React, { Component } from \"react\";\r\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\r\nimport { Button, Row, Col, Form } from \"react-bootstrap\";\r\nimport \"./verifyAccounts.css\";\r\n\r\nimport http from \"../../../../shared/http\";\r\nexport default class VerifyAccounts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userData: [],\r\n    };\r\n  }\r\n\r\n  //Get users data from the server\r\n  getUserData = () => {\r\n    http(\"GET\", \"/admin/verifyaccount\", null, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ userData: res.data });\r\n      } else {\r\n        alert(\"Users data return failed\");\r\n      }\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getUserData();\r\n  }\r\n\r\n  acceptUser = (item) => {\r\n    let confirmation = window.confirm(\"Are you sure you want to accept?\");\r\n\r\n    if (confirmation) {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/verifyaccount/accept\",\r\n        { userId: item.id },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Account Verified Successfully\");\r\n            document.getElementById(item.id).style.display = \"none\";\r\n          } else {\r\n            alert(\"Error during account verification\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  rejectUser = (item) => {\r\n    let confirmation = window.confirm(\"Are you sure you want to reject?\");\r\n\r\n    if (confirmation) {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/verifyaccount/reject\",\r\n        { userId: item.id },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Account Rejected Successfully\");\r\n            document.getElementById(item.id).style.display = \"none\";\r\n          } else {\r\n            alert(\"Error during account rejection\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  getTeacherList = () => {\r\n    let teachers = this.state.userData.map((item) => {\r\n      return (\r\n        <div className=\" mt-1 \" id={item.id}>\r\n          <ListItem height=\"180px\">\r\n            {{\r\n              left: (\r\n                <div>\r\n                  <span>\r\n                    <Row>\r\n                      <Col>\r\n                        <p class=\"text-left\">Name: {item.name}</p>\r\n                      </Col>\r\n                    </Row>\r\n                    <p class=\"text-left\">Email: {item.email}</p>\r\n                    <p class=\"text-left\">Department: {item.department}</p>\r\n                  </span>\r\n                  <Col>\r\n                    <br />\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\" mr-3 btn btn-danger\"\r\n                      onClick={() => this.rejectUser(item)}\r\n                    >\r\n                      Reject\r\n                    </Button>\r\n                  </Col>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div>\r\n                  <p class=\"text-right\">\r\n                    RegisterNumber: {item.registerNumber}\r\n                  </p>\r\n                  <br />\r\n                  <br />\r\n                  <br />\r\n                  <div className=\"text-right\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\" mr-3 btn btn-success\"\r\n                      onClick={() => this.acceptUser(item)}\r\n                    >\r\n                      Accept\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ),\r\n            }}\r\n          </ListItem>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return teachers;\r\n  };\r\n\r\n  render() {\r\n    return <>{this.getTeacherList()}</>;\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\previousExam\\PreviousExam.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Question.js",["396","397","398","399","400"],"import React, { Component } from \"react\";\r\nimport Mcq from \"./Mcq/Mcq\";\r\nimport \"./Question.css\";\r\nimport Text from \"./Text/Text\";\r\nimport Short from \"./Short/Short\";\r\nimport Essay from \"./Essay/Essay\";\r\nimport Header from \"./Header/Header\";\r\n\r\nexport default class Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      component: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Selecting question type\r\n    if (this.props.question.type == \"text\") {\r\n      this.setState({ component: <Text question={this.props.question} /> });\r\n    } else if (this.props.question.type == \"mcq\") {\r\n      this.setState({\r\n        component: (\r\n          <Mcq\r\n            question={this.props.question}\r\n            index={this.props.index}\r\n            examMode={this.props.examMode}\r\n            optionChange={this.props.optionChange}\r\n          />\r\n        ),\r\n      });\r\n    } else if (this.props.question.type == \"short\") {\r\n      this.setState({\r\n        component: (\r\n          <Short\r\n            question={this.props.question}\r\n            index={this.props.index}\r\n            examMode={this.props.examMode}\r\n            canvasClick={this.props.canvasClick}\r\n            textChange={this.props.textChange}\r\n          />\r\n        ),\r\n      });\r\n    } else if (this.props.question.type == \"essay\") {\r\n      this.setState({\r\n        component: (\r\n          <Essay\r\n            question={this.props.question}\r\n            index={this.props.index}\r\n            examMode={this.props.examMode}\r\n            canvasClick={this.props.canvasClick}\r\n            textChange={this.props.textChange}\r\n          />\r\n        ),\r\n      });\r\n    } else if (this.props.question.type == \"header\") {\r\n      this.setState({\r\n        component: <Header question={this.props.question} />,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id={this.props.question.id}\r\n        onClick={this.props.click}\r\n        className=\"question list-group-item list-group-item-action\"\r\n        data-toggle={this.props.examMode ? undefined : \"list\"}\r\n      >\r\n        {this.state.component}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Institutionstructure\\Department.js",["401","402","403","404","405","406"],"import React from \"react\";\r\nimport { Button, Form, Col, Row } from \"react-bootstrap\";\r\nimport { FaMinus, FaPencilAlt } from \"react-icons/fa\";\r\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\r\nimport configureDialogBox from \"../../../../shared/dailogBox\";\r\nimport \"./Department.css\";\r\nimport http from \"../../../../shared/http\";\r\nimport $ from \"jquery\";\r\n\r\nclass Departments extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      departmentList: null,\r\n    };\r\n  }\r\n\r\n  //Global member variables\r\n  departmentToEdit = \"\";\r\n\r\n  //Creating necessary ref objects\r\n  newDepartmentName = React.createRef();\r\n  departmentNewName = React.createRef(); //for editing department name\r\n\r\n  getDepartments = () => {\r\n    //getting department data from db\r\n    http(\"GET\", \"/admin/institutionstructure/department\", {}, async (res) => {\r\n      let departments = { ...res.data };\r\n\r\n      //This will return options for the <select> to select HOD for each department\r\n      let getHodOptions = (department) => {\r\n        //Get teachers in department options\r\n        let teacherOptions = [];\r\n        if (department.teachers) {\r\n          teacherOptions = department.teachers.map((teacher, index, array) => {\r\n            return <option value={teacher._id}>{teacher.name}</option>;\r\n          });\r\n        }\r\n\r\n        return (\r\n          <>\r\n            {/* //Setting HOD option */}\r\n            {department.assignedHod ? (\r\n              <option value={department.assignedHod._id} selected>\r\n                {department.assignedHod.name}\r\n              </option>\r\n            ) : (\r\n              <option selected>NO HOD</option>\r\n            )}\r\n            {teacherOptions}\r\n          </>\r\n        );\r\n      };\r\n\r\n      let departmentList = Object.keys(departments).map((key, index) => {\r\n        let department = departments[key];\r\n\r\n        return (\r\n          <div\r\n            onClick={(event) => {\r\n              if (event.target.id == \"list-item-container\")\r\n                this.props.departmentSelected(department.id);\r\n            }}\r\n          >\r\n            <ListItem height=\"90px\">\r\n              {{\r\n                left: (\r\n                  <Form className=\"md-6\">\r\n                    <Form.Group controlId=\"formBasicCheckbox\">\r\n                      <Row>\r\n                        <Col>\r\n                          <Form.Label className=\"text-dark\">{key}</Form.Label>\r\n                        </Col>\r\n                      </Row>\r\n                      <Row>\r\n                        <Col>\r\n                          <Form.Label className=\"text-dark\">\r\n                            Head of the department:\r\n                          </Form.Label>\r\n                        </Col>\r\n                        <Col>\r\n                          <Form.Control\r\n                            as=\"select\"\r\n                            defaultValue=\"Department\"\r\n                            placeholder=\"Department\"\r\n                            style={{ width: \"200px\" }}\r\n                            onChange={(e) => {\r\n                              this.changeHod(e, department.id);\r\n                            }}\r\n                          >\r\n                            {getHodOptions(department)}\r\n                          </Form.Control>\r\n                        </Col>\r\n                      </Row>\r\n                    </Form.Group>\r\n                  </Form>\r\n                ),\r\n                right: (\r\n                  <div>\r\n                    <Button\r\n                      className=\"btn btn-danger mr-3\"\r\n                      data-id={department.id}\r\n                      onClick={() => {\r\n                        this.removeDepartment(department.id);\r\n                      }}\r\n                    >\r\n                      <FaMinus />\r\n                    </Button>\r\n                    <a\r\n                      href=\"#\"\r\n                      data-toggle=\"modal\"\r\n                      data-target=\"#editdept\"\r\n                      style={{ color: \"white\" }}\r\n                    >\r\n                      <Button\r\n                        className=\"btn btn-secondary\"\r\n                        data-id={department.id}\r\n                        onClick={() => {\r\n                          this.setEditingDepartment(department.id);\r\n                        }}\r\n                      >\r\n                        <FaPencilAlt />\r\n                      </Button>\r\n                    </a>\r\n                  </div>\r\n                ),\r\n              }}\r\n            </ListItem>\r\n          </div>\r\n        );\r\n      });\r\n      this.setState({ departmentList });\r\n    });\r\n  };\r\n\r\n  //To add a new department\r\n  addDepartment = () => {\r\n    let departmentName = this.newDepartmentName.current.value;\r\n\r\n    if (departmentName == \"\") {\r\n      alert(\"Please fill department name\");\r\n    } else {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/institutionstructure/department/add\",\r\n        { departmentName },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Department addedd successfully\");\r\n          } else {\r\n            alert(res.data);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  setEditingDepartment = (departmentID) => {\r\n    this.departmentToEdit = departmentID;\r\n  };\r\n\r\n  //Edit an existing department\r\n  editDepartment = () => {\r\n    let newName = this.departmentNewName.current.value; //Getting new name\r\n\r\n    if (newName == \"\") {\r\n      alert(\"Please enter a new name for the department\");\r\n    } else {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/institutionstructure/department/edit\",\r\n        { departmentId: this.departmentToEdit, newName },\r\n        (res) => {\r\n          alert(res.data);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  //Remove a department\r\n  removeDepartment = (departmentId) => {\r\n    http(\r\n      \"POST\",\r\n      \"/admin/institutionstructure/department/remove\",\r\n      { departmentId },\r\n      (res) => {\r\n        alert(res.data);\r\n      }\r\n    );\r\n  };\r\n\r\n  //Change HOD of a department\r\n  changeHod = (event, departmentId) => {\r\n    http(\r\n      \"POST\",\r\n      \"/admin/institutionstructure/department/changehod\",\r\n      {\r\n        departmentId,\r\n        hod: event.target.value,\r\n      },\r\n      (res) => {\r\n        alert(res.data);\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    //get department data from server\r\n    this.getDepartments();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"departmentList\">\r\n        <div>\r\n          {/* Configuring The add department */}\r\n          {configureDialogBox(\r\n            \"adddept\",\r\n            \"ADD DEPARTMENT\",\r\n            <>\r\n              <label className=\"black\" for=\"dept\">\r\n                Name of department:{\" \"}\r\n              </label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"dept\"\r\n                id=\"dept\"\r\n                ref={this.newDepartmentName}\r\n              ></input>\r\n            </>,\r\n            <>\r\n              <button className=\"btn btn-primary\" onClick={this.addDepartment}>\r\n                ADD\r\n              </button>\r\n            </>\r\n          )}\r\n          {/* Configuring The edit department */}\r\n          {configureDialogBox(\r\n            \"editdept\",\r\n            \"EDIT DEPARTMENT\",\r\n            <>\r\n              <form>\r\n                <label className=\"black\" for=\"dept\">\r\n                  Name of department:{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"dept\"\r\n                  id=\"dept\"\r\n                  ref={this.departmentNewName}\r\n                ></input>\r\n                <br />\r\n              </form>\r\n            </>,\r\n            <>\r\n              <button className=\"btn btn-primary\" onClick={this.editDepartment}>\r\n                OK\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n\r\n        {this.state.departmentList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Departments;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Message\\Message.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Institutionstructure\\ClassBatch.js",["407","408","409","410","411","412","413","414"],"import React, { Component } from \"react\";\r\nimport { Button, Row, Form, Col, Modal } from \"react-bootstrap\";\r\n\r\nimport { FaMinus, FaPencilAlt, FaPlus } from \"react-icons/fa\";\r\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\r\nimport configureDialogBox from \"../../../../shared/dailogBox\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport http from \"../../../../shared/http\";\r\n\r\nclass ClassBatch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { classList: null };\r\n  }\r\n\r\n  //Global member variables\r\n  classToEdit = \"\";\r\n\r\n  //Creating necessary ref objects\r\n  newClassName = React.createRef();\r\n  newBatchName = React.createRef();\r\n  classNewName = React.createRef(); //for editing class name\r\n  batchNewName = React.createRef();\r\n\r\n  getClasses = () => {\r\n    //getting class data from db\r\n    http(\r\n      \"POST\",\r\n      \"/admin/institutionstructure/class\",\r\n      { department: this.props.match.params.departmentId },\r\n      async (res) => {\r\n        let classes = [...res.data];\r\n\r\n        //This will return options for the <select> to select HOD for each department\r\n        let getTeacherOptions = (cls) => {\r\n          //Get teachers in department options\r\n          let teacherOptions = [];\r\n          if (cls.teachers) {\r\n            teacherOptions = cls.teachers.map((teacher, index, array) => {\r\n              return <option value={teacher._id}>{teacher.name}</option>;\r\n            });\r\n          }\r\n\r\n          return (\r\n            <>\r\n              {/* //Setting Mentor option */}\r\n              {cls.assignedMentor ? (\r\n                <option value={cls.assignedMentor._id} selected>\r\n                  {cls.assignedMentor.name}\r\n                </option>\r\n              ) : (\r\n                <option selected>NO MENTOR</option>\r\n              )}\r\n              {teacherOptions}\r\n            </>\r\n          );\r\n        };\r\n\r\n        let classList = classes.map((Class, index) => {\r\n          // let Class = classes[key];\r\n\r\n          return (\r\n            <ListItem height=\"120px\">\r\n              {{\r\n                left: (\r\n                  <div className=\"p-1 \">\r\n                    <Form className=\"md-6\">\r\n                      <Form.Group controlId=\"formBasicCheckbox\">\r\n                        <Row>\r\n                          <Col>\r\n                            <Form.Label className=\"text-dark\">\r\n                              {Class.name}\r\n                            </Form.Label>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col>\r\n                            <Form.Label className=\"text-dark\">\r\n                              {Class.batch}\r\n                            </Form.Label>\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col>\r\n                            <Form.Label className=\"text-dark\">\r\n                              Mentor:\r\n                            </Form.Label>\r\n                          </Col>\r\n                          <Col>\r\n                            <Form.Control\r\n                              as=\"select\"\r\n                              defaultValue=\"Class Mentor\"\r\n                              placeholder=\"Class Mentor\"\r\n                              style={{ width: \"200px\" }}\r\n                              onChange={(event) => {\r\n                                this.changeMentor(event, Class.id);\r\n                              }}\r\n                            >\r\n                              {getTeacherOptions(Class)}\r\n                            </Form.Control>\r\n                          </Col>\r\n                        </Row>\r\n                      </Form.Group>\r\n                    </Form>\r\n                  </div>\r\n                ),\r\n                right: (\r\n                  <div>\r\n                    <Button\r\n                      className=\"mr-4 btn btn-danger\"\r\n                      onClick={() => {\r\n                        this.removeClass(Class.id);\r\n                      }}\r\n                    >\r\n                      <FaMinus />\r\n                    </Button>\r\n\r\n                    <a\r\n                      href=\"#\"\r\n                      data-toggle=\"modal\"\r\n                      data-target=\"#editclass\"\r\n                      style={{ color: \"white\" }}\r\n                    >\r\n                      <Button\r\n                        className=\"btn btn-secondary\"\r\n                        onClick={() => {\r\n                          this.setEditingClass(Class.id);\r\n                        }}\r\n                      >\r\n                        <FaPencilAlt />\r\n                      </Button>{\" \"}\r\n                    </a>\r\n                  </div>\r\n                ),\r\n              }}\r\n            </ListItem>\r\n          );\r\n        });\r\n        this.setState({ classList });\r\n      }\r\n    );\r\n  };\r\n\r\n  //To add a new class\r\n  addClass = () => {\r\n    let className = this.newClassName.current.value;\r\n    let batchName = this.newBatchName.current.value;\r\n\r\n    if (className == \"\" || batchName == \"\") {\r\n      alert(\"Please fill all data\");\r\n    } else {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/institutionstructure/class/add\",\r\n        {\r\n          className,\r\n          batchName,\r\n          department: this.props.match.params.departmentId,\r\n        },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Class addedd successfully\");\r\n          } else {\r\n            alert(res.data);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  setEditingClass = (classId) => {\r\n    this.classToEdit = classId;\r\n  };\r\n\r\n  //Edit an existing class\r\n  editClass = () => {\r\n    let newName = this.classNewName.current.value; //Getting new name\r\n    let newBatch = this.batchNewName.current.value;\r\n\r\n    if (newName == \"\" || newBatch == \"\") {\r\n      alert(\"Please enter all data\");\r\n    } else {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/institutionstructure/class/edit\",\r\n        { classId: this.classToEdit, newName, newBatch },\r\n        (res) => {\r\n          alert(res.data);\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  //Remove a class\r\n  removeClass = (classId) => {\r\n    http(\r\n      \"POST\",\r\n      \"/admin/institutionstructure/class/remove\",\r\n      { classId },\r\n      (res) => {\r\n        alert(res.data);\r\n      }\r\n    );\r\n  };\r\n\r\n  //Change Mentor of a department\r\n  changeMentor = (event, classId) => {\r\n    http(\r\n      \"POST\",\r\n      \"/admin/institutionstructure/class/changementor\",\r\n      {\r\n        classId,\r\n        mentor: event.target.value,\r\n      },\r\n      (res) => {\r\n        alert(res.data);\r\n      }\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getClasses();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          {/* Configuring The add department */}\r\n          {configureDialogBox(\r\n            \"addclass\",\r\n            \"ADD CLASS\",\r\n            <>\r\n              <form>\r\n                <label className=\"black\" for=\"class\">\r\n                  Class Name:{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"class\"\r\n                  id=\"class\"\r\n                  ref={this.newClassName}\r\n                ></input>\r\n                <label className=\"black\" for=\"batch\">\r\n                  Batch:{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"batch\"\r\n                  id=\"batch\"\r\n                  ref={this.newBatchName}\r\n                ></input>\r\n              </form>\r\n            </>,\r\n            <>\r\n              <button className=\"btn btn-primary\" onClick={this.addClass}>\r\n                OK\r\n              </button>\r\n            </>\r\n          )}\r\n          {/* Configuring The edit class */}\r\n          {configureDialogBox(\r\n            \"editclass\",\r\n            \"EDIT CLASS\",\r\n            <>\r\n              <form>\r\n                <label className=\"black\" for=\"className\">\r\n                  Class Name:{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"className\"\r\n                  id=\"className\"\r\n                  ref={this.classNewName}\r\n                ></input>\r\n                <label className=\"black\" for=\"batch\">\r\n                  Batch:{\" \"}\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"batch\"\r\n                  id=\"batch\"\r\n                  ref={this.batchNewName}\r\n                ></input>\r\n              </form>\r\n            </>,\r\n            <>\r\n              <button className=\"btn btn-primary\" onClick={this.editClass}>\r\n                EDIT\r\n              </button>\r\n            </>\r\n          )}\r\n        </div>\r\n        {this.state.classList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(ClassBatch);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\Institutionstructure\\Subjects.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\UserManagment\\Teachers.js",["415","416","417","418","419","420","421"],"import React, { Component } from \"react\";\r\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport http from \"../../../../shared/http\";\r\nimport $ from \"jquery\";\r\nimport Search from \"../../../ui-elements/Search/Search\";\r\n\r\nexport default class Teachers extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userData: [],\r\n    };\r\n  }\r\n\r\n  //Delete a user account\r\n  deleteClickListener = (item) => {\r\n    let confirmation = window.confirm(\"Are you sure to want to delete?\");\r\n\r\n    if (confirmation) {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/usermanagement/delete\",\r\n        { userId: item.id },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Teacher account deleted successfully\");\r\n\r\n            document.getElementById(item.id).style.display = \"none\";\r\n          } else {\r\n            alert(res.data);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  //Disable / Enable account\r\n  disableClickListener = (event, item) => {\r\n    if (event.target.value == \"Disable\") {\r\n      let confirmation = window.confirm(\"Are sure to Disable account?\");\r\n\r\n      if (confirmation) {\r\n        http(\r\n          \"POST\",\r\n          \"/admin/usermanagement/disable\",\r\n          { userId: item.id },\r\n          (res) => {\r\n            if (res.status == 200) {\r\n              alert(\"Teacher Account disabled Successfully\");\r\n              this.changeToEnable(item);\r\n            } else {\r\n              alert(res.data);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    } else {\r\n      let confirmation = window.confirm(\"Are you sure to Enable account?\");\r\n\r\n      if (confirmation) {\r\n        http(\r\n          \"POST\",\r\n          \"/admin/usermanagement/enable\",\r\n          { userId: item.id },\r\n          (res) => {\r\n            if (res.status == 200) {\r\n              alert(\"Teacher Account enabled Successfully\");\r\n              this.changeToDisable(item);\r\n            } else {\r\n              alert(res.data);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  //Change style of button\r\n  changeToDisable = (teacher) => {\r\n    let button = $(\"#\" + teacher.id + \" input[name='changestatus']\");\r\n    button.attr(\"value\", \"Disable\");\r\n    button.removeClass(\"btn-success\");\r\n    button.addClass(\"btn-warning\");\r\n  };\r\n\r\n  changeToEnable = (teacher) => {\r\n    let button = $(\"#\" + teacher.id + \" input[name='changestatus']\");\r\n    button.attr(\"value\", \"Enable\");\r\n    button.removeClass(\"btn-warning\");\r\n    button.addClass(\"btn-success\");\r\n  };\r\n\r\n  //Return jsx to render the list of teachers\r\n  getTeacherList = () => {\r\n    let teachers = this.state.userData.map((item) => {\r\n      return (\r\n        <div className=\" mt-1 \" id={item.id}>\r\n          <ListItem height=\"180px\">\r\n            {{\r\n              left: (\r\n                <div>\r\n                  <span>\r\n                    <p class=\"text-left\">Name: {item.name}</p>\r\n\r\n                    <p class=\"text-left\">Email: {item.email}</p>\r\n                    <p class=\"text-left\">Department: {item.department}</p>\r\n                  </span>{\" \"}\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\" mr-3 btn btn-danger\"\r\n                    onClick={() => this.deleteClickListener(item)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div class=\"text-right\">\r\n                  <p class=\"text-right\">\r\n                    Register Number: {item.registerNumber}\r\n                  </p>\r\n                  <br />\r\n                  <br />\r\n                  <br />\r\n                  <input\r\n                    type=\"button\"\r\n                    name=\"changestatus\"\r\n                    className={\r\n                      item.accountStatus == \"disabled\"\r\n                        ? \"mr-3 btn btn-success\"\r\n                        : \"mr-3 btn btn-warning\"\r\n                    }\r\n                    onClick={(event) => this.disableClickListener(event, item)}\r\n                    value={\r\n                      item.accountStatus == \"disabled\" ? \"Enable\" : \"Disable\"\r\n                    }\r\n                  ></input>\r\n                </div>\r\n              ),\r\n            }}\r\n          </ListItem>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return teachers;\r\n  };\r\n\r\n  //Get teacher user info from server\r\n  getUserData = () => {\r\n    http(\"GET\", \"/admin/usermanagement/teacher\", null, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ userData: res.data });\r\n      } else {\r\n        alert(\"Error during fetching teacher data from server\");\r\n      }\r\n    });\r\n  };\r\n\r\n  //Search\r\n  search = (searchText) => {\r\n    if (searchText) {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/usermanagement/teacher/search\",\r\n        { searchString: searchText },\r\n        (res) => {\r\n          this.setState({ userData: res.data });\r\n        }\r\n      );\r\n    } else {\r\n      //Return all users without filtering\r\n      this.getUserData();\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getUserData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Search click={this.search} />\r\n        {this.getTeacherList()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\TeacherProfile\\VerifyStudent.js",["422","423","424"],"import React, { Component } from \"react\";\r\nimport ListItem from \"../../ui-elements/ListItem/ListItem\";\r\nimport NavBar from \"../../ui-elements/navBar/NavBar\";\r\nimport { Row, Col, Button } from \"react-bootstrap\";\r\n\r\nimport \"./VerifyStudent.css\";\r\nimport http from \"../../../shared/http\";\r\n\r\nclass VerifyStudent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      studentData: [],\r\n    };\r\n  }\r\n\r\n  //Get the list of students in the class\r\n  getStudentData = () => {\r\n    http(\"GET\", \"/teacher/profile/verifystudents\", {}, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ studentData: res.data }, () => {\r\n          this.setUpStudentList();\r\n        });\r\n      } else {\r\n        alert(\"Error in fetching student account details\");\r\n      }\r\n    });\r\n  };\r\n\r\n  //Setup the list items for the students\r\n  setUpStudentList = () => {\r\n    return this.state.studentData.map((student, index, array) => {\r\n      return (\r\n        <div key={student.id} id={student.id}>\r\n          <ListItem height=\"180px\">\r\n            {{\r\n              left: (\r\n                <div>\r\n                  <span>\r\n                    <Row>\r\n                      <Col>\r\n                        <p class=\"text-left\">Name : {student.name} </p>\r\n                      </Col>\r\n                    </Row>\r\n                    <p class=\"text-left\">Email: {student.email}</p>\r\n                    <p class=\"text-left\">Class: {student.Class}</p>\r\n                    <p class=\"text-left\">Batch: {student.batch}</p>\r\n                  </span>{\" \"}\r\n                  <Col>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\" mr-3 btn btn-danger\"\r\n                      onClick={() => this.rejectStudent(student)}\r\n                    >\r\n                      Reject\r\n                    </Button>\r\n                  </Col>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div>\r\n                  <p>Admision Number: {student.registerNumber}</p>\r\n                  <p>Parentemail: {student.parentEmail}</p>\r\n                  <br />\r\n                  <br />\r\n                  <div className=\"text-right\">\r\n                    <Button\r\n                      type=\"submit\"\r\n                      className=\" mr-3 btn btn-success\"\r\n                      onClick={() => this.acceptStudent(student)}\r\n                    >\r\n                      Accept\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ),\r\n            }}\r\n          </ListItem>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  //Reject a student account\r\n  rejectStudent = (item) => {\r\n    let confirmation = window.confirm(\"Are you sure you want to reject?\");\r\n\r\n    if (confirmation) {\r\n      http(\r\n        \"POST\",\r\n        \"/teacher/profile/verifystudents/reject\",\r\n        { userId: item.id },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Account Rejected Successfully\");\r\n            document.getElementById(item.id).style.display = \"none\";\r\n          } else {\r\n            alert(\"Error during account rejection\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  //Accept a student account\r\n  acceptStudent = (item) => {\r\n    let confirmation = window.confirm(\"Are you sure you want to Accept?\");\r\n\r\n    if (confirmation) {\r\n      http(\r\n        \"POST\",\r\n        \"/teacher/profile/verifystudents/accept\",\r\n        { userId: item.id },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Account Accepted Successfully\");\r\n            document.getElementById(item.id).style.display = \"none\";\r\n          } else {\r\n            alert(\"Error during account verification\");\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getStudentData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NavBar>\r\n          {{\r\n            left: (\r\n              <h5>\r\n                <Button\r\n                  variant=\"primary\"\r\n                  className=\"btn btn-primary mr-3\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    window.history.back();\r\n                  }}\r\n                >\r\n                  {\"<\"}\r\n                </Button>\r\n                Verify Students\r\n              </h5>\r\n            ),\r\n          }}\r\n        </NavBar>\r\n        <div id=\"verifyStudentBody\">{this.setUpStudentList()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default VerifyStudent;\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\sigup\\student\\student.js",["425","426"],"import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport http from \"../../../../shared/http\";\r\n\r\nimport \"./student.css\";\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateData: (payload) => dispatch({ type: \"updateSignupData\", payload }),\r\n    clearData: () => dispatch({ type: \"clearSignupData\" }),\r\n  };\r\n};\r\nclass Student extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      parentEmailError: null,\r\n      emailError: null,\r\n      classList: null,\r\n      classOptions: null,\r\n      batchOptions: null,\r\n    };\r\n  }\r\n\r\n  inputValues = {};\r\n\r\n  validateEmail = (email) => {\r\n    if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  validateForm = () => {\r\n    if (\r\n      this.inputValues.name &&\r\n      this.inputValues.registerNumber &&\r\n      this.inputValues.class &&\r\n      this.inputValues.batch &&\r\n      this.inputValues.email &&\r\n      this.inputValues.parentEmail\r\n    ) {\r\n      this.setState({ error: null });\r\n      if (this.validateEmail(this.inputValues.email)) {\r\n        this.setState({ emailError: null });\r\n      } else {\r\n        this.setState({ emailError: <p>Enter a valid email address</p> });\r\n      }\r\n\r\n      if (this.validateEmail(this.inputValues.parentEmail)) {\r\n        this.setState({ parentEmailError: null });\r\n      } else {\r\n        this.setState({ parentEmailError: <p>Enter a valid email address</p> });\r\n      }\r\n\r\n      if (\r\n        this.validateEmail(this.inputValues.email) &&\r\n        this.validateEmail(this.inputValues.parentEmail)\r\n      ) {\r\n        //Successful validation\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      this.setState({\r\n        error: <p style={{ color: \"black\" }}>PLEASE FILL ALL DATA</p>,\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  onValueChange = (event) => {\r\n    this.inputValues[event.target.name] = event.target.value;\r\n    let valid = this.validateForm();\r\n\r\n    if (valid) {\r\n      this.props.updateData({ accountType: \"student\", ...this.inputValues });\r\n    } else {\r\n      this.props.clearData();\r\n    }\r\n\r\n    if (event.target.name == \"class\") {\r\n      //Setup batch details based on the selected class\r\n      this.setupBatchOptions();\r\n    }\r\n  };\r\n\r\n  setView = () => {\r\n    if (this.props.google) {\r\n      document\r\n        .getElementById(\"email\")\r\n        .setAttribute(\"value\", this.props.data.email);\r\n      document\r\n        .getElementById(\"name\")\r\n        .setAttribute(\"value\", this.props.data.name);\r\n\r\n      document.getElementById(\"email\").setAttribute(\"disabled\", \"true\");\r\n      document.getElementById(\"name\").setAttribute(\"disabled\", \"true\");\r\n    }\r\n  };\r\n\r\n  //Get Class data from the database\r\n  getClasses = () => {\r\n    http(\"GET\", \"/login/getclasses\", {}, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ classList: res.data });\r\n        this.setupClassOptions();\r\n      }\r\n    });\r\n  };\r\n\r\n  //Setup the options for the <select> for classes\r\n  setupClassOptions = () => {\r\n    //Options JSX\r\n    let options = [];\r\n\r\n    options = Object.keys(this.state.classList).map((key, array) => {\r\n      return (\r\n        <>\r\n          <option value={key}>{key}</option>\r\n        </>\r\n      );\r\n    });\r\n\r\n    //Setting class list options to display\r\n    this.setState({ classOptions: options });\r\n  };\r\n\r\n  //Setup the options for the <select> for batches based on the selected Class\r\n  setupBatchOptions = () => {\r\n    //Currently selected class\r\n    let Class = this.inputValues.class;\r\n\r\n    //Getting batches of the selected class\r\n    let batches = this.state.classList[Class].batches;\r\n\r\n    let options = batches.map((batch, index, array) => {\r\n      return (\r\n        <>\r\n          <option value={batch}>{batch}</option>\r\n        </>\r\n      );\r\n    });\r\n\r\n    //Setting options as state to diaplay it in screen\r\n    this.setState({ batchOptions: options });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.clearData();\r\n    this.setView();\r\n\r\n    //Get class info\r\n    this.getClasses();\r\n  }\r\n\r\n  render() {\r\n    if (this.props.google) {\r\n      this.inputValues.name = this.props.data.name;\r\n      this.inputValues.email = this.props.data.email;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.error}\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          placeholder=\"Name\"\r\n          onChange={this.onValueChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control mt-3\"\r\n          id=\"admission-number\"\r\n          name=\"registerNumber\"\r\n          placeholder=\"Admission Number\"\r\n          onChange={this.onValueChange}\r\n        />\r\n        <select\r\n          className=\"form-select mt-3\"\r\n          aria-label=\"Default select example\"\r\n          id=\"class\"\r\n          name=\"class\"\r\n          onChange={this.onValueChange}\r\n        >\r\n          <option value=\"\" selected>\r\n            --CLASS--\r\n          </option>\r\n          {this.state.classOptions}\r\n        </select>\r\n        <select\r\n          className=\"form-select mt-3\"\r\n          aria-label=\"Default select example\"\r\n          id=\"batch\"\r\n          onChange={this.onValueChange}\r\n          name=\"batch\"\r\n        >\r\n          <option value=\"\" selected>\r\n            --BATCH--\r\n          </option>\r\n          {this.state.batchOptions}\r\n        </select>\r\n        <input\r\n          type=\"email\"\r\n          className=\"form-control mt-3\"\r\n          id=\"email\"\r\n          name=\"email\"\r\n          placeholder=\"Email\"\r\n          onChange={this.onValueChange}\r\n        />\r\n        {this.state.emailError}\r\n        <input\r\n          type=\"email\"\r\n          className=\"form-control mt-3\"\r\n          id=\"parent-email\"\r\n          name=\"parentEmail\"\r\n          placeholder=\"Parent Email\"\r\n          onChange={this.onValueChange}\r\n        />\r\n        {this.state.parentEmailError}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Student);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\admin\\pages\\UserManagment\\Students.js",["427","428","429","430","431","432","433"],"import React, { Component } from \"react\";\r\nimport ListItem from \"../../../ui-elements/ListItem/ListItem\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport http from \"../../../../shared/http\";\r\nimport $ from \"jquery\";\r\nimport Search from \"../../../ui-elements/Search/Search\";\r\n\r\nexport default class Students extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      userData: [],\r\n    };\r\n  }\r\n\r\n  //Delete a user account\r\n  deleteClickListener = (item) => {\r\n    let confirmation = window.confirm(\"Are you sure to want to delete?\");\r\n\r\n    if (confirmation) {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/usermanagement/delete\",\r\n        { userId: item.id },\r\n        (res) => {\r\n          if (res.status == 200) {\r\n            alert(\"Student account deleted successfully\");\r\n\r\n            document.getElementById(item.id).style.display = \"none\";\r\n          } else {\r\n            alert(res.data);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  //Disable / Enable account\r\n  disableClickListener = (event, item) => {\r\n    if (event.target.value == \"Disable\") {\r\n      let confirmation = window.confirm(\"Are sure to Disable account?\");\r\n\r\n      if (confirmation) {\r\n        http(\r\n          \"POST\",\r\n          \"/admin/usermanagement/disable\",\r\n          { userId: item.id },\r\n          (res) => {\r\n            if (res.status == 200) {\r\n              alert(\"Student Account disabled Successfully\");\r\n              this.changeToEnable(item);\r\n            } else {\r\n              alert(res.data);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    } else {\r\n      let confirmation = window.confirm(\"Are you sure to Enable account?\");\r\n\r\n      if (confirmation) {\r\n        http(\r\n          \"POST\",\r\n          \"/admin/usermanagement/enable\",\r\n          { userId: item.id },\r\n          (res) => {\r\n            if (res.status == 200) {\r\n              alert(\"Student Account enabled Successfully\");\r\n              this.changeToDisable(item);\r\n            } else {\r\n              alert(res.data);\r\n            }\r\n          }\r\n        );\r\n      }\r\n    }\r\n  };\r\n\r\n  //Change style of button\r\n  changeToDisable = (student) => {\r\n    let button = $(\"#\" + student.id + \" input[name='changestatus']\");\r\n    button.attr(\"value\", \"Disable\");\r\n    button.removeClass(\"btn-success\");\r\n    button.addClass(\"btn-warning\");\r\n  };\r\n\r\n  changeToEnable = (student) => {\r\n    let button = $(\"#\" + student.id + \" input[name='changestatus']\");\r\n    button.attr(\"value\", \"Enable\");\r\n    button.removeClass(\"btn-warning\");\r\n    button.addClass(\"btn-success\");\r\n  };\r\n\r\n  getStudentList = () => {\r\n    let students = this.state.userData.map((item) => {\r\n      console.log(item);\r\n      return (\r\n        <div className=\"mt-1\" id={item.id}>\r\n          <ListItem height=\"180px\">\r\n            {{\r\n              left: (\r\n                <div>\r\n                  <p>Name: {item.name}</p>\r\n\r\n                  <p>Email: {item.email}</p>\r\n                  <p>Parent Email: {item.parentEmail}</p>\r\n                  <p>Register Number: {item.registerNumber}</p>\r\n\r\n                  <Button\r\n                    type=\"submit\"\r\n                    className=\" mr-3 btn btn-danger\"\r\n                    onClick={() => this.deleteClickListener(item)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </div>\r\n              ),\r\n              right: (\r\n                <div class=\"text-right\">\r\n                  <p>Class: {item.class}</p>\r\n                  <p>Batch: {item.batch}</p>\r\n                  <br />\r\n                  <br />\r\n                  <input\r\n                    type=\"button\"\r\n                    className={\r\n                      item.accountStatus == \"disabled\"\r\n                        ? \"mr-3 btn btn-success\"\r\n                        : \"mr-3 btn btn-warning\"\r\n                    }\r\n                    onClick={(event) => this.disableClickListener(event, item)}\r\n                    value={\r\n                      item.accountStatus == \"disabled\" ? \"Enable\" : \"Disable\"\r\n                    }\r\n                  ></input>\r\n                </div>\r\n              ),\r\n            }}\r\n          </ListItem>\r\n        </div>\r\n      );\r\n    });\r\n    return students;\r\n  };\r\n\r\n  getUserData = () => {\r\n    http(\"GET\", \"/admin/usermanagement/student\", null, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ userData: res.data });\r\n      } else {\r\n        alert(\"Error during fetching student data from server\");\r\n      }\r\n    });\r\n  };\r\n\r\n  //Search\r\n  search = (searchText) => {\r\n    if (searchText) {\r\n      http(\r\n        \"POST\",\r\n        \"/admin/usermanagement/student/search\",\r\n        { searchString: searchText },\r\n        (res) => {\r\n          this.setState({ userData: res.data });\r\n        }\r\n      );\r\n    } else {\r\n      //Return all users without filtering\r\n      this.getUserData();\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getUserData();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Search click={this.search} />\r\n        {this.getStudentList()}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\login\\sigup\\teacher\\teacher.js",["434"],"import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport http from \"../../../../shared/http\";\r\n\r\nimport \"./teacher.css\";\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    updateData: (payload) => dispatch({ type: \"updateSignupData\", payload }),\r\n    clearData: () => dispatch({ type: \"clearSignupData\" }),\r\n  };\r\n};\r\nclass Teacher extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      emailValidation: null,\r\n      departmentList: null,\r\n      departments: null,\r\n    };\r\n  }\r\n\r\n  inputValues = {};\r\n\r\n  validateForm = () => {\r\n    if (\r\n      this.inputValues.name &&\r\n      this.inputValues.registerNumber &&\r\n      this.inputValues.department &&\r\n      this.inputValues.email\r\n    ) {\r\n      this.setState({ error: null });\r\n      if (\r\n        /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(this.inputValues.email)\r\n      ) {\r\n        this.setState({ emailValidation: null });\r\n\r\n        //Successful validation\r\n        return true;\r\n      } else {\r\n        this.setState({ emailValidation: <p>Enter a valid email address</p> });\r\n        return false;\r\n      }\r\n    } else {\r\n      this.setState({\r\n        error: <p style={{ color: \"black\" }}>PLEASE FILL ALL DATA</p>,\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  onValueChange = (event) => {\r\n    this.inputValues[event.target.name] = event.target.value;\r\n    let valid = this.validateForm();\r\n\r\n    if (valid) {\r\n      this.props.updateData({ accountType: \"teacher\", ...this.inputValues });\r\n    } else {\r\n      this.props.clearData();\r\n    }\r\n  };\r\n\r\n  setView = () => {\r\n    if (this.props.google) {\r\n      document\r\n        .getElementById(\"email\")\r\n        .setAttribute(\"value\", this.props.data.email);\r\n      document\r\n        .getElementById(\"name\")\r\n        .setAttribute(\"value\", this.props.data.name);\r\n\r\n      document.getElementById(\"email\").setAttribute(\"disabled\", \"true\");\r\n      document.getElementById(\"name\").setAttribute(\"disabled\", \"true\");\r\n    }\r\n  };\r\n\r\n  //Get department details from db\r\n  getDepartmentList = () => {\r\n    http(\"GET\", \"/login/departments\", null, (res) => {\r\n      if (res.status == 200) {\r\n        this.setState({ departments: res.data });\r\n        this.setupDepartmentList();\r\n      } else {\r\n        alert(\"Error returning department list\");\r\n      }\r\n    });\r\n  };\r\n\r\n  //Setup JSX element to show the department list using <option> tag\r\n  setupDepartmentList = () => {\r\n    let departmentList = this.state.departments.map(\r\n      (department, index, array) => {\r\n        return <option value={department._id}>{department.name}</option>;\r\n      }\r\n    );\r\n\r\n    this.setState({ departmentList });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.clearData();\r\n    this.setView();\r\n    this.getDepartmentList();\r\n  }\r\n\r\n  render() {\r\n    if (this.props.google) {\r\n      this.inputValues.name = this.props.data.name;\r\n      this.inputValues.email = this.props.data.email;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.error}\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          id=\"name\"\r\n          placeholder=\"Name\"\r\n          name=\"name\"\r\n          onChange={this.onValueChange}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control mt-3\"\r\n          id=\"id-number\"\r\n          name=\"registerNumber\"\r\n          onChange={this.onValueChange}\r\n          placeholder=\"ID Number\"\r\n        />\r\n        <select\r\n          className=\"form-select mt-3\"\r\n          aria-label=\"Default select example\"\r\n          name=\"department\"\r\n          onChange={this.onValueChange}\r\n          id=\"department\"\r\n        >\r\n          <option selected value=\"\">\r\n            --SELECT DEPARTMENT--\r\n          </option>\r\n          {this.state.departmentList}\r\n        </select>\r\n        <input\r\n          type=\"email\"\r\n          className=\"form-control mt-3\"\r\n          id=\"email\"\r\n          name=\"email\"\r\n          onChange={this.onValueChange}\r\n          placeholder=\"Email\"\r\n        />\r\n        {this.state.emailValidation}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Teacher);\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Text\\Text.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Short\\Short.js",["435","436"],"import React, { Component } from \"react\";\r\nimport \"./Short.css\";\r\n\r\nexport default class Short extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"text-right\">{this.props.question.marks} Mark(s)</div>\r\n        {this.props.index ? this.props.index + \". \" : null}\r\n        {this.props.question.question}\r\n        {this.props.question.canvas ? (\r\n          <div className=\"questionCanvas\">\r\n            <img src={this.props.question.canvas}></img>\r\n          </div>\r\n        ) : null}\r\n        {this.props.question.image ? (\r\n          <div className=\"questionImage\">\r\n            <img src={this.props.question.image}></img>\r\n          </div>\r\n        ) : null}\r\n        {/* Display the exam wring system if the question is in examMode */}\r\n        {this.props.examMode ? (\r\n          <>\r\n            <br />\r\n            <hr />\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"Your answer here\"\r\n                    name=\"shortQuestionAnswer\"\r\n                    onChange={(e) => {\r\n                      this.props.textChange(e.target.value);\r\n                      this.forceUpdate();\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                  <input\r\n                    type=\"button\"\r\n                    value=\"CANVAS\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={this.props.canvasClick}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Mcq\\Mcq.js",["437","438"],"import React, { Component } from \"react\";\r\nimport \"./Mcq.css\";\r\n\r\nexport default class Mcq extends Component {\r\n  render() {\r\n    let optionsList = this.props.question.options.map((option, index) => {\r\n      return (\r\n        <div class=\"form-check\" key={this.props.question.id + option.name}>\r\n          <input\r\n            class=\"form-check-input\"\r\n            type=\"radio\"\r\n            name={`options${this.props.question.id}`}\r\n            value={option.name}\r\n            checked={option.correct && !this.props.examMode ? true : undefined}\r\n            onChange={(e) => {\r\n              this.props.optionChange(e.target.value);\r\n            }}\r\n            disabled={!this.props.examMode}\r\n          />\r\n          <label class=\"form-check-label\" for=\"options\">\r\n            {option.name}\r\n          </label>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"text-right\">{this.props.question.marks} Mark(s)</div>\r\n        {this.props.index ? this.props.index + \". \" : null}\r\n        {this.props.question.question}\r\n\r\n        {this.props.question.canvas ? (\r\n          <div className=\"questionCanvas\">\r\n            <img src={this.props.question.canvas}></img>\r\n          </div>\r\n        ) : null}\r\n\r\n        {this.props.question.image ? (\r\n          <div className=\"questionImage\">\r\n            <img src={this.props.question.image}></img>\r\n          </div>\r\n        ) : null}\r\n\r\n        <div>{optionsList}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Header\\Header.js",[],"C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\teacher\\Question\\Essay\\Essay.js",["439","440"],"import React, { Component } from \"react\";\r\nimport \"./Essay.css\";\r\n\r\nexport default class Essay extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"text-right\">{this.props.question.marks} Mark(s)</div>\r\n        {this.props.index ? this.props.index + \". \" : null}\r\n        {this.props.question.question}\r\n\r\n        {this.props.question.canvas ? (\r\n          <div className=\"questionCanvas\">\r\n            <img src={this.props.question.canvas}></img>\r\n          </div>\r\n        ) : null}\r\n\r\n        {this.props.question.image ? (\r\n          <div className=\"questionImage\">\r\n            <img src={this.props.question.image}></img>\r\n          </div>\r\n        ) : null}\r\n\r\n        {/* Display the exam wring system if the question is in examMode */}\r\n        {this.props.examMode ? (\r\n          <>\r\n            <br />\r\n            <hr />\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-10\">\r\n                  <textarea\r\n                    placeholder=\"Your answer here\"\r\n                    name=\"essayQuestionAnswer\"\r\n                    rows=\"15\"\r\n                    onChange={(e) => {\r\n                      this.props.textChange(e.target.value);\r\n                    }}\r\n                  ></textarea>\r\n                </div>\r\n                <div className=\"col-sm-2\">\r\n                  <input\r\n                    type=\"button\"\r\n                    value=\"CANVAS\"\r\n                    className=\"btn btn-primary\"\r\n                    onClick={this.props.canvasClick}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\coderb\\Documents\\YuvsShiksha\\yuvashiksha\\src\\components\\ui-elements\\Search\\Search.js",[],["441","442"],{"ruleId":"443","replacedBy":"444"},{"ruleId":"445","replacedBy":"446"},{"ruleId":"447","severity":1,"message":"448","line":2,"column":25,"nodeType":"449","messageId":"450","endLine":2,"endColumn":33},{"ruleId":"447","severity":1,"message":"451","line":7,"column":8,"nodeType":"449","messageId":"450","endLine":7,"endColumn":15},{"ruleId":"447","severity":1,"message":"452","line":15,"column":8,"nodeType":"449","messageId":"450","endLine":15,"endColumn":14},{"ruleId":"447","severity":1,"message":"453","line":7,"column":10,"nodeType":"449","messageId":"450","endLine":7,"endColumn":14},{"ruleId":"447","severity":1,"message":"454","line":7,"column":16,"nodeType":"449","messageId":"450","endLine":7,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":32,"column":22,"nodeType":"457","messageId":"458","endLine":32,"endColumn":24},{"ruleId":"459","severity":1,"message":"460","line":47,"column":36,"nodeType":"461","messageId":"462","endLine":47,"endColumn":38},{"ruleId":"447","severity":1,"message":"454","line":7,"column":3,"nodeType":"449","messageId":"450","endLine":7,"endColumn":16},{"ruleId":"455","severity":1,"message":"456","line":19,"column":24,"nodeType":"457","messageId":"458","endLine":19,"endColumn":26},{"ruleId":"455","severity":1,"message":"456","line":19,"column":24,"nodeType":"457","messageId":"458","endLine":19,"endColumn":26},{"ruleId":"463","severity":1,"message":"464","line":65,"column":5,"nodeType":"465","messageId":"466","endLine":87,"endColumn":6},{"ruleId":"455","severity":1,"message":"456","line":88,"column":16,"nodeType":"457","messageId":"458","endLine":88,"endColumn":18},{"ruleId":"455","severity":1,"message":"456","line":130,"column":13,"nodeType":"457","messageId":"458","endLine":130,"endColumn":15},{"ruleId":"455","severity":1,"message":"456","line":146,"column":13,"nodeType":"457","messageId":"458","endLine":146,"endColumn":15},{"ruleId":"455","severity":1,"message":"456","line":146,"column":28,"nodeType":"457","messageId":"458","endLine":146,"endColumn":30},{"ruleId":"455","severity":1,"message":"456","line":149,"column":13,"nodeType":"457","messageId":"458","endLine":149,"endColumn":15},{"ruleId":"455","severity":1,"message":"456","line":27,"column":24,"nodeType":"457","messageId":"458","endLine":27,"endColumn":26},{"ruleId":"467","severity":1,"message":"468","line":9,"column":7,"nodeType":"469","messageId":"470","endLine":9,"endColumn":13},{"ruleId":"467","severity":1,"message":"468","line":8,"column":7,"nodeType":"469","messageId":"470","endLine":8,"endColumn":13},{"ruleId":"447","severity":1,"message":"471","line":2,"column":10,"nodeType":"449","messageId":"450","endLine":2,"endColumn":19},{"ruleId":"447","severity":1,"message":"472","line":2,"column":21,"nodeType":"449","messageId":"450","endLine":2,"endColumn":24},{"ruleId":"447","severity":1,"message":"473","line":2,"column":26,"nodeType":"449","messageId":"450","endLine":2,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":52,"column":22,"nodeType":"457","messageId":"458","endLine":52,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":75,"column":14,"nodeType":"457","messageId":"458","endLine":75,"endColumn":16},{"ruleId":"474","severity":1,"message":"475","line":108,"column":15,"nodeType":"476","endLine":108,"endColumn":80},{"ruleId":"474","severity":1,"message":"475","line":111,"column":15,"nodeType":"476","endLine":115,"endColumn":16},{"ruleId":"474","severity":1,"message":"475","line":118,"column":15,"nodeType":"476","endLine":122,"endColumn":16},{"ruleId":"474","severity":1,"message":"475","line":125,"column":15,"nodeType":"476","endLine":129,"endColumn":16},{"ruleId":"474","severity":1,"message":"475","line":132,"column":15,"nodeType":"476","endLine":136,"endColumn":16},{"ruleId":"474","severity":1,"message":"475","line":139,"column":15,"nodeType":"476","endLine":143,"endColumn":16},{"ruleId":"447","severity":1,"message":"454","line":12,"column":10,"nodeType":"449","messageId":"450","endLine":12,"endColumn":23},{"ruleId":"447","severity":1,"message":"477","line":12,"column":25,"nodeType":"449","messageId":"450","endLine":12,"endColumn":30},{"ruleId":"474","severity":1,"message":"478","line":145,"column":17,"nodeType":"476","endLine":151,"endColumn":18},{"ruleId":"474","severity":1,"message":"478","line":154,"column":17,"nodeType":"476","endLine":160,"endColumn":18},{"ruleId":"455","severity":1,"message":"456","line":120,"column":22,"nodeType":"457","messageId":"458","endLine":120,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":187,"column":36,"nodeType":"457","messageId":"458","endLine":187,"endColumn":38},{"ruleId":"455","severity":1,"message":"456","line":188,"column":37,"nodeType":"457","messageId":"458","endLine":188,"endColumn":39},{"ruleId":"455","severity":1,"message":"456","line":266,"column":23,"nodeType":"457","messageId":"458","endLine":266,"endColumn":25},{"ruleId":"455","severity":1,"message":"456","line":268,"column":24,"nodeType":"457","messageId":"458","endLine":268,"endColumn":26},{"ruleId":"455","severity":1,"message":"456","line":274,"column":30,"nodeType":"457","messageId":"458","endLine":274,"endColumn":32},{"ruleId":"455","severity":1,"message":"456","line":276,"column":24,"nodeType":"457","messageId":"458","endLine":276,"endColumn":26},{"ruleId":"455","severity":1,"message":"479","line":288,"column":36,"nodeType":"457","messageId":"458","endLine":288,"endColumn":38},{"ruleId":"455","severity":1,"message":"456","line":310,"column":26,"nodeType":"457","messageId":"458","endLine":310,"endColumn":28},{"ruleId":"455","severity":1,"message":"479","line":18,"column":18,"nodeType":"457","messageId":"458","endLine":18,"endColumn":20},{"ruleId":"455","severity":1,"message":"479","line":18,"column":36,"nodeType":"457","messageId":"458","endLine":18,"endColumn":38},{"ruleId":"455","severity":1,"message":"456","line":24,"column":26,"nodeType":"457","messageId":"458","endLine":24,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":15,"column":14,"nodeType":"457","messageId":"458","endLine":15,"endColumn":16},{"ruleId":"455","severity":1,"message":"456","line":25,"column":22,"nodeType":"457","messageId":"458","endLine":25,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":46,"column":20,"nodeType":"457","messageId":"458","endLine":46,"endColumn":22},{"ruleId":"455","severity":1,"message":"456","line":69,"column":26,"nodeType":"457","messageId":"458","endLine":69,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":100,"column":24,"nodeType":"457","messageId":"458","endLine":100,"endColumn":26},{"ruleId":"455","severity":1,"message":"456","line":51,"column":24,"nodeType":"457","messageId":"458","endLine":51,"endColumn":26},{"ruleId":"447","severity":1,"message":"448","line":3,"column":29,"nodeType":"449","messageId":"450","endLine":3,"endColumn":37},{"ruleId":"455","severity":1,"message":"456","line":122,"column":20,"nodeType":"457","messageId":"458","endLine":122,"endColumn":22},{"ruleId":"455","severity":1,"message":"479","line":174,"column":25,"nodeType":"457","messageId":"458","endLine":174,"endColumn":27},{"ruleId":"455","severity":1,"message":"479","line":174,"column":54,"nodeType":"457","messageId":"458","endLine":174,"endColumn":56},{"ruleId":"455","severity":1,"message":"456","line":184,"column":27,"nodeType":"457","messageId":"458","endLine":184,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":184,"column":55,"nodeType":"457","messageId":"458","endLine":184,"endColumn":57},{"ruleId":"455","severity":1,"message":"456","line":191,"column":27,"nodeType":"457","messageId":"458","endLine":191,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":196,"column":27,"nodeType":"457","messageId":"458","endLine":196,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":196,"column":55,"nodeType":"457","messageId":"458","endLine":196,"endColumn":57},{"ruleId":"455","severity":1,"message":"456","line":323,"column":24,"nodeType":"457","messageId":"458","endLine":323,"endColumn":26},{"ruleId":"455","severity":1,"message":"456","line":337,"column":66,"nodeType":"457","messageId":"458","endLine":337,"endColumn":68},{"ruleId":"455","severity":1,"message":"456","line":342,"column":34,"nodeType":"457","messageId":"458","endLine":342,"endColumn":36},{"ruleId":"455","severity":1,"message":"456","line":347,"column":41,"nodeType":"457","messageId":"458","endLine":347,"endColumn":43},{"ruleId":"455","severity":1,"message":"456","line":352,"column":41,"nodeType":"457","messageId":"458","endLine":352,"endColumn":43},{"ruleId":"455","severity":1,"message":"456","line":408,"column":24,"nodeType":"457","messageId":"458","endLine":408,"endColumn":26},{"ruleId":"455","severity":1,"message":"456","line":67,"column":35,"nodeType":"457","messageId":"458","endLine":67,"endColumn":37},{"ruleId":"455","severity":1,"message":"456","line":68,"column":35,"nodeType":"457","messageId":"458","endLine":68,"endColumn":37},{"ruleId":"455","severity":1,"message":"456","line":43,"column":20,"nodeType":"457","messageId":"458","endLine":43,"endColumn":22},{"ruleId":"455","severity":1,"message":"456","line":57,"column":17,"nodeType":"457","messageId":"458","endLine":57,"endColumn":19},{"ruleId":"455","severity":1,"message":"456","line":65,"column":22,"nodeType":"457","messageId":"458","endLine":65,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":90,"column":26,"nodeType":"457","messageId":"458","endLine":90,"endColumn":28},{"ruleId":"447","severity":1,"message":"480","line":2,"column":22,"nodeType":"449","messageId":"450","endLine":2,"endColumn":33},{"ruleId":"455","severity":1,"message":"456","line":42,"column":24,"nodeType":"457","messageId":"458","endLine":42,"endColumn":26},{"ruleId":"455","severity":1,"message":"456","line":86,"column":35,"nodeType":"457","messageId":"458","endLine":86,"endColumn":37},{"ruleId":"455","severity":1,"message":"456","line":96,"column":35,"nodeType":"457","messageId":"458","endLine":96,"endColumn":37},{"ruleId":"455","severity":1,"message":"456","line":29,"column":23,"nodeType":"457","messageId":"458","endLine":29,"endColumn":25},{"ruleId":"455","severity":1,"message":"456","line":56,"column":26,"nodeType":"457","messageId":"458","endLine":56,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":126,"column":26,"nodeType":"457","messageId":"458","endLine":126,"endColumn":28},{"ruleId":"474","severity":1,"message":"478","line":238,"column":13,"nodeType":"476","endLine":243,"endColumn":14},{"ruleId":"447","severity":1,"message":"481","line":12,"column":18,"nodeType":"449","messageId":"450","endLine":12,"endColumn":23},{"ruleId":"455","severity":1,"message":"456","line":146,"column":29,"nodeType":"457","messageId":"458","endLine":146,"endColumn":31},{"ruleId":"455","severity":1,"message":"456","line":195,"column":27,"nodeType":"457","messageId":"458","endLine":195,"endColumn":29},{"ruleId":"482","severity":1,"message":"483","line":201,"column":5,"nodeType":"484","endLine":201,"endColumn":15},{"ruleId":"455","severity":1,"message":"456","line":211,"column":27,"nodeType":"457","messageId":"458","endLine":211,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":230,"column":27,"nodeType":"457","messageId":"458","endLine":230,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":252,"column":23,"nodeType":"457","messageId":"458","endLine":252,"endColumn":25},{"ruleId":"455","severity":1,"message":"456","line":260,"column":22,"nodeType":"457","messageId":"458","endLine":260,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":262,"column":29,"nodeType":"457","messageId":"458","endLine":262,"endColumn":31},{"ruleId":"455","severity":1,"message":"456","line":270,"column":29,"nodeType":"457","messageId":"458","endLine":270,"endColumn":31},{"ruleId":"455","severity":1,"message":"456","line":277,"column":29,"nodeType":"457","messageId":"458","endLine":277,"endColumn":31},{"ruleId":"455","severity":1,"message":"456","line":354,"column":29,"nodeType":"457","messageId":"458","endLine":354,"endColumn":31},{"ruleId":"455","severity":1,"message":"456","line":416,"column":27,"nodeType":"457","messageId":"458","endLine":416,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":444,"column":33,"nodeType":"457","messageId":"458","endLine":444,"endColumn":35},{"ruleId":"455","severity":1,"message":"456","line":598,"column":31,"nodeType":"457","messageId":"458","endLine":598,"endColumn":33},{"ruleId":"455","severity":1,"message":"456","line":688,"column":31,"nodeType":"457","messageId":"458","endLine":688,"endColumn":33},{"ruleId":"455","severity":1,"message":"456","line":751,"column":22,"nodeType":"457","messageId":"458","endLine":751,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":833,"column":25,"nodeType":"457","messageId":"458","endLine":833,"endColumn":27},{"ruleId":"455","severity":1,"message":"456","line":880,"column":26,"nodeType":"457","messageId":"458","endLine":880,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":906,"column":26,"nodeType":"457","messageId":"458","endLine":906,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":1463,"column":40,"nodeType":"457","messageId":"458","endLine":1463,"endColumn":42},{"ruleId":"455","severity":1,"message":"456","line":52,"column":23,"nodeType":"457","messageId":"458","endLine":52,"endColumn":25},{"ruleId":"455","severity":1,"message":"456","line":52,"column":53,"nodeType":"457","messageId":"458","endLine":52,"endColumn":55},{"ruleId":"455","severity":1,"message":"456","line":37,"column":22,"nodeType":"457","messageId":"458","endLine":37,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":58,"column":20,"nodeType":"457","messageId":"458","endLine":58,"endColumn":22},{"ruleId":"455","severity":1,"message":"456","line":81,"column":26,"nodeType":"457","messageId":"458","endLine":81,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":112,"column":24,"nodeType":"457","messageId":"458","endLine":112,"endColumn":26},{"ruleId":"455","severity":1,"message":"456","line":18,"column":22,"nodeType":"457","messageId":"458","endLine":18,"endColumn":24},{"ruleId":"455","severity":1,"message":"479","line":25,"column":46,"nodeType":"457","messageId":"458","endLine":25,"endColumn":48},{"ruleId":"447","severity":1,"message":"485","line":4,"column":8,"nodeType":"449","messageId":"450","endLine":4,"endColumn":15},{"ruleId":"486","severity":1,"message":"487","line":11,"column":3,"nodeType":"488","messageId":"489","endLine":13,"endColumn":4},{"ruleId":"455","severity":1,"message":"479","line":25,"column":23,"nodeType":"457","messageId":"458","endLine":25,"endColumn":25},{"ruleId":"455","severity":1,"message":"479","line":25,"column":45,"nodeType":"457","messageId":"458","endLine":25,"endColumn":47},{"ruleId":"455","severity":1,"message":"479","line":27,"column":25,"nodeType":"457","messageId":"458","endLine":27,"endColumn":27},{"ruleId":"455","severity":1,"message":"479","line":27,"column":54,"nodeType":"457","messageId":"458","endLine":27,"endColumn":56},{"ruleId":"455","severity":1,"message":"456","line":88,"column":26,"nodeType":"457","messageId":"458","endLine":88,"endColumn":28},{"ruleId":"447","severity":1,"message":"490","line":3,"column":28,"nodeType":"449","messageId":"450","endLine":3,"endColumn":32},{"ruleId":"455","severity":1,"message":"456","line":18,"column":22,"nodeType":"457","messageId":"458","endLine":18,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":39,"column":26,"nodeType":"457","messageId":"458","endLine":39,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":59,"column":26,"nodeType":"457","messageId":"458","endLine":59,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":20,"column":34,"nodeType":"457","messageId":"458","endLine":20,"endColumn":36},{"ruleId":"455","severity":1,"message":"456","line":22,"column":41,"nodeType":"457","messageId":"458","endLine":22,"endColumn":43},{"ruleId":"455","severity":1,"message":"456","line":33,"column":41,"nodeType":"457","messageId":"458","endLine":33,"endColumn":43},{"ruleId":"455","severity":1,"message":"456","line":45,"column":41,"nodeType":"457","messageId":"458","endLine":45,"endColumn":43},{"ruleId":"455","severity":1,"message":"456","line":57,"column":41,"nodeType":"457","messageId":"458","endLine":57,"endColumn":43},{"ruleId":"447","severity":1,"message":"491","line":8,"column":8,"nodeType":"449","messageId":"450","endLine":8,"endColumn":9},{"ruleId":"455","severity":1,"message":"456","line":61,"column":35,"nodeType":"457","messageId":"458","endLine":61,"endColumn":37},{"ruleId":"474","severity":1,"message":"478","line":109,"column":21,"nodeType":"476","endLine":114,"endColumn":22},{"ruleId":"455","severity":1,"message":"456","line":140,"column":24,"nodeType":"457","messageId":"458","endLine":140,"endColumn":26},{"ruleId":"455","severity":1,"message":"456","line":148,"column":26,"nodeType":"457","messageId":"458","endLine":148,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":166,"column":17,"nodeType":"457","messageId":"458","endLine":166,"endColumn":19},{"ruleId":"447","severity":1,"message":"481","line":2,"column":34,"nodeType":"449","messageId":"450","endLine":2,"endColumn":39},{"ruleId":"447","severity":1,"message":"492","line":4,"column":32,"nodeType":"449","messageId":"450","endLine":4,"endColumn":38},{"ruleId":"474","severity":1,"message":"478","line":119,"column":21,"nodeType":"476","endLine":124,"endColumn":22},{"ruleId":"455","severity":1,"message":"456","line":150,"column":19,"nodeType":"457","messageId":"458","endLine":150,"endColumn":21},{"ruleId":"455","severity":1,"message":"456","line":150,"column":38,"nodeType":"457","messageId":"458","endLine":150,"endColumn":40},{"ruleId":"455","severity":1,"message":"456","line":162,"column":26,"nodeType":"457","messageId":"458","endLine":162,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":181,"column":17,"nodeType":"457","messageId":"458","endLine":181,"endColumn":19},{"ruleId":"455","severity":1,"message":"456","line":181,"column":35,"nodeType":"457","messageId":"458","endLine":181,"endColumn":37},{"ruleId":"455","severity":1,"message":"456","line":26,"column":26,"nodeType":"457","messageId":"458","endLine":26,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":40,"column":28,"nodeType":"457","messageId":"458","endLine":40,"endColumn":30},{"ruleId":"455","severity":1,"message":"456","line":49,"column":28,"nodeType":"457","messageId":"458","endLine":49,"endColumn":30},{"ruleId":"455","severity":1,"message":"456","line":67,"column":28,"nodeType":"457","messageId":"458","endLine":67,"endColumn":30},{"ruleId":"455","severity":1,"message":"456","line":130,"column":42,"nodeType":"457","messageId":"458","endLine":130,"endColumn":44},{"ruleId":"455","severity":1,"message":"456","line":136,"column":42,"nodeType":"457","messageId":"458","endLine":136,"endColumn":44},{"ruleId":"455","severity":1,"message":"456","line":153,"column":22,"nodeType":"457","messageId":"458","endLine":153,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":21,"column":22,"nodeType":"457","messageId":"458","endLine":21,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":95,"column":26,"nodeType":"457","messageId":"458","endLine":95,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":116,"column":26,"nodeType":"457","messageId":"458","endLine":116,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":86,"column":27,"nodeType":"457","messageId":"458","endLine":86,"endColumn":29},{"ruleId":"455","severity":1,"message":"456","line":109,"column":22,"nodeType":"457","messageId":"458","endLine":109,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":26,"column":26,"nodeType":"457","messageId":"458","endLine":26,"endColumn":28},{"ruleId":"455","severity":1,"message":"456","line":40,"column":28,"nodeType":"457","messageId":"458","endLine":40,"endColumn":30},{"ruleId":"455","severity":1,"message":"456","line":49,"column":28,"nodeType":"457","messageId":"458","endLine":49,"endColumn":30},{"ruleId":"455","severity":1,"message":"456","line":67,"column":28,"nodeType":"457","messageId":"458","endLine":67,"endColumn":30},{"ruleId":"455","severity":1,"message":"456","line":127,"column":42,"nodeType":"457","messageId":"458","endLine":127,"endColumn":44},{"ruleId":"455","severity":1,"message":"456","line":133,"column":42,"nodeType":"457","messageId":"458","endLine":133,"endColumn":44},{"ruleId":"455","severity":1,"message":"456","line":148,"column":22,"nodeType":"457","messageId":"458","endLine":148,"endColumn":24},{"ruleId":"455","severity":1,"message":"456","line":81,"column":22,"nodeType":"457","messageId":"458","endLine":81,"endColumn":24},{"ruleId":"493","severity":1,"message":"494","line":13,"column":13,"nodeType":"476","endLine":13,"endColumn":51},{"ruleId":"493","severity":1,"message":"494","line":18,"column":13,"nodeType":"476","endLine":18,"endColumn":50},{"ruleId":"493","severity":1,"message":"494","line":35,"column":13,"nodeType":"476","endLine":35,"endColumn":51},{"ruleId":"493","severity":1,"message":"494","line":41,"column":13,"nodeType":"476","endLine":41,"endColumn":50},{"ruleId":"493","severity":1,"message":"494","line":14,"column":13,"nodeType":"476","endLine":14,"endColumn":51},{"ruleId":"493","severity":1,"message":"494","line":20,"column":13,"nodeType":"476","endLine":20,"endColumn":50},{"ruleId":"443","replacedBy":"495"},{"ruleId":"445","replacedBy":"496"},"no-native-reassign",["497"],"no-negated-in-lhs",["498"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Student' is defined but never used.","'Canvas' is defined but never used.","'Link' is defined but never used.","'BrowserRouter' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Route' is defined but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Expected '!==' and instead saw '!='.","'useLocation' is defined but never used.","'Modal' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","'Subject' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Form' is defined but never used.","'$' is defined but never used.","'FaPlus' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["497"],["498"],"no-global-assign","no-unsafe-negation"]